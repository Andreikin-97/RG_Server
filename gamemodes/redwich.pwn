
main() {}
/* ___________________________________________________________________

Начало разработки проекта - (15.01.2020 в 19:16)
Название проекта: Redwich RolePlay

Разработчик (Основатель) проекта - Андрей Морозов - (Andreikin)

ГРП - (Главный разработчика проекта):
    1. Андрей Морозов (Andreikin)

Помощники ГРП:
    1. None - (None)
    2. None - (None)
    3. None - (None)
______________________________________________________________________ */

// ДОДЕЛАТЬ ПРИЗЫ - stock SetPrizePodarok(playerid, i)

// Инклуды
#include 	<a_samp>
//
#include	<a_http>
#include 	<a_mysql>
#include 	<streamer>
#include 	<sscanf2>
#include 	<mxdate>
#include 	<TOTP>
#include    <mailer>
#include 	<foreach>
#include 	<a_engine>
#include 	<a_vehicles>
#include 	<PointToPoint>
#include 	<a_players>
#include 	<Pawn.CMD>
#include 	<Pawn.Regex>
#include 	<float>
#include 	<mxINI>
#include 	<cef>
#include    <md5>
#include    <crp>
#include    <sampvoice> // Голосовой чат

// Таблицы сервера базы данных

#include "../include/Baze_List.inc" // - Таблица

// Дефайны сервера

#define  	sNAMES			"Redwich Games" // - Название проекта
#define 	sSERVER_NAMES	"None" // - Название сервера
#define 	sNUMBER			"1" // - Номер сервера
#define 	sOBNOVA			"None" // - Название обновления
#define 	sVERSION 		"v 0.0.1" // - Версия мода (обновление) проекта
#define 	sWEBSITE 		"redwich-rp.ru" // - Сайт проекта
#define 	sWEB_DONATE     "redwich-rp.ru/donat" // - Донат проекта
#define 	sFORUM         	"forum.redwich-rp.ru" // - Форум проекта
#define 	sGROUP         	"vk.com/redwich_rp" // - Группа проекта
#define 	sMAPNAME       	"Criminal Russia" // - Название карты
#define 	sLANGUAGE      	"Russian" // - Язык сервера
#define 	sRCON_PASS		"awldkawW3AWd3awWADWadaw5wd5648654" // - RCON Пароль
#define 	sPASS 			"" // - Пароль сервера

// Цвета

#define 	cSERVER        	0xFF9900FF
#define 	SERVER         	"{FF9900}"

// Основной цвет
#define 	cWHITE        	0xFFFFFFAA // Белый
#define 	WHITE         	"{FFFFFF}"
#define 	cBLUE 			0x3399FFFF // Синий
#define     BLUE    		"{3399FF}"
#define 	cPURPLE 		0xDD90FFFF // Пурпурный
#define     PURPLE    		"{DD90FF}"
#define 	cLIME			0x66CC00FF // Салатовый
#define     LIME    		"{66CC00}"
#define 	cLIMEGREEN		0x32CD32FF // Салато-Зеленый
#define     LIMEGREEN    	"{32CD32}"
#define     cRED    		0xAA3333AA // Красный
#define     RED    			"{AA3333}"
#define 	cWAR	     	0xDF3C3CFF // Ошибка
#define 	WAR	        	"{DF3C3C}"
#define 	cGREEN 			0x63BD4EFF // Зеленый
#define     GREEN    		"{63BD4E}"
#define 	cGREY 			0xAFAFAFAA // Серый
#define     GREY    		"{AFAFAF}"
#define 	cYELLOW 		0xFFFF00FF // Желтый
#define     YELLOW    		"{FFFF00}"

// Клисты для фракции
#define 	cNone 			0xFFFFFF // None
#define 	cfNone         	"{FFFFFF}"
#define 	cAO 			0xFAEB6C90 // 1 - АДМИНСИТРАЦИЯ ОБЛАСТИ
#define 	cfAO         	"{FAEB6C}"
#define 	cPPS 			0x0B3BDB90 // 2 - ППС
#define 	cfPPS         	"{0B3BDB}"
#define 	cDPS 			0x0B3BDB90 // 3 - ДПС
#define 	cfDPS         	"{0B3BDB}"
#define 	cFSB 			0xFF9900FF // 4 - ФСБ
#define 	cfFSB         	"{FF9900}"
#define 	cVH 			0x845410FF // 5 - Вооруженные силы
#define 	cfVH         	"{845410}"
#define 	cSMP 			0xFD80CFFF // 6 - ОБЛАСТНАЯ БОЛЬНИЦА
#define 	cfSMP         	"{FD80CF}"
#define 	cSMI 			0x00CCFFFF // 7 - ТРК Связь
#define 	cfSMI         	"{00CCFF}"
#define 	cOPGB 			0xC93E0A90 // 8 - ОПГ Барыги
#define 	cfOPGB         	"{C93E0A}"
#define 	cOPGY 			0xF7367F90 // 9 - ОПГ Южная
#define 	cfOPGY         	"{F7367F}"
#define 	cHMAFIA 		0xE0AC6190 // 10 - ЧЕЧЕНСКАЯ МАФИЯ
#define 	cfHMAFIA        "{E0AC61}"
#define 	cRMAFIA 		0x9E9C9C90 // 11 - РУССКАЯ МАФИЯ
#define 	cfRMAFIA        "{9E9C9C}"
//

// Макросы

#define	d_info 				DIALOG_STYLE_MSGBOX
#define	d_list 				DIALOG_STYLE_LIST
#define	d_pass 				DIALOG_STYLE_PASSWORD
#define	d_input         	DIALOG_STYLE_INPUT
// Только для 0.3.7 версии
#define d_tlist				DIALOG_STYLE_TABLIST
#define d_tlisth			DIALOG_STYLE_TABLIST_HEADERS
//

#define	SCM            		SendClientMessage
#define	SCMAll          	SendClientMessageToAll
#define	SPD             	ShowPlayerDialog
#define	FSCM(%1,%2,%3,%4)	do{new _s[144]; format(_s,144,%3,%4); SCM(%1,%2,_s); }while(FALSE)

#define	SCMInfo(%0,%1)		SCM(%0, cLIME, "| {FFFFFF}" %1), PlayerPlaySound(%0, 1083, 0.0, 0.0, 0.0)
#define	SEM(%0,%1)			SCM(%0, cWAR, "| {FFFFFF}" %1), PlayerPlaySound(%0, 1085, 0.0, 0.0, 0.0)

#define for(%0,%1)   		for(new %0; %0 < %1; %0++)
#define string_f(  			format(string, sizeof(string),
#define stringer_f(  		format(stringer, sizeof(stringer),


#if !defined FALSE
							new stock bool:FALSE = false;
#endif
#if !defined IsValidVehicle
     						native IsValidVehicle(vehicleid);

#endif

#define LoginOff        	"Для начало авторезуйтесь!"
#define PlayerOff       	"Игрока нет на сервере!"
#define PlayerLoginOff  	"Игрок не авторизован!"
#define AdminLoginOff   	"Вы не авторизовались в админ - центре!"
#define AdminBlock          "Ваши права администратора заблокированы!"
#define PlayerID        	"Вы ввели свой ID!"
#define CMDOff          	"Команда не найдена! Все команды Вы найдете "SERVER"/mn(/menu){FFFFFF} > Команды сервера"
//
#define	OffStrelki(%0,%1)	TogglePlayerSpectating(%0, %1)
#define	Freeze(%0,%1)		TogglePlayerControllable(%0, %1)
#define	publics%0(%1)		forward%0(%1); public%0(%1)
//
#define PRESSED(%0) 		(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) 		(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))


#define GetName(%0)    		AcI[%0][acLogin]
#define GetAdmin(%0)    	AI[%0][aLevel]

#define GetMoney(%0)    	PI[%0][Money]
#define GetBank(%0)    		PI[%0][Bank]
#define GetFrac(%0)    		PI[%0][Frac]
#define GetJob(%0)    		PI[%0][Job]
#define GetSeat(%0)         PI[%0][Satiety]
#define	AdminName(%0)		Admin_Name[GetAdmin(%0)-1]

// Голосовой чат
#define SV_KEY_Z 0x5A // Клавиша Z (sv_player)

new
	// Локальный чат
	SV_LSTREAM:sv_player[MAX_PLAYERS] = { SV_NULL, ... };
//

/* ============================= [ Переменные ] ============================= */

// [ Простые ]
new
	MySQL: mysql, rows,
	year_s, month_s, day_s, // переменные даты
	hour_s, minute_s, second_s; // переменные времени

//  Google Authenticator
new	google_code[17]; //
new base_encoding[32][] =
{ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y","Z","2", "3", "4", "5", "6", "7" };

// [ bool Простые ]
new
	StatusLift, // Статус лифта во время движения
	LiftCabin, // Кабна лифта
    DoorsLiftUp[2], // Двери лифта на шахте вврех
    DoorsLiftDown[2], // Двери лифта на шахте низ
    DoorsLiftAttach[2];

// [ Static Object ]
new
	// Мост Южного
	Most[2],
	bool: MostMove,
	// Шлакбаумы на мосту Южного
	Shlak[2],
    bool: MostShlakMove[2],
	// Ворота Шахты
	GateScahta,
	bool: StatusGateScahta,
	// Шлакбаум на Шахте
	ShlakScahta,
	bool: StatusShlakScahta,
	// Шлакбаумы банка Батырево
	ShlakBank_B,
    bool: StatusShlakBank_B,
	// Шлакбаум на въезде к Админ-дому
	ShlakAdminZone,
	bool: StatusShlakAdminZone,
	// Ворота дома Админ
	GateAdminHouse,
	bool: StatusGateAdminHouse,
	//
	GateZavod,
	bool: StatusGateZavod,
	// Шлакбаум Автошколы Арзамас
	ShlakAS,
	bool: StatusShlakAS,
	// Шлакбаум работы - Механик
	ShlakMechanic,
	bool: StatusShlakMechanic,
	// Ворота работы - Механик
	GateMechanic[2],
	bool: StatusGateMechanic[2],
	//
	// Дверь деморгана
	GateDemorgan[MAX_PLAYERS], //
	bool: StatusGateDemorgan[MAX_PLAYERS],
/* ================================================= [ Работы ] ================================================ */
// Работа Шахтера
    MineralVagon, // Вагон на шахте
// Работа Лесоповал
/* ============================================================================================================= */
/* ============================================== [ Организации ] ============================================== */
// 1 - АО
// 2 - ППС
	ShlakPPS,
bool: StatusShlakPPS,
// 3 - ДПС
	ShlakDPS,
bool: StatusShlakDPS,
	GateDPS,
bool: StatusGateDPS,
// 4 - ФСБ
	ShlakFSB[2],
bool: StatusShlakFSB[2],
	GateFSB,
bool: StatusGateFSB,
// 5 - ВЧ
	ShlakSkladVH,
bool: StatusShlakSkladVH,
	GateVH[2],
bool: StatusGateVH[2],
	DoorVH[4],
bool: StatusDoorVH[4];
// 6 - СМП
// 7 - СМИ
// 8 - ОПГ-Б
// 9 - ОПГ-Ю
// 10 - Ч-Мафия
// 11 - Р-Мафия
/* ============================================================================================================= */

// [ MAX_PLAYERS Простые ]

new PickupUp[MAX_PLAYERS] = {-1, ...}; // Антифлуд пикапом

new
    PasswordError[MAX_PLAYERS],
    AdminPasswordError[MAX_PLAYERS],
	AdminCarTD[MAX_PLAYERS], //

	InviteLeader[MAX_PLAYERS], // Назначение лидера
	InviteFrac[MAX_PLAYERS],
	InviteFamily[MAX_PLAYERS],
	//
	TimeInfo[MAX_PLAYERS],
	// Для организаций
	// ППС,ДПС,ФСБ
	TazerTime[MAX_PLAYERS], //
	// Больница
	MedPland[MAX_PLAYERS], //
	//
	PlayerAFK[MAX_PLAYERS],
	PlayerRent[MAX_PLAYERS],
	// Работа Шахтера
	PlayerMineral[MAX_PLAYERS], //
	AllPlayerMineral[MAX_PLAYERS], //
	// Работа Лесоповал
	AllPlayerDerevo[MAX_PLAYERS];

// [ bool Простые]
new
	bool: PAYDAY;

// [ bool MAX_PLAYERS ]
new
	bool: PlayerLogin[MAX_PLAYERS], // Статус авторизации игрока
	bool: AdminLogin[MAX_PLAYERS], // Статус авторизации админа
	bool: AdminGM[MAX_PLAYERS], // Статус бессмертия для админа
	bool: StatusMapTP[MAX_PLAYERS], // Статус местки ТП по карте для админа
	bool: JobStatus[MAX_PLAYERS][3], // Статус начаотной работы игрока
	bool: FrezePlayer[MAX_PLAYERS], // Статус заморозки игрока
	bool: PlayerDied[MAX_PLAYERS], // Статус игрока после смерти
	bool: StatusPhone[MAX_PLAYERS], // Стату Вкл/Выкл телефона у игрока
	bool: CheckAnims[MAX_PLAYERS], //
	bool: StatusRemen[MAX_PLAYERS], // Ремень безопасности в ТС
	bool: JobMine[MAX_PLAYERS], // Добыча руды
	bool: JobMineDrive[MAX_PLAYERS], // Доставка руды
	bool: JobLesorub[MAX_PLAYERS]; // Работа Лесоповал

// [ Text3D ]
new
	// Работа Шахтера
Text3D: SkladScahtaInfo[2], //
Text3D: VagonInfo; // Информация о вагоне
	// Работа Лесоповал

// [ TextDraw ]

// [ TextDraw MAX_PLAYERS ]

new
PlayerText: LoginTime_PTD[MAX_PLAYERS][4],
PlayerText: GreenZone_PTD[MAX_PLAYERS], // Зеленная зона
PlayerText: ParkZone_PTD[MAX_PLAYERS], // Зона парковки
PlayerText: Select_Guns_PTD[MAX_PLAYERS][46], // Выбор оружия
PlayerText: Scahta_PTD[MAX_PLAYERS][9],
PlayerText: Stop_anim_PTD[MAX_PLAYERS][1],
PlayerText: Speed_PTD[MAX_PLAYERS][20],
PlayerText:	SelectCar_Veh_PTD[MAX_PLAYERS][10],
PlayerText: GameTime_PTD[MAX_PLAYERS][8],
PlayerText: SpecInfo_PTD[MAX_PLAYERS][28],
PlayerText: BuyCars_PTD[MAX_PLAYERS][21];


// [ Float ]
new
	Float: MapPos[MAX_PLAYERS][3]; // ТП по карте админам


// [ MAX_VEHICLES ]

new
	Iterator: adm_vehicles<MAX_VEHICLES>,
	ShowFracCar[MAX_PLAYERS][MAX_VEHICLES],
	UpdateFuel[MAX_VEHICLES],
	TotalAdminVehicles = 0;

// [ Text3D - MAX_PLAYERS ]

// [ PickupUp ]
new
    picAutovokzal[2], //
	picBank[3], // Банк
	picPass[2], //
	picScahta[2], // Работа Шахтера
	picAutoSalon[2], // Автосалон
	picDemorgan[2], //
	// picAvtoShkola[2], // Автошкола
	// ДПС
	picParkingDPS[2], //
	picParkingCarDPS[3], //
	// ВЧ
	picParkingVH[2], //
	picParkingCarVH[3], //
	// ФСБ
	picParkingFSB[2], //
	picParkingCarFSB[3]; //


// [ DynamicPickupUp ]
new
	picBankMenu[2], // Меню банка
	picPassDoc, //
	picArendaCar[2], // Аренда транспорта для новичков
	// Работа Лесоповал
	picJobLesorub,
	picAutoSalonBuy, //
// [ Организации ]
	// АО
	picNaloginAO, //
	picFamilyAO; //


// [  ]
new
	VagonCP[1], //
	ScahtaSkladCP[1]; //

// [ Cars ]

new
	carMine[15], // Транспорт для Шахты
	carBank[9], // Транспорт для банка
	carMusor[15], // Транспорт для Шахты
	carMechanic[8]; // Транспорт для Мусорщиков

/* ============================== [ Енумы ] ================================= */

// Енумы
enum // Диалоги
{
    dNull,
    dServerPass, // Сервер закрыт
	// Регистрация игрока
	dRegPlayer, //
    dRegPlayerEmail, //
    dRegPlayerEmailPass, // Подтверждения почты
    dRegPlayerReferal, //
    dRegPlayerSex, //
	//
    dPlayerLogin, // Авторизация
	dSetPin, // Указать защитный PIN код
    dPlayerSpawn, //
	//
    // Главные настройки сервера
    dSettingServerMenu, // Меню
    dSettingServerNameProject, // Название проекта
    dSettingServerNumber, // Номер сервера
    dSettingServerName, // Название сервера
    dSettingServerNameUpdate, // Название обновления
    dSettingServerUpdate, // Версия обновления
    dSettingServerWeb, // Сайт проекта
    dSettingServerWebDonat, // Сайт доната проекта
    dSettingServerForum, // Форум проекта
    dSettingServerGroup, // Группа ВКонтакте проекта
    dSettingServerNameMap, // Название карты
    dSettingServerPassword, // Пароль сервера
    dSettingServerBonusCash, // Бонусные деньги
    dSettingServerBonusLevel, // Бонусный уровень
    dSettingServerBonusDonat, // Бонусный донат
    dSettingServerXServer, // Удвоение на сервере
    dSettingServerXexp, // Удвоение опыта
    dSettingServerXjobPay, // Удвоение зарплат на работах
    dSettingServerXfracPay, // Удвоение зарплат в организациях
    dSettingServerXdonat, // Удвоение доната
    //
    // Меню банка
    dBankMenu, //
	dBankList, //
	dBankBalans, // Баланс счета
	dBankUp, // Пополнить счет
	dBankDown, // Снять со счета
	dBankPerevod, // перевести на другой счет
	dBankPayShtrafNumber, // Оплата штрафа по номеру
	dPayShtrafAll, // Оплатить все штрафы
	dBankShetHouse, //
	dBankShetFamily, //
	dBankShetBiz, //
	dBankShetTK, //
	//
	dCreateCard, // Получение карты
	dBankCardMenu, // Список карт
	dPlayerCardMenu, // Меню управления картой
	// Система ATM - Банкомата
	dAtmMenu, //
	dAtmDown, // Снять со счета
	dAtmUp, // Пополнить счет
	//
	// Сменить статистику игроку
	dSetStats,
	dSetStatsLevel,
	dSetStatsSex,
	dSetStatsZakon,
	dSetStatsWanted,
	dSetStatsJob,
	dSetStatsClearWanted,
	//
	dCarPanel,
	dCarPanelDoors,
	dCarPanelWindows,
	//
	dAdminLogin, // Авторизация администратора
	dAdminLoginOff, // Завершить дежурство адиминистора
    dAhelp, // Команды для адиминистрации
	dAhelpOff, // Закрыть команды администратора
	dExitFly, // Система полета камерой
	//
	dRemoveAdmin, // Снять администратора с поста
	//
	dCarColor, // Сменить цвет транспорту
	//
	dAddMenu, //
 	dAddRadar, //
	// dAddMusorka,
	dAddATM, //
	dAddBilBord, //
	// Промо-код
	dAddPromoMenu, //
	dAddPromoCreate, //
	//
	dAddPromoName, //
	dAddPromoActiv, //
	dAddPromoExp, //
	dAddPromoLevel, //
	dAddPromoMoney, //
	dAddPromoDonat, //
	dAddPromoVip, //
	//
	dAdminIntList, //
	dAdminIntListJob, // Работы
	dAdminIntListFrac, // Организации
	dAdminIntListHouse, // Дома
	dAdminIntListGarage, // Гаражи
	//
	// Мои штрафы
	dShtrafInfo,
	// Меню лидера организации
	dLeaderPanel, //
	dSettingCarFrac, //
	dSetCarFrac, //
	dSettingCarFracRang, //
	//
	dFracInfo, // Информация от организации
	dFracInfoMenu, // Меню информации организации
	dFracGun, // Оружие для организации
	dLeaveFrac, // Покинуть организацию
	//
	// Система мероприятий
	dSettingMP,
	dSetMP,
	dMpName,
	dMpComans,
	dMpSkin,
	dMpGun,
	dMpPeize,
	dWinMp,
	//
	dPromoInfo, // Промо-код
	// Семьи
	dInfoFamily,
    dListFamily,
    dListFamilyOff,
    dCreateFamily,
	dFamMenu,
	//
	// Оформление паспорта
	dDocPas, // Начало оформление паспорта
	dDocPasGod, // Оформление паспорта - Указать год рождения
	dDocPasGorod, // Оформление паспорта - Указать город рождения
	dDocPasPoluchenie, // Оформление паспорта - Получение готового папорта
	//
	// Работа Шахтера
	dJobMineSelect, //
	dJobMine, //
	dJobMineDrive, //
	//
	// Работа Лесоповал
	dJobLesorub,
	//
	dArendaVelik, // Аренда велосипеда
    dRendCar, //
	dArendaCarOff, // Прекратить аренду транспорта
	//
	dSelectCarBuy, // Покупка траспорта в Автосалоне
	dMenuServer, // Меню игрока
	dPlayerStats, //
    dMenuStats, // Информация о персонаже

    dSetLeader, // Назначит на пост лидера
	dSetLeaderUval, // Снять
    dAdminFracInvite, //
	dAdminFracRang, //
	// Панель администратора
    dAdminPanel,
    dAdminPanelOff,
	dSettingFrac, // Настройки организации
	dSettingFracMenu, //
	dSettingFracSelect, //
	dSettingFracBank, //
	// Настройки администратора
    dAdminSettings, // Настройки администратора
	dAdminSmenaPass, // Смена пароля администратора
	dAdminSmenaPassCode, // Отправка кода подтверждения
    dAdminSmenaPassCode1, //
	// Команды сервера
	dCommandServer,
    dCommandOsnovnoe,
    dCommandObchenie,
	dCommandFrac,
	dCommandFracs,
	dCommandJob,
	dCommandJobOff,
	dCommandFamily,
 	dCommandCar,
 	dCommandTK,
	// Настройки
	dMenuSetting, //
	dMenuSettingUser, // Настройки безопасности
	dSmenaPass, //
	// PIN
	dCreatePinCone, //
	dSettingPinCone, //
	dSettingPinUpdate, // 
	dSettingPinUpdateNew, // 
	dSettingPinDelete, // 
	// VK
	dMenuSettingVK, //
	dSettingVK_ID, //
	dSettingVK_Code, //
	// Google
	dSettingGoogle, //
	dSettingGoogleOn, //
	dSettingGooglOff, //
	dSettingGooglOff_1, //
	// Репорт
	dReport,
	dReport1, // вопрос
	dReport2, // Жалоба
	dRepAdmin,
	dAdminRep,
	//
	dReferalList, // Список рефералов
	// Донат меню
	dDonatInfo, //
	dDonatMenu,
	dDonatConvert, //
	dDonatVip, // Vip
	//
	// Трудовая книжка
	dMyTK,
 	dMyTKlist,
 	dTkOff,
	//
	dGiveLic, // Выдать лицензии игроку
 	dTakeLic, // Забрать лицензии у игрока
	// GPS
	dGPS, // Меню навигатора
	dGPS1, // Общественные места
	dGPS2, // Подработки
	dGPSFrac, // Организации
	//
	// Система ATM - Банкоматов
	dSettingATM,
	dSettingATM_Menu,
	//
};

enum MYSQL_SETTINGS // Подключение к базе данных MySQL
{
	mysql_Host, // Хостинг
	mysql_Name, // Имя пользователя
	mysql_Pass, // Пароль базы данных
	mysql_Baza // Имя базы данных
};
new MySQLSettings[MYSQL_SETTINGS][30];

// Антифлуд пикапом
enum p_Info
{
    Float: PickX,
    Float: PickY,
    Float: PickZ,
};
new PickuPI[MAX_PICKUPS][p_Info];
//

// Система эмоций
#define SMILE_COUNT (7)
enum e_SMILE_INFO
{
	smInput[5],
	smOutput_M[40],
	smOutput_F[40]
}

static const stock SmileInfo[SMILE_COUNT][e_SMILE_INFO] = {
	{")", "улыбается", "улыбается"},
	{"))", "смеётся", "смеётся"},
	{"(", "расстроился", "расстроилась"},
	{"((", "сильно расстроился", "сильно расстроилась"},
	{"=0", "удивился", "удивилась"},
	{"+", "согласен", "согласна"},
	{"-", "не согласен", "не согласна"}
};

// Зеленная зона
#define MAX_GZ 6
enum GZ
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_NAME[32],
	GZ_AREA,
	bool: GZ_ALLOW_PARK
};
new GreenZone[MAX_GZ][GZ] =
{
    {2278.0435, 1792.7474, 2420.3582, 1701.0046, "Шахта", -1, true},
    {1806.6613, 1367.6348, 1747.5337, 1318.3748, "Автовокзал", -1, true},
    {1722.9769, 2313.6282, 1800.4327, 2243.9314, "Шахта", -1, true},
    {1820.2969, 2049.1643, 1870.2124, 2004.2864, "Банк пгт.Батырево", -1, true},
    {1060.9410, 1845.9965, 1912.9382, 1523.9611, "Армия", -1, false},
    {1905.6968, 1727.6683, 1989.1990, 1517.4502, "Армия", -1, false}
};
new TOTALGZ=0;
//

// Система Настройки сервер
enum Server_Info // Информацмя о проекте/сервере
{
	sName[32], // Название проекта
	sNumber, // Номер сервера
	sNameServer[12], // Название сервера
	sObnova[24], // Обнова сервера
	sVersion[12], // Версия сервера
	sWeb[24], // Сайт проекта
	sDonate[24], // Донат проекта
	sForum[24], // Форум проекта
	sGroup[24], // Группа проекта
	sMapName[24], // Название карты
	sLanguage[12], // Язык
	sPassword[32], // Пароль сервера
	sRconPass[32], // Главный пароль сервера
	// Бонус
	sBonusMoney, // Бонусные деньги
	sBonusLevel, // Бонусный уровень
	sBonusDonat, // Бонусный донат
	//
	sAdminPay, // Зарплата администратора
	sBankAdmin, // Банк администрации
	//
	sX_Server, // Удвоение на сервере
	sX_Exp, // Умножение опыта
	sX_JobPay, // Удвоение зарплат на работах
	sX_PayDay, // Удвоение зарплат в организациях
	sX_Donat, // Удвоение доната
 	//
 	sEvent, // Евент
	sStatusVagon, //
	sMineralVagon, //
	sMinerals, //
	sSkladDerevo, //
};
new SI[Server_Info];


enum Acc_info
{
	acID, //
	acOnline, // Статус онлайна
	acLogin[24], //
	acPassword[40], // пароль от аккаунта
	acServer, // Номер сервера
	acEmail[32], // Почта игрока
	acCheckEmail, // Статус подтверждения почты у игрока
	acReferal[24], // Кто приглосил игрока
	// Рег. данные
	acRegIP[16], // IP регистрации
	acRegData[20], // Дата регистрации
	// Данный входа
	acLastIP[16], // IP входа
	acLastData[20], // Дата входа
	//
	acPinCode, // Защитный PIN код
	acStatusPin, // Статус PIN кода
	acVkID[32], //
	acStatusGoogle, //
	acGoogleCode[32], //
	acTimeGameServer, //
	acDayGameServer //
};
new AcI[MAX_PLAYERS][Acc_info];

enum Player_Info //
{
	ID, // Номер аккаунта
	Name[24], //
	Status, // Статус персонажа (0 - Нет, 1 - Заморожен, 2 - Заблокирован, 3 - Деактивирован)
	Sex, // Пол персонажа
	Spawn, // Статус спавна персонажа
Float: Pos[4], // Координаты появления персонажа
	Int, // Интерьер персонажа
	World, // Виртуальный мир персонажа
	Skin, // Внешность персонажа
	Age, // Возраст персонажа
	Exp, // Опыт персонажа
	Level, // Уровень персонажа
	Satiety, // Сытность персонажа
	Job, // Номер работы персонажа
	GameTime, // Время отыгранное за сутки
	Money, // Деньги персонажа
	Bank, // Деньги в банке персонажа
	Donat, // Донат персонажа
Float: Health, // Здоровье персонажа
	Zakon, // Законость персонажа
	Wanted, // Преступнность персонажа
	Voenik, // Военный билет персонажа
	Lic[8], // Лицензии ( A, B, C, D, Водный, Воздушный, Оружие, Бизнес ) персонажа
bool: Poshlina, // Проверка на оплату пошлина для паспорта
	Pasport, // Статус паспорта у персонажа
	MedCard, // Статус Мед. карты у персонажа
	Phone, // Статус телефона у персонажа
	SimCard, // SIM карта у персонажа
	PhoneMoney, // Деньги на SIM карте у персонажа
	// Организация
	Frac, // Номер организации
	FracLeader, // Лидер организации
	FracSkin, // Скин организации
	FracRang, // Ранг в организации
	FracWarn, // Выговоры в оргвнизации
	//
	ShtrafPPS, // Штраф от ППС
	ShtrafDPS, // Штраф от ДПС
 	Vip, //
	Mute, //
	MuteTime, //
	Jail, //
	JailTime, //
	Warn, //
	Family, //
	//
	SkillGun[7], //
	//
};
new PI[MAX_PLAYERS][Player_Info];

enum Full_Admin_Info // Полный доступ игрока администратора
{
	faID, // Индефикатор
	faName[24], //
	faData[25], //
	faPutName[24], //
};
new FAI[MAX_PLAYERS][Full_Admin_Info];

enum Admin_Info // Администратор
{
	aID, // Индификатор администратора
	aNumber, //
	aName[24], // Имя администратора
	aPassword[40], // Пароль администратора
	aLevel, // Уровень администратора
	aData[20], // Дата назначения
	aPutName[24], // Кем назначен
	aDataVhod[20], // Дата входа администратора
	aPrefix[12], // Префикс администратора
	aReputacion, // Репутация администрация
	aWarn, // Выговор администратора
	aSetting[12], // Настройки администратора
	aBlock, // Блокировка админ прав
};
new AI[MAX_PLAYERS][Admin_Info];

#define MAX_ADMIN (10)
static const stock Admin_Name[MAX_ADMIN][40] =
{
	// Младший состав
	{"Мл. Модератор"},
	{"Модератор"},
	{"Ст. Модератор"},
	{"Гл. Модератор"},
	// Старший состав
	{"Мл. Администратор"},
	{"Администратор"},
	{"Ст. Администратора"},
	{"Гл. Администратор"},
	// Руководство
	{"Руководитель сервера"},/*
	{"Спец. Администратор"},
	{"Разработчик"},*/
	{"Основатель"}
};

// Система блокировки игрока
enum Ban_Info //
{
	bName[24],
	bAdmin[24],
	bData[32],
	bReason[64],
	bDay,
	bUnBanData[32],
	bStatus
};
new BanI[MAX_PLAYERS][Ban_Info];
//

// Система мероприятий
enum mpInfo
{
bool: mpStatsus, // Статус проведения мероприятия (1 - Зупщен, 0 - Не запущен)
	mpName[32], // Название мероприятия
	mpAdmin[24], // Кто проводит мероприятие
Float: mpCord[4], // Позиция для телепорта на мероприятия
	mpInt, // Интерьер проведения МП
	mpWorld, // Виртуальный мир проведения МП
bool: mpPlayerStatsus[MAX_PLAYERS], // Статус для игрока (1 - На МП, 0 - Не участвует)
	mpComands[MAX_PLAYERS], // Определяет в команду
	mpSkin[2], // Внешность команды
Float: mpHealch, // Здоровье
Float: mpArmour, // Броня
	mpGun, // Оружие
    mpWinName[24], // Имя победителя мероприятия
    mpTypePrize, // Тип приза на МП
	mpPrize, // Приз на мероприятии
	mpOnline, // Кол-во участников на мероприятии
bool: mpTP, // Телепорт на мероприятии
	mpTime,// Время проведения мероприятия
};
new MP[mpInfo], MpWorld[MAX_PLAYERS], MpInt[MAX_PLAYERS], Float: MpCords[MAX_PLAYERS][4];
//

// Система - История наказаний
#define MAX_HISTORY 50
enum History_Info
{
	lhID, //
	lhName[24], //
	lhData[20], //
	lhText[256], //
};
new LH[MAX_HISTORY][History_Info], ListHistory[MAX_PLAYERS];
//

// Система - Паспорта
enum PasportInfo
{
	pasName[MAX_PLAYER_NAME],
	pasSeria,
	pasNumber,
	pasSex,
	pasData[12],
	pasGorod[32],
	pasDataRojdenia[15]
};
new PsI[MAX_PLAYERS][PasportInfo];

// Система ATM - Банкомата
#define MAX_ATM 150
#define MAX_ATM_CASH 5000000
enum atm_info
{
    aID, //
	aPrice, // Стоимость
    aOwner[24], // Владелец
	aBank, // Кол-во денег в процентах
	aMoney, // Кол-во денег в банкомате
bool: aStatus, // Статус банкомата
Float: aPos[4] // Позиция банкомата
};
new ATMInfo[MAX_ATM][atm_info], TOTALATM, ATMObject[MAX_ATM], ATMIcon[MAX_ATM], Text3D: ATMText[MAX_ATM] = {Text3D:-1, ...};
//

// Система Радара
#define MAX_RADARS            100
enum r_info
{
	r_id,
	r_name[24],
	r_type,
	r_speed,
Float:r_x,
Float:r_y,
Float:r_z,
Float:r_a,
	r_object,
Text3D:r_label,
	r_area,
	r_money
};
new
	RI[MAX_RADARS][r_info],
	radar_time[MAX_PLAYERS],
	PlayerText: Radar_PTD[MAX_PLAYERS][2],
	TOTALRADAR;
//

// Система муорки
#define MAX_MUSORKI		250
enum Musorki_Info
{
	mID, //
Float: mPos[4], //
	mType, //
	mStatus, //
	//
Text3D: mInfo, //
	mObject
};
new MI[MAX_MUSORKI][Musorki_Info], TOTALMUSORKI;
//

// Система МедКарты
enum MedCard_Info
{
	mcID, // ID карты
	mcName[24], // Имя пациента
	mcData[32], // Дата получения
	mcStatus, // Диагноз
	mcDataClose[32] // Дата окончания мед.карты
};
new MC[MAX_PLAYERS][MedCard_Info];
//

// Экономика сервера
enum Ekonom_Info
{
    eiID, //
    eiNalogFrac, // Налог кто соберает
    eiScahtaPay, // Зарплата на шахте
	eiDriveMineralsPay, // Стоимость перевозки руды
    eiDrovosekPay, // Зарплата на лесопилке
    eiGruzPay, // Зарплата на грузчиках
    eiRadarPay // Штраф на Радаре
};
new EI[Ekonom_Info];
//

// Система наручников
enum e_CUFF_INFO
{
	pCuffer,
	pCuffee
}
new pCuff[MAX_PLAYERS][e_CUFF_INFO];
//

// Система слежения за игроком
enum specInfo
{
	SpecID, // ID за кем наблюдение
	SpecTimer, // Время наблюдения
Float: SpecPos[4], // Позиция начяло наблюдения
	SpecWorld, // Мир начяло наблюдения
	SpecInt, // Интерьер начяло наблюдения
Float: SpecHP, //
Float: SpecArmour, //
	SpecPing, //
	SpecGun, //
	SpecAmmo, //
bool: InCar, // Статус - игшрок в транспорте или нет
};
new SP[MAX_PLAYERS][specInfo];
//

// Работа Шахтера
static const stock JobMineInfo[][] = { // Информация о работе
	{"{FFCC00}Добро пожаловать на временную работу "SERVER"шахтера{FFFFFF}.\n\n"},
	{"{FFFFFF}У Вас есть два направления на данной работе.\n\n"},
	{""SERVER"1.{FFFFFF}Добыча руды\n"},
	{"{FFFFFF}Выбрав первый путь, Вы отправляетесь на глубину шахты на лифле,\n"},
	{"{FFFFFF}для добычы железной руды! Она необходима для инфроструктуры области.\n\n"},
	{""SERVER"2.{FFFFFF}Доставка руды (с 3 уровня)\n"},
	{"{FFFFFF}Выбрав второй путь, Вы берете рабочий транспорт для управления которой, нужна лицензия 'D'\n"},
	{"{FFFFFF}Едите к складу шахты и загружаетесь рудой, после загрузки отвозите ее на завод по переработке."}
};
new
	picJobMine, // Устроиться на работу
	picInfoMine, // Информация о работе
	picMineralLoadCar, //
	picLoadCarMine, // Пикап для загрузки руды в машину
	StatusLoadMineDrive[MAX_VEHICLES], // Статус загрузки транспорта
	MineralsDrive[MAX_VEHICLES], // Кол-во руды в машине
	Text3D: CarLoadMine[MAX_VEHICLES]; // Информация над машиной

#define CP_MINE_MAX		18
static const stock Float: ScahtaCP[CP_MINE_MAX][] = { // Чикпоинты добычи руды
	{2651.17358, 2044.17944, 3425.34863},
	{2642.12939, 2031.15027, 3425.18701},
	{2650.27466, 2023.17871, 3425.21875},
	{2630.11426, 2028.21790, 3425.06787},
	{2630.31763, 2018.85706, 3425.32275},
	{2638.91797, 2021.05237, 3425.23096},
	{2644.68896, 2011.65283, 3425.32471},
	{2648.07739, 2003.27917, 3425.16504},
	{2653.88452, 2013.95264, 3425.43066},
	{2645.80249, 1993.15771, 3425.41699},
	{2655.00171, 1996.99451, 3425.26074},
	{2664.64209, 2001.22437, 3425.31299},
	{2660.59546, 2007.50220, 3425.15674},
	{2635.81934, 2038.77368, 3425.29224},
	{2654.59619, 2034.33508, 3425.41626},
	{2666.05811, 2039.92249, 3425.33472},
	{2660.78101, 2025.96375, 3425.26978},
	{2664.60840, 2016.81934, 3425.22681}
};
new SahtaPosCH[CP_MINE_MAX];

#define CP_MINEDRIVE_MAX	25
static const Float: ScahtaDriveCP[CP_MINEDRIVE_MAX][6] =
{
	{1770.94629, 2240.38330, 14.85213, 1778.40161, 2224.72632, 14.81336}, // 1
	{1778.40161, 2224.72632, 14.81336, 1876.50317, 2224.66040, 14.80792}, // 2
	{1876.50317, 2224.66040, 14.80792, 1885.78296, 2313.90894, 14.93529}, // 3
	{1885.78296, 2313.90894, 14.93529, 1751.78003, 2516.08594, 14.94585}, // 4
	{1751.78003, 2516.08594, 14.94585, 2074.34937, 2942.40625, 10.89477}, // 5
	{2074.34937, 2942.40625, 10.89477, 1987.57605, 2967.51929, 11.18670}, // 6
	{1987.57605, 2967.51929, 11.18670, 1459.01233, 2967.02515, 10.96539}, // 7
	{1459.01233, 2967.02515, 10.96539, 705.80127, 2499.05884, 10.97179}, // 8
	{705.80127, 2499.05884, 10.97179, 336.88275, 1704.22998, 10.99311}, // 9
	{336.88275, 1704.22998, 10.99311, 283.88834, 1692.20520, 10.99237}, // 10
	{283.88834, 1692.20520, 10.99237, 150.47726, 1477.05505, 10.99543}, // 11
	{150.47726, 1477.05505, 10.99543, 15.15765, 893.64600, 10.98229}, // 12
	{15.15765, 893.64600, 10.98229, -361.86163, 977.96436, 10.99125}, // 13
	{-361.86163, 977.96436, 10.99125, -371.90250, 1154.92688, 10.95870}, // 14
	{-371.90250, 1154.92688, 10.95870, -504.70847, 1231.87537, 19.52687}, // 15
	{-504.70847, 1231.87537, 19.52687, -745.51703, 1433.48987, 21.27772}, // 16
	{-745.51703, 1433.48987, 21.27772, -1021.72760, 1565.43726, 31.84237}, // 17
	{-1021.72760, 1565.43726, 31.84237, -1282.13916, 1818.40491, 46.80055}, // 18
	{-1282.13916, 1818.40491, 46.80055, -1221.63354, 1849.16418, 44.84980}, // 19
	{-1221.63354, 1849.16418, 44.84980, -935.49408, 1950.13794, 44.83074}, // 20
	{-935.49408, 1950.13794, 44.83074, -923.17914, 1968.97302, 44.10622}, // 21
	{-923.17914, 1968.97302, 44.10622, -1016.83014, 2071.13794, 39.73611}, // 22
	{-1016.83014, 2071.13794, 39.73611, -1056.33240, 2157.42578, 37.01843}, // 23
	{-1056.33240, 2157.42578, 37.01843, -1116.38794, 2177.92920, 37.01470}, // 24
	{-1116.38794, 2177.92920, 37.01470, 0.0, 0.0, 0.0} // 25
};
new SahtaDrivePosCH[MAX_PLAYERS];
//


// Работа Лесоповал
#define MAX_DEREVO 50
enum Derevo_Pos_Info
{
	Float: Derevo_posX,
	Float: Derevo_posY,
	Float: Derevo_posZ,
	// Поваленное дерево
	Float: Derevo_RposX,
	Float: Derevo_RposY,
	Float: Derevo_RposZ,
	//
}
static const Float: DPI[MAX_DEREVO][Derevo_Pos_Info] =
{
	// Деревья для Работы Лесоповала
	{2259.02368, 1425.43066, 9.72870,   0.0, 0.0, 0.0},
	{2244.02368, 1425.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1425.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1440.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1455.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2229.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0}, // 10
	{2244.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2259.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2274.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2289.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2304.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2319.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2334.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2349.02368, 1515.43066, 9.72870,   0.0, 0.0, 0.0},
	{2349.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2334.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0}, // 20
	{2319.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2304.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2289.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2274.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2259.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2244.02368, 1500.43066, 9.72870,   0.0, 0.0, 0.0},
	{2244.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2244.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2244.02368, 1455.43066, 9.72870,   0.0, 0.0, 0.0},
	{2244.02368, 1440.43066, 9.72870,   0.0, 0.0, 0.0}, // 30
	{2259.02368, 1440.43066, 9.72870,   0.0, 0.0, 0.0},
	{2259.02368, 1455.43066, 9.72870,   0.0, 0.0, 0.0},
	{2259.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2259.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2274.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2289.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2304.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2319.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2334.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0},
	{2349.02368, 1485.43066, 9.72870,   0.0, 0.0, 0.0}, // 40
	{2349.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2334.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2319.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2304.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2289.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2274.02368, 1470.43066, 9.72870,   0.0, 0.0, 0.0},
	{2274.02368, 1455.43066, 9.72870,   0.0, 0.0, 0.0},
	{2274.02368, 1440.43066, 9.72870,   0.0, 0.0, 0.0},
	{2289.02368, 1440.43066, 9.72870,   0.0, 0.0, 0.0},
	{2289.02368, 1455.43066, 9.72870,   0.0, 0.0, 0.0}, // 50
	{2349.02368, 1455.43066, 9.72870,   0.0, 0.0, 0.0}
};
new picLesorubInstrument, picDerevoSklad, Derevo[MAX_DEREVO], DerevoArea[MAX_DEREVO], bool: DerevoStatus[MAX_DEREVO], DerevoTime[MAX_DEREVO],
	Text3D: DerevoInfo[MAX_DEREVO], bool: LesorubInstrument[MAX_PLAYERS]; // 341

// Название работ
#define MAX_JOB (9)
static const stock Job_Name[MAX_JOB][50] = {
	"Нет работы",
	"Водитель автобуса",
	"Таксист",
	"Механик",
	"Мусорщик",
	"Электрик",
	"Пилот",
	"Дальнобойщик",
	"Инкасатор"
};
enum
{
	JOB_NONE = 0,
	JOB_AVTOBUS = 1,
	JOB_TAXI = 2,
	JOB_MEHANIC = 3,
	JOB_MYSORHIC = 4,
	JOB_ELECTRIC = 5,
	JOB_PILOT = 6,
	JOB_DALNO = 7,
	JOB_INCASATOR = 8
};

enum job_pos_Info
{
Float: job_posX,
Float: job_posY,
Float: job_posZ,
	job_id
}
static const Float: JobPos[MAX_JOB][job_pos_Info] =
{
	{0.0, 0.0, 0.0, JOB_NONE}, // Нет работы
	{0.0, 0.0, 0.0, JOB_AVTOBUS}, // Водитель автобуса
	{0.0, 0.0, 0.0, JOB_TAXI}, // Таксист
	{2440.0806, -741.1941, 12.0896, JOB_MEHANIC}, // Механик
	{2325.8074, -1923.5989, 22.0776, JOB_MYSORHIC}, // Мусорщик
	{0.0, 0.0, 0.0, JOB_ELECTRIC}, // Электрик
	{0.0, 0.0, 0.0, JOB_PILOT}, // Пилот
	{780.3076, 752.1248, 12.9270, JOB_DALNO}, // Дальнобойщик
	{2672.0483, -1626.1482, 1002.0000, JOB_INCASATOR} // Инкасатор
};
new bool:JobDuty[MAX_PLAYERS][MAX_JOB];
//

// Навоки работ
enum JobSkill
{
    jID,
	jName[MAX_PLAYER_NAME],
	jExp[512],
	jLevel[124]
}
new JS[MAX_PLAYERS][JobSkill];


// Выбор скина при регистрации
static const stock RegSkinM[9] = { 14, 20, 21, 22, 24, 25, 102, 103, 104 };
static const stock RegSkinJ[11] = { 12, 13, 41, 56, 64, 63, 69, 75, 231, 232, 237 };
//

// Список рефералов игрока
new TotalPlayers[MAX_PLAYERS], bool: FirstOpenCMD[MAX_PLAYERS], LastPlayers[MAX_PLAYERS], TotalPlayersCount[MAX_PLAYERS];
//

// Система GPS Навигатор
new
bool: UseGPS[MAX_PLAYERS], // Статус Навигатора

	Float: markDist[MAX_PLAYERS],
	Float: markX[MAX_PLAYERS],
	Float: markY[MAX_PLAYERS],
	Float: markZ[MAX_PLAYERS],
	Float: markPlayerX[MAX_PLAYERS],
	Float: markPlayerY[MAX_PLAYERS],
	Float: markPlayerZ[MAX_PLAYERS],
	markTimer[MAX_PLAYERS],

    Text: GPS[24],
	PlayerText: GPS1[MAX_PLAYERS][3]; // GPS навигатор
//

// Система организации

#define MAX_FRAC 	 	(12)
#define MAX_RANGS 	 	(10)
enum
{
	FRAC_NONE = 0,
	FRAC_AO = 1,
	FRAC_PPS = 2,
	FRAC_DPS = 3,
	FRAC_FSB = 4,
	FRAC_VH = 5,
	FRAC_SMP = 6,
	FRAC_SMI = 7,
	FRAC_OPGY = 8,
	FRAC_OPGB = 9,
	FRAC_MAFIAR = 10,
	FRAC_MAFIAH = 11
};
enum Frac_Info
{
	fID, // ID
	fName[32], // Название
	fLeader[24], // Лидер
	fBank, // Банк
	fMembers, // Кол-во сотрудников
Float: fPosExit[4], // Место пикапа выхода
Float: fPosEnter[4], // Место пикапа входа
Float: fPosSpawn[4], // Место появления
Float: fPosSkin[3], // Место раздевалки
Float: fPosInfo[3], // Место информации
Float: fPosGun[3], // Место оружейной
Float: fPosLoadGun[3] // Место загрузки материалов
};
new FracI[MAX_FRAC][Frac_Info], TOTALFRAC,

	picFracEnter[MAX_FRAC], // Пикап входа в организацию
Text3D: infoFracEnter[MAX_FRAC], // Текст при входе в организацию (Название)

	picFracExit[MAX_FRAC], // Пикап выхода из организации
Text3D: infoFracExit[MAX_FRAC], // Текст при выходе из организации (Выход)

	picFracInfo[MAX_FRAC], // Пикап информации в ораганизации
Text3D: infoFracInfo[MAX_FRAC], // Текст информации в организации (Информация)

	picFracSkin[MAX_FRAC], // Пикап раздевалки в ораганизации
Text3D: infoFracSkin[MAX_FRAC], // Текст раздевалки в организацию (Раздевалка)

	picFracGun[MAX_FRAC], // Пикап оружия в ораганизации
Text3D: infoFracGun[MAX_FRAC], // Текст оружейной в организацию (Оружейная)

Text3D: infoLoadGun[MAX_FRAC], // Текст загрузки материалов в организации (Загрузка)

FracColor[MAX_FRAC] = // Цвета
{
	cNone, // None
	cAO, // АДМИНСИТРАЦИЯ ОБЛАСТИ
	cPPS, // ППС
	cDPS, // ДПС
	cFSB, // ФСБ
	cVH, // Вооруженные силы
	cSMP, // ОБЛАСТНАЯ БОЛЬНИЦА
	cSMI, // ТРК Редвич
	cOPGB, // ОПГ Барыги
	cOPGY, // ОПГ Южная
	cHMAFIA, // ЧЕЧЕНСКАЯ МАФИЯ
	cRMAFIA // РУССКАЯ МАФИЯ
},
FracSkinM[MAX_FRAC][MAX_RANGS] = // Скины Мужские
{
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // None
	{255, 164, 167, 228, 171, 165, 187, 57, 165, 147}, // АДМИНСИТРАЦИЯ ОБЛАСТИ
	{268, 268, 268, 266, 266, 262, 272, 288, 265, 259}, // ППС
	{281, 281, 282, 280, 170, 264, 272, 288, 265, 71}, // ДПС
	{286, 286, 286, 286, 286, 286, 286, 286, 286, 286}, // ФСБ
	{287, 298, 298, 283, 247, 179, 179, 182, 294, 294}, // Вооруженные силы
	{84, 153, 154, 250, 250, 250, 273, 274, 275, 70}, // ОБЛАСТНАЯ БОЛЬНИЦА
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // ТРК Редвич
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0} //
},
FracSkinG[MAX_FRAC][MAX_RANGS] = // Скины Женские
{
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // None
	{76, 150, 150, 216, 172, 150, 91, 148, 219, 141}, // АДМИНСИТРАЦИЯ ОБЛАСТИ
	{276, 276, 276, 276, 276, 276, 276, 276, 276, 276}, // ППС
	{58, 58, 58, 58, 58, 58, 58, 58, 58, 58}, // ДПС
	{75, 75, 75, 75, 75, 75, 75, 75, 75, 75}, // ФСБ
	{270, 270, 270, 270, 270, 270, 270, 270, 270, 270}, // Вооруженные силы
	{269, 269, 269, 269, 269, 159, 159, 159, 159, 159}, // ОБЛАСТНАЯ БОЛЬНИЦА
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // ТРК Редвич
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // ОПГ Барыги
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // ОПГ Южная
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // ЧЕЧЕНСКАЯ МАФИЯ
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0} // РУССКАЯ МАФИЯ
};

static const stock GetRangName[MAX_FRAC][MAX_RANGS][32] = // Звания
{
	{"-", "-", "-", "-", "-", "-", "-", "-", "-", "-"}, // None
  	{"Охранник", "Начальник охраны", "Адвокат", "Ревизор", "Депутат", "Прокурор", "Министр экономики", "Министр обороны", "Вице-губернатор", "Губернатор"}, // АДМИНСИТРАЦИЯ ОБЛАСТИ
  	{"Рядовой", "Сержант", "Ст. Сержант", "Мл. Лейтенант", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"}, // ППС
  	{"Рядовой", "Сержант", "Ст. Сержант", "Мл. Лейтенант", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"}, // ДПС
  	{"Внештатный сотрудник", "Младший оперативник", "Следователь-специалист", "Старший оперативник", "Инспектор безопасности", "Офицер внутренней разведки", "Начальник безопасности", "Начальник разведки", "Зам. начальника ФСБ", "Начальник ФСБ"}, // ФСБ
  	{"Рядовой", "Ефрейтор", "Сержант", "Старшина", "Прапорщик", "Старший прапорщик", "Майор", "Подполковник", "Полковник", "Генерал армии"}, // Вооруженные силы
  	{"Санитар", "Стажер", "Интерн", "Нарколог", "Доктор", "Хирург", "Психолог", "Терапевт", "Зам. Глав. Врача", "Глав. Врач"}, // ОБЛАСТНАЯ БОЛЬНИЦА
  	{"Помощник редакции", "Верстальщик новостей", "Радиотехник", "Журналист", "Старший журналист", "Корректор", "Помощник редактора", "Редактор", "Зам. директора", "Директор"}, // ТРК Редвич
  	{"Браток", "Головорез", "Чистильщик", "Шпион", "Координатор", "Ветеран", "Пахан", "Сторожила", "Аристократ", "Авторитет"}, // ОПГ Барыги
  	{"Браток", "Головорез", "Чистильщик", "Шпион", "Координатор", "Ветеран", "Пахан", "Сторожила", "Аристократ", "Авторитет"}, // ОПГ Южная
    {"Хоза", "Муса", "Юнус", "Абу", "Маджид", "Турпал", "Эмин", "Султан", "Вайнах", "Нохчо"}, // ЧЕЧЕНСКАЯ МАФИЯ
    {"Браток", "Головорез", "Чистильщик", "Шпион", "Координатор", "Ветеран", "Пахан", "Сторожила", "Аристократ", "Авторитет"} // РУССКАЯ МАФИЯ
};
new RangName[MAX_FRAC][MAX_RANGS][32];

new GetRangZP[MAX_FRAC][11] = // Зарплаты
{
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{25000, 35000, 45000, 55000, 65000, 75000, 85000, 95000, 110000, 130000}, // АДМИНСИТРАЦИЯ ОБЛАСТИ
	{20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 65000, 80000}, // ППС
	{21500, 26500, 31500, 36500, 41500, 46500, 51500, 56500, 65000, 85000}, // ДПС
	{23000, 31000, 39000, 47000, 55000, 63000, 71000, 79000, 90000, 110000}, // ФСБ
	{15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 80000, 100000},// Вооруженные силы
	{20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 65000, 80000}, // ОБЛАСТНАЯ БОЛЬНИЦА
	{15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 80000, 100000}, // ТРК Редвич
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} //
};
// new RangZP[MAX_FRAC][MAX_RANGS];
enum FracInfo
{
	fracID,
	fracLogin[24],
// Место выхода из организации
Float: fracExitPosX,
Float: fracExitPosY,
Float: fracExitPosZ,
Float: fracExitPosA,
// Место входа в организацию
Float: fracEnterPosX,
Float: fracEnterPosY,
Float: fracEnterPosZ,
Float: fracEnterPosA
//
};
static const stock FracInfos[11][FracInfo] =
{
	{1, "Администрация области", // +
		1907.3077, -2229.1611, 12.1818, 180.0,
		1317.7007, 1190.2075, 1701.4977, 180.0
	},
	{2, "Полиция (отдел ППС)", // +
		2576.1631, -2416.0161, 22.4937, -90.0,
		2589.9988, -2417.1138, 1501.9983, 90.0
	},
	{3, "Полиция (отдел ДПС)", // +
		-139.2856, 596.8620, 12.1340, 170.0,
		960.7945, 2102.0334, 1122.4573, 180.0
	},
	{4, "ФСБ", // +
		1853.0455, 2081.3279, 16.2488, 0.0,
		2096.0056, -2148.6558, 1001.9981, 180.0
	},
	{5, "ВЧ", // +
		1812.2123, 1755.9214, 15.2920, -90.0,
		652.0742, 1407.2850, 1114.7178, 180.0
	},
	{6, "Областная больница", // +
		2120.3811, -2411.4028, 22.4885, 0.0,
		2135.6711, -2396.1711, -44.8617, 180.0
	},
	{7, "ТРК Связь", // +
		2310.5684, -1911.6460, 21.9663, 90.0,
		1937.0490, 2922.2983, 1672.9279, -90.0
	},
	{8, "ОПГ Барыги", // -
		1970.1387, -2603.8447, 11.4844, 90.0,
		2097.0281, -1645.4768, 2056.6387, 0.0
	},
	{9, "ОПГ Южная", // -
		2124.2959, -1795.9281, 19.9025, 90.0,
		2097.0281, -1645.4768, 2056.6387, 0.0
	},
	{10, "Чеченская мафия", // +
		2344.6887, -2607.0259, 21.7933, -90.0,
		-1887.6213, 1412.0098, 538.5079, 0.0
	},
	{11, "Русская мафия", // -
		376.6167, 1113.0354, 12.6009, -2.5,
		508.4764, -10.9174, 1904.9498, 90.0
	}
};
new bool: FracDuty[MAX_PLAYERS][MAX_FRAC];

// Система Транспорт для организации
#define	MAX_CAR_FRAC	(200)
enum Frac_Car_Info
{
	fcID, // Индефикатор
	fcFrac, // Организация
	fcRang, // Ранг доступа к транспорту
	fcModel, // Модель
	fcInt, // Интерьер
	fcWorld, // Вирт мир
	fcPrice, // Стоимость
Float: fcPos[4], // Позиция
	fcLock, // Двери
Float: fcFuel, // Топливо
Float: fcHealth, // Состояние
	fcColor[2], // Цвет
	fcPaintJob, // Покраска
	fcSirena // Сирена на транспорт
};
new FC[MAX_VEHICLES][Frac_Car_Info], FCar[MAX_VEHICLES], TOTALCARFRAC;
//

// Система семей
#define MAX_FAMILY 250
enum FamilyInfo
{
    famID, // Номер семьи
	famName[32], // Название семьи
	famCreator[24], // Создатель семьи
	famZam[24], // Заместители создателя семьи
	famData[32], // Дата основания семьи
	famHouse, // Дом семьи
	famBank, // Кол-во денег в семье
	famInt, // Интерьер семьи
	famWorld, // Виртуальный мир семьи
Float:famSpawn[4], // Место появление членов семьи
	famMembers, // Кол-во игроков в семье
Text3D: famText, //
}
new FamI[MAX_FAMILY][FamilyInfo], TOTALFAM;
//

// Система транспорта
enum vInfo
{
	vModel, // Модель ТС
Float: vPosX, // Позиция ТС по X
Float: vPosY, // Позиция ТС по Y
Float: vPosZ, // Позиция ТС по Z
Float: vPosA, // Угол поворота ТС по A
	vColor1, // Цвет ТС - 1
	vColor2, // Цвет ТС - 2
	vSpawnTime, // Время спавна ТС
bool: vEngine, // Ствтус двигателя ТС (false = откл/true = вкл)
bool: vLights, //  Ствтус фар ТС (false = откл/true = вкл)
bool: vAlarm, // Ствтус сирены ТС (false = откл/true = вкл)
bool: vDoors, // Ствтус дверей ТС (false = открыты/true = закрыты)
bool: vBonnet, // Ствтус капота ТС (false = закрыт/true = открыт)
bool: vBoot, //  Ствтус багажника ТС (false = закрыт/true = открыт)
bool: vObjective, // Статус цели ТС (false = откл/true = вкл)
Float: vFuel,  // Тполиво в  ТС
Float: vHealth, // Состояние ТС
	vState, //
bool:vCreate, //
	vFrac, 	// Номер организации для ТС
	vFracRang, // Ранг в организации дуступа для ТС
	vSpeed, //
bool: vSpeedOn, //
	vJobs, //
	vPlayer, //
	vLimit, //
bool: vRent, //
	vRentID, //
	vRentPay, //
	vRentTime //
};
new VehicleInfo[MAX_VEHICLES][vInfo];

enum e_VEHICLE_STATS
{
	vID, // ID  транспорта
	vName[32], // Название транспорта
	Float: vMaxFuel // Максимальная кол-во топливо в транспорте
}

static const stock VehStats[][e_VEHICLE_STATS] =
{
 	// Номер ТС - Название ТС - Обхем бака ТС
	// 400
	{400, "Неизвестно",	100.0},
	{401, "Неизвестно",	100.0}, {402, "Неизвестно",	100.0}, {403, "Неизвестно",	100.0}, {404, "Неизвестно",	100.0}, {405, "Неизвестно",	100.0},
	{406, "Неизвестно",	100.0}, {407, "Неизвестно",	100.0}, {408, "Неизвестно",	100.0}, {409, "Неизвестно",	100.0}, {410, "Неизвестно",	100.0},
	// 410
	{411, "Неизвестно",	100.0}, {412, "Неизвестно",	100.0}, {413, "Неизвестно",	100.0}, {414, "Неизвестно",	100.0}, {415, "Неизвестно",	100.0},
	{416, "Неизвестно",	100.0}, {417, "Неизвестно",	100.0}, {418, "Неизвестно",	100.0}, {419, "Неизвестно",	100.0}, {420, "ВАЗ 2170",	100.0},
	// 420
	{421, "Неизвестно",	100.0}, {422, "Неизвестно",	100.0}, {423, "Неизвестно",	100.0}, {424, "Неизвестно",	100.0}, {425, "Неизвестно",	100.0},
	{426, "Неизвестно",	100.0}, {427, "Неизвестно",	100.0}, {428, "Неизвестно",	100.0}, {429, "Неизвестно",	100.0}, {430, "Неизвестно",	100.0},
	// 430
	{431, "Неизвестно",	100.0}, {432, "Неизвестно",	100.0}, {433, "Неизвестно",	100.0}, {434, "Неизвестно",	100.0}, {435, "Неизвестно",	100.0},
	{436, "Неизвестно",	100.0}, {437, "Неизвестно",	100.0}, {438, "Toyota Avensis",	100.0}, {439, "Неизвестно",	100.0}, {440, "Неизвестно",	100.0},
	// 440
	{441, "Неизвестно",	100.0}, {442, "Неизвестно",	100.0}, {443, "Неизвестно",	100.0}, {444, "Неизвестно",	100.0}, {445, "Неизвестно",	100.0},
	{446, "Неизвестно",	100.0}, {447, "Неизвестно",	100.0}, {448, "Неизвестно",	100.0}, {449, "Неизвестно",	100.0}, {450, "Неизвестно",	100.0},
	// 450
	{451, "Неизвестно",	100.0}, {452, "Неизвестно",	100.0}, {453, "Неизвестно",	100.0}, {454, "Неизвестно",	100.0}, {455, "Неизвестно",	100.0},
	{456, "Неизвестно",	100.0}, {457, "Неизвестно",	100.0}, {458, "Неизвестно",	100.0}, {459, "Неизвестно",	100.0}, {460, "Неизвестно",	100.0},
	// 460
	{461, "Неизвестно",	100.0}, {462, "Неизвестно",	100.0}, {463, "Неизвестно",	100.0}, {464, "Неизвестно",	100.0}, {465, "Неизвестно",	100.0},
	{466, "Неизвестно",	100.0}, {467, "Неизвестно",	100.0}, {468, "Неизвестно",	100.0}, {469, "Неизвестно",	100.0}, {470, "Неизвестно",	100.0},
	// 470
	{471, "Неизвестно",	100.0}, {472, "Неизвестно",	100.0}, {473, "Неизвестно",	100.0}, {474, "Неизвестно",	100.0}, {475, "Неизвестно",	100.0},
	{476, "Неизвестно",	100.0}, {477, "Неизвестно",	100.0}, {478, "Неизвестно",	100.0}, {479, "Неизвестно",	100.0}, {480, "Неизвестно",	100.0},
	// 480
	{481, "Неизвестно",	100.0}, {482, "Неизвестно",	100.0}, {483, "Неизвестно",	100.0}, {484, "Неизвестно",	100.0}, {485, "Неизвестно",	100.0},
	{486, "Неизвестно",	100.0}, {487, "Неизвестно",	100.0}, {488, "Неизвестно",	100.0}, {489, "Неизвестно",	100.0}, {490, "Неизвестно",	100.0},
	// 490
	{491, "Неизвестно",	100.0}, {492, "Неизвестно",	100.0}, {493, "Неизвестно",	100.0}, {494, "Неизвестно",	100.0}, {495, "Неизвестно",	100.0},
	{496, "Неизвестно",	100.0}, {497, "Неизвестно",	100.0}, {498, "Неизвестно",	100.0}, {499, "Неизвестно",	100.0}, {500, "Неизвестно",	100.0},
	// 500
	{501, "Неизвестно",	100.0}, {502, "Неизвестно",	100.0}, {503, "Неизвестно",	100.0}, {504, "Неизвестно",	100.0}, {505, "Неизвестно",	100.0},
	{506, "Неизвестно",	100.0}, {507, "Неизвестно",	100.0}, {508, "Неизвестно",	100.0}, {509, "Неизвестно",	100.0}, {510, "Неизвестно",	100.0},
	// 510
	{511, "Неизвестно",	100.0}, {512, "Неизвестно",	100.0}, {513, "Неизвестно",	100.0}, {514, "Неизвестно",	100.0}, {515, "Неизвестно",	100.0},
	{516, "Неизвестно",	100.0}, {517, "Неизвестно",	100.0}, {518, "Неизвестно",	100.0}, {519, "Неизвестно",	100.0}, {520, "Неизвестно",	100.0},
	// 520
	{521, "Неизвестно",	100.0}, {522, "Неизвестно",	100.0}, {523, "Неизвестно",	100.0}, {524, "Неизвестно",	100.0}, {525, "Неизвестно",	100.0},
	{526, "Неизвестно",	100.0}, {527, "Неизвестно",	100.0}, {528, "Неизвестно",	100.0}, {529, "Неизвестно",	100.0}, {530, "Неизвестно",	100.0},
	// 530
	{531, "Неизвестно",	100.0}, {532, "Неизвестно",	100.0}, {533, "Неизвестно",	100.0}, {534, "Неизвестно",	100.0}, {535, "Неизвестно",	100.0},
	{536, "Неизвестно",	100.0}, {537, "Неизвестно",	100.0}, {538, "Неизвестно",	100.0}, {539, "Неизвестно",	100.0}, {540, "Неизвестно",	100.0},
	// 540
	{541, "Неизвестно",	100.0}, {542, "Неизвестно",	100.0}, {543, "Неизвестно",	100.0}, {544, "Неизвестно",	100.0}, {545, "Неизвестно",	100.0},
	{546, "Неизвестно",	100.0}, {547, "Неизвестно",	100.0}, {548, "Неизвестно",	100.0}, {549, "Неизвестно",	100.0}, {550, "Неизвестно",	100.0},
	// 550
	{551, "Неизвестно",	100.0}, {552, "Неизвестно",	100.0}, {553, "Неизвестно",	100.0}, {554, "Неизвестно",	100.0}, {555, "Неизвестно",	100.0},
	{556, "Неизвестно",	100.0}, {557, "Неизвестно",	100.0}, {558, "Неизвестно",	100.0}, {559, "Неизвестно",	100.0}, {560, "Неизвестно",	100.0},
	// 560
	{561, "Неизвестно",	100.0}, {562, "Ferrari F40",	100.0}, {563, "Неизвестно",	100.0}, {564, "Неизвестно",	100.0}, {565, "Неизвестно",	100.0},
	{566, "Неизвестно",	100.0}, {567, "Неизвестно",	100.0}, {568, "Неизвестно",	100.0}, {569, "Неизвестно",	100.0}, {570, "Неизвестно",	100.0},
	// 570
	{571, "Неизвестно",	100.0}, {572, "Неизвестно",	100.0}, {573, "Неизвестно",	100.0}, {574, "Неизвестно",	100.0}, {575, "Неизвестно",	100.0},
	{576, "Неизвестно",	100.0}, {577, "Неизвестно",	100.0}, {578, "Неизвестно",	100.0}, {579, "Неизвестно",	100.0}, {580, "Неизвестно",	100.0},
	// 580
	{581, "Неизвестно",	100.0}, {582, "Неизвестно",	100.0}, {583, "Неизвестно",	100.0}, {584, "Неизвестно",	100.0}, {585, "Неизвестно",	100.0},
	{586, "Неизвестно",	100.0}, {587, "Bugatti Divo",	100.0}, {588, "Неизвестно",	100.0}, {589, "Неизвестно",	100.0}, {590, "Неизвестно",	100.0},
	// 590
	{591, "Неизвестно",	100.0}, {592, "Неизвестно",	100.0}, {593, "Неизвестно",	100.0}, {594, "Неизвестно",	100.0}, {595, "Неизвестно",	100.0},
	{596, "BMW M5 F90 Полиция",	100.0}, {597, "Неизвестно",	100.0}, {598, "Неизвестно",	100.0}, {599, "Неизвестно",	100.0}, {600, "Неизвестно",	100.0},
	// 600
	{601, "Неизвестно",	100.0}, {602, "Неизвестно",	100.0}, {603, "Неизвестно",	100.0}, {604, "Неизвестно",	100.0}, {605, "Неизвестно",	100.0},
	{606, "Неизвестно",	100.0}, {607, "Неизвестно",	100.0}, {608, "Неизвестно",	100.0}, {609, "Неизвестно",	100.0}, {610, "Неизвестно",	100.0},
	{611, "Неизвестно",	100.0}
};
new TimerSpeed[MAX_PLAYERS];
new PCar[MAX_VEHICLES];

new Car_Colors[256] =
{
	// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF, 0x46597AFF, 0x656A79FF, 0x5D7E8DFF,
	0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF, 0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF,
	0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF, 0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF,
	0x6D7A88FF, 0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF, 0x848988FF, 0x304F45FF,
	0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF, 0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF,
	0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF, 0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF,
	0x78222BFF, 0x0E316DFF, 0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF, 0xAFB1B1FF,
	0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF, 0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF,
	0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF, 0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF,
	0x640D1BFF, 0xA3ADC6FF, 0x695853FF, 0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	// SA-MP extended colours (0.3x)
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF, 0x84888CFF,
	0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF,
	0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF,
	0x6C3F99FF, 0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
	0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF,
	0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF,
	0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF,
	0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF,
	0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF,
	0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};
//

// Система личного транспорта
#define MAX_PLAYER_CARS 500
enum Car_Player_Info
{
	cID, //
	cOwner[24], // Влвделец
	cModel, // Модель
	cColor1, // Цвет ТС - 1
	cColor2, // Цвет ТС - 2
	cPainJob, // Покраска
	cTypePrice, // Тип оплаты
	cPrice, // Цена
Float: cPosX, // Позиция ТС по X
Float: cPosY, // Позиция ТС по Y
Float: cPosZ, // Позиция ТС по Z
Float: cPosA, // Угол поворота ТС по A
	cInt, // Интерьер
	cWorld, // Вирт. Мир
	cNumber[15], // Номерной знак транспорта
Float: cHealth, // Состояние
	cKey[24], // Ключи транспорта
	cLimit, // Лимит скорости
bool: cDoors, // Двери
	cFuelType, // Тип топлива
Float: cFuel, // Топливо
Float: cMilage, // Кол-во киллометров транспорта
	cCompanentSlot[45], // Слот для компанента
	cCompanentID[75], // Номер самого компанента
};
new CPI[MAX_PLAYER_CARS][Car_Player_Info], CarsID[MAX_VEHICLES], TOTALCARS;
//

// Система автосалона
#define MAX_CARS_AUTOSALON_1 	41
static const stock BuyCarA[MAX_CARS_AUTOSALON_1][2] = // Низкий класс (Скорость 0 - 150)
{
	{401, 0}, {409, 0}, {412, 0}, {418, 0}, {419, 0}, {424, 0}, {426, 0}, {439, 0}, {440, 0}, {442, 0},
	{459, 0}, {462, 0}, {463, 0}, {467, 0}, {468, 0}, {471, 0}, {474, 0}, {478, 0}, {491, 0}, {496, 0},
	{500, 0}, {508, 0}, {518, 0}, {521, 0}, {527, 0}, {529, 0}, {542, 0}, {545, 0}, {546, 0}, {547, 0},
	{549, 0}, {550, 0}, {555, 0}, {561, 0}, {566, 0}, {575, 0}, {576, 0}, {580, 0}, {581, 0}, {586, 0},
	{600, 0}
};

#define MAX_CARS_AUTOSALON_2 	41
static const stock BuyCarB[MAX_CARS_AUTOSALON_2][2] = // Средний класс (Скорость 0 - 200)
{
	{400, 0}, {404, 0}, {405, 0}, {410, 0}, {415, 0}, {421, 0}, {434, 0}, {554, 0}, {451, 0}, {458, 0},
	{461, 0}, {475, 0}, {477, 0}, {479, 0}, {480, 0}, {482, 0}, {485, 0}, {489, 0}, {492, 0}, {495, 0},
	{504, 0}, {505, 0}, {506, 0}, {507, 0}, {516, 0}, {526, 0}, {533, 0}, {534, 0}, {535, 0},
	{536, 0}, {540, 0}, {551, 0}, {558, 0}, {560, 0}, {565, 0}, {567, 0}, {579, 0}, {585, 0},
	{589, 0}, {602, 0}, {603, 0}
};

#define MAX_CARS_AUTOSALON_3 	13
static const stock BuyCarC[MAX_CARS_AUTOSALON_3][2] = // Высокий класс (Скорость 0 - 300)
{
	{402, 0}, {429, 0}, {436, 0}, {466, 0}, {502, 0}, {503, 0}, {522, 2500000}, {541, 0}, {543, 0}, {559, 0}, {562, 8000000}, {587, 13000000},{604, 0}
};
new SelectCarKlass[MAX_PLAYERS], KlassCarID[MAX_PLAYERS], SelectCarID[MAX_PLAYERS], SetCarColor[MAX_VEHICLES][2];
//

// Система VIP
enum PlayerVip
{
	pvName[24],
	pvData[32],
	pvDataClose[32],
	pvLevel
};
new PV[MAX_PLAYERS][PlayerVip];

// Система Промо-кода
#define MAX_PROMO (500)
enum Promo_Info
{
	prID, // ID промо
	prName[32], // Название промо
	prActive, // Кол-во активаций промо
	prLevelDown, // Минимальный уровень игрока с которого можно использовать промо
	prLevelMax, // Мксимальный уровень игрока до которого можно использовать промо
	prCreateAdmin[24], // Кто создал промо
	prCreateData[20], // Дата создания промо
	// Призы
	prPrizExp, // Приз промо - Игрововй опыт
	prPrizLevel, // Приз промо - Игровой уровень
	prPrizMoney, // Приз промо - Витры
	prPrizDonat, // Приз промо - Донат
	prPrizVip, // Приз промо - VIP статус
	prPrizCar, // Приз промо - Машина
	prPrizHouse, // Приз промо - Дом
	//
	prStatus, // Статус промо ()
};
new PrI[MAX_PROMO][Promo_Info], TOTALPROMO;

// Система посадочных мест
#define MAX_DOWNS	1500
enum Seat_Info
{
	SeatDownID,
Float: SeatDownX,
Float: SeatDownY,
Float: SeatDownZ,
Float: SeatDownA,
Text3D: SeatInfo,
};
new SeatI[MAX_DOWNS][Seat_Info], TOTALDOWNS;
//

// Система смерти
enum Death_Info
{
	DeathID, //
	DeathTime, //
bool: DeathStatus, //
Float: DeathPos[4] //
};
new DI[MAX_PLAYERS][Death_Info];
//

// Система билбордов
#define MAX_BILBORD 		(250)
enum Bilbort_Info
{
	bID, //
	bType, //
	bPrice, //
	bOwner[24], //
	bFon[8], //
	bText[90], //
Float: bPos[4], //
};
new BI[MAX_BILBORD][Bilbort_Info], TOTALBILBORD, BoldObject[MAX_BILBORD], Text3D: BildInfo[MAX_BILBORD], BilBordText[MAX_BILBORD][90];

// Система банковских карт
#define MAX_PLAYER_CARD 	(3)
enum BankPlayerCard
{
	bpcID, //
	bpcOwner[24], // Владелец карты
	bpcNumber[22], // Номер карты
	bpcData[8], // Дата окончания карты
	bpcCode, // Код безопасности карты
	bpcPinCod, // PIN код карты
	bpcMoney, //
	bpcStatus, // Статус карты
};
new BPC[MAX_PLAYER_CARD][BankPlayerCard];

//

/* ========================= [ Системы для бизнесов ] ========================= */
// Система бизнеса - Таксопарка
enum Taxopark_Info
{
	tiID, // Новер таксопарка
	tiOwner[24], // Владелец таксопарка
	tiName[32], // Название таксопарка
	tiType, // Тип продажи таксопарка
	tiPrice, // Цена продажи таксопарка
	tiNalogs, // Налоги таксопарка
	tiBank, // Банк таксопарка
Float: tiPos[4], // Место входа
Float: tiInfo[3], // Место информации таксопарка
Float: tiMenu[3], // Меню управления таксопарка
	tiMembers, // Кол-во работников таксопарка
	//
	tiPickup[3] // Пикап Таксопарка
};
new TI[Taxopark_Info];

#define MAX_CARS_TAXI	50
enum TaxoparkCar_Info
{
	tcID, //
	tcKlass, //
	tcModel, //
	tcColor[2], //
Float: tcPos[4], //
	tcInt, //
	tcWorld, //
	tcLock, //
Float: tcHealth, //
Float: tcFuel, //
Float: tcMilige //
};
new TC[MAX_CARS_TAXI][TaxoparkCar_Info], TOTALCARTAXI, CarTaxi[MAX_VEHICLES], Text3D:CarTaxiInfo[MAX_VEHICLES];
//

// Система подарков
#define MAX_PODARKI	30
enum Server_Podarok
{
	podID, //
	podPic, //
	podStatus, //
Float: podPosX, //
Float: podPosY, //
Float: podPosZ, //
	podWorld, //
	podInt, //
};
new Podarok[MAX_PODARKI][Server_Podarok], TOTALPODARKI, picPodarok[MAX_PODARKI];

enum Server_Podarki
{
	spID, //
	spName[24], //
	spCount, //
	spStatus[64], //
};
new SerP[MAX_PLAYERS][Server_Podarki];
//

/* ============================================================================ */

/* =========================== [ Начяло пабликов ] ============================ */
public OnGameModeInit()
{
	getdate(year_s, month_s, day_s); // Узнаем дату
	gettime(hour_s, minute_s, second_s); // Узнаем время
	SetWorldTime(hour_s); // Задаем время на сервере

	LoadMapping(); // Загрузка объектов

	// ShowNameTags(1); // Функция устанавливает видимость ников
	DisableInteriorEnterExits(); // Отключение всех стандартныых пикапов
	EnableStuntBonusForAll(0); // Отключение бонусы за прыжки и трюки
	// SetNameTagDrawDistance(20.0); // Отображение имени игрока в радиусе
	SetGravity(0.008); // Стандартная гравитация сервера
	ShowPlayerMarkers(1); // Показать маркеры игроков на сервере
	LimitPlayerMarkerRadius(100.0); // Отображение маркера игрока на мини-карте в радиусе
	ManualVehicleEngineAndLights(); // Отключение автозаводка транспорта

	// Подключение к базе данных
	LoadMySQLSettings(); // Загрузка с базой данных MySQL

	LoadTextDraw(); //
	CreateGreenZones(); // Зеленная зона

	mysql = mysql_connect(MySQLSettings[mysql_Host], MySQLSettings[mysql_Name], MySQLSettings[mysql_Pass], MySQLSettings[mysql_Baza]);
	mysql_log(WARNING | ERROR);// mysql_log(WARNING | ERROR);

	if(mysql_errno(mysql) != 0)
    {
    	printf("\nСервер не подключён к базе данных: %s", MySQLSettings[mysql_Baza]);
    	print("Запустите сервер с хостинга или с виртуальной машины!\n");
		SendRconCommand("exit");
    }
    else
	{
		printf("--- Соединение c MySQL базой данных [ %s ] подключено ---", MySQLSettings[mysql_Baza]);
		// Данные ниже не удолять!!!
		mysql_set_charset("cp1251");
		mysql_tquery(mysql, "SET CHARACTER SET 'utf8'", "", "");
		mysql_tquery(mysql, "SET NAMES 'utf8'", "", "");
		mysql_tquery(mysql, "SET character_set_client = 'cp1251'", "", "");
		mysql_tquery(mysql, "SET character_set_connection = 'cp1251'", "", "");
		mysql_tquery(mysql, "SET character_set_results = 'cp1251'", "", "");
		mysql_tquery(mysql, "SET SESSION collation_connection = 'utf8_general_ci'", "", "");
		//

        mysql_tquery(mysql, "SELECT * FROM "T_SERVER"", "LoadSettingServer", ""); // Настройки сервера
		mysql_tquery(mysql, "SELECT * FROM "T_EKONOM"", "LoadEkonomika", ""); // Загрузка экономики
		mysql_tquery(mysql, "SELECT * FROM "T_FRAC"", "LoadFrac", ""); // Загрузка организаций
		mysql_tquery(mysql, "SELECT * FROM "T_SEAT"", "LoadSeatDowns", ""); //
		mysql_tquery(mysql, "SELECT * FROM "T_CARFRAC"", "LoadCarFrac", ""); // Транспорт организаций сервера
        mysql_tquery(mysql, "SELECT * FROM "T_RADAR"", "LoadRadar", ""); // Загрука Радаров
		mysql_tquery(mysql, "SELECT * FROM "T_ATM"", "LoadATM", ""); // Загрука банкоматов
        mysql_tquery(mysql, "SELECT * FROM "T_MUSORKI"", "LoadMusorki", ""); // Загрука
		mysql_tquery(mysql, "SELECT * FROM "T_FAMILY"", "LoadFamily", ""); // Загрузка семьи
        mysql_tquery(mysql, "SELECT * FROM "T_CARS"", "LoadCars", ""); // Загрука
		mysql_tquery(mysql, "SELECT * FROM "T_BILBORD"", "LoadBilbord", ""); // Система билбордов
		mysql_tquery(mysql, "SELECT * FROM "T_PODARKI"", "LoadPodarki", ""); //

		// Бизнесы
		mysql_tquery(mysql, "SELECT * FROM "T_TAXOPARK"", "LoadTaxopark", ""); // Система бизнеса - Таксопарка
		mysql_tquery(mysql, "SELECT * FROM "T_TAXOPARK_CARS"", "LoadCarTaxopark", ""); // Система бизнеса - Таксопарка
	}
	//
	// LoadSettingsAntiCheat(); //

	AddPlayerClass(105, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);

	// --------------------------- [ Зоны ] ------------------------- //

    /* ------------------------- [ Pickup ] ------------------------- */
	/* ------------------------- [ DynamicPickup ] ------------------------- */

	/* ------------------------- [ 3DTExt ] ------------------------- */
	CreateDynamic3DTextLabel(""SERVER"Квесты\n", -1, 1783.7791, 1336.8544, 9.8401+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

	CreateDynamic3DTextLabel(""SERVER"Пасспортный стол", -1, 2436.5420, -1903.8353, 22.0043+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

	CreateDynamic3DTextLabel(""SERVER"Аренда велосипеда", -1, 1777.6812, 1328.2765, 9.8410+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	CreateDynamic3DTextLabel(""SERVER"Аренда велосипеда", -1, 2518.0952, -2129.4563, 21.9999+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

	CreateDynamic3DTextLabel("Банк "SERVER"г.Южный", cWHITE, 2376.6113, -2139.1450, 22.0871+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	CreateDynamic3DTextLabel("Банк "SERVER"пгт.Батырево", cWHITE, 1835.8016, 2037.7628, 16.9839+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	// CreateDynamic3DTextLabel("Банк "SERVER"г.Арзамас", cWHITE, 445.3078,594.6646,12.9819+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	CreateDynamic3DTextLabel("Меню банка\n{afafaf}Нажмите: ALT", cSERVER, 2672.4060, -1618.8480, 1001.9987+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1); // - Пикап банка №1
    CreateDynamic3DTextLabel("Меню банка\n{afafaf}Нажмите: ALT", cSERVER, 2668.7700, -1618.8480, 1001.9987+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1); // - Пикап банка №2
	CreateDynamic3DTextLabel("Выход из банка", cWHITE, 67.6758, 1228.7297, 2002.6489+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);

	// Работа Шахтера
	CreateDynamic3DTextLabel(""SERVER"Шахта", cSERVER, 1796.7524, 2291.8381, 15.7158+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	CreateDynamic3DTextLabel("Выход на поверхность", cSERVER, 2640.9407, 1774.9249, 3425.9968+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 5);

	SkladScahtaInfo[0] = CreateDynamic3DTextLabel("_", cWHITE, 2640.5842, 1769.0028, 3426.0000+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 5); // Склад на шахте
	SkladScahtaInfo[1] = CreateDynamic3DTextLabel("_", cWHITE, 1763.9707, 2309.8157, 14.7705+5.80, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); // Склад шахты для Дально

	CreateDynamic3DTextLabel("Информация о работе", cSERVER, 1761.5251, 2248.1284, 16.1055+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	CreateDynamic3DTextLabel("Устроиться на подработку", cSERVER, 1763.1213, 2245.7720, 16.1041+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);
	// CreateDynamic3DTextLabel("Кнопка лифта\n"SERVER"'ALT'", -1, 2640.9312, 1772.9550, 3502.0022+0.80, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5); // Кнопка лифта сверху
	// CreateDynamic3DTextLabel("Спуск лифта\n"SERVER"'ALT'", -1, 2643.8679, 1775.0392, 3502.0911+0.80, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5); // Активация лифта для спуска в шахту
	// CreateDynamic3DTextLabel("Кнопка лифта\n"SERVER"'ALT'", -1, 2640.9319, 1776.8918, 3426.0000+0.80, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5); // Кнопка лифта снизу
	CreateDynamic3DTextLabel("Загрузить руду", cSERVER, 1763.6294, 2309.2314, 16.2881+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

	// Работа Лесоповал
	CreateDynamic3DTextLabel("Устроиться на подработку", cSERVER, 2285.0969, 1417.9937, 11.4515+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

	// Организации
	// АО
	CreateDynamic3DTextLabel("Создать семью", cSERVER, 1337.8157, 1173.2733, 1701.5000+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_AO);
	CreateDynamic3DTextLabel("Налоги", cSERVER, 1313.4730, 1177.7131, 1701.5000+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_AO);

	// ДПС
	CreateDynamic3DTextLabel("Выезд из гаража №1\n{afafaf}Посигнальте - (H)", cSERVER, 134.5858, 1219.9335, 1001.2744+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_DPS); //
	CreateDynamic3DTextLabel("Выезд из гаража №2\n{afafaf}Посигнальте - (H)", cSERVER, 134.5858, 1249.9485, 1001.2744+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_DPS); //
	CreateDynamic3DTextLabel("Въезд в гараж\n{afafaf}Посигнальте - (H)", cSERVER, 195.6048, 1212.6367, 12.2506+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	//
	CreateDynamic3DTextLabel("Гараж", cSERVER, 199.4923, 1208.4171, 12.0086+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Покинуть гараж", cSERVER, 134.0819, 1226.7104, 1000.9961+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_DPS); //
	//
	// Армия
	CreateDynamic3DTextLabel("Выезд из гаража №1\n{afafaf}Посигнальте - (H)", cSERVER, 1790.6467, 1724.8378, 1001.2410+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_VH); //
	CreateDynamic3DTextLabel("Выезд из гаража №2\n{afafaf}Посигнальте - (H)", cSERVER, 1760.6467, 1724.8378, 1001.2410+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_VH); //
	CreateDynamic3DTextLabel("Въезд в гараж\n{afafaf}Посигнальте - (H)", cSERVER, 1772.6388, 1772.2600, 15.5218+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	// Смотровые башни
	CreateDynamic3DTextLabel("Смотровая башня №1\n{afafaf}Нажмите: ALT", cSERVER, 1805.3136, 1672.7437, 15.2794+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Смотровая башня №2\n{afafaf}Нажмите: ALT", cSERVER, 1770.8008, 1672.7437, 15.2794+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Смотровая башня №3\n{afafaf}Нажмите: ALT", cSERVER, 1728.4258, 1672.7437, 15.2794+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Смотровая башня №4\n{afafaf}Нажмите: ALT", cSERVER, 1693.7202, 1672.7437, 15.2794+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	//
	CreateDynamic3DTextLabel("Спуститься\n{afafaf}Нажмите: ALT", cSERVER, 1805.2692, 1673.6272, 25.4878+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Спуститься\n{afafaf}Нажмите: ALT", cSERVER, 1770.8403, 1673.6970, 25.4878+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Спуститься\n{afafaf}Нажмите: ALT", cSERVER, 1728.4008, 1673.8573, 25.4878+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Спуститься\n{afafaf}Нажмите: ALT", cSERVER, 1693.6285, 1673.7800, 25.4878+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	//
	CreateDynamic3DTextLabel("Дверь\n{afafaf}Нажмите: ALT", cSERVER, 1893.9666, 1708.5333, 16.0320+1.80, 0.80, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Дверь\n{afafaf}Нажмите: ALT", cSERVER, 1664.6739, 1700.4512, 15.6065+1.80, 0.80, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	//
	CreateDynamic3DTextLabel("Гараж", cSERVER, 1776.0192, 1776.4256, 15.3179+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Покинуть гараж", cSERVER, 1783.6821, 1719.5815, 1000.9951+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_VH); //
	//

	// ФСБ
	CreateDynamic3DTextLabel("Выезд из гаража №1\n{afafaf}Посигнальте - (H)", cSERVER, 1820.6249, 2066.3628, 1501.2100+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_FSB); //
	CreateDynamic3DTextLabel("Выезд из гаража №2\n{afafaf}Посигнальте - (H)", cSERVER, 1790.1249, 2066.3628, 1501.2100+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_FSB); //
	CreateDynamic3DTextLabel("Въезд в гараж\n{afafaf}Посигнальте - (H)", cSERVER, 1797.9634, 2080.5791, 16.0295+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	//
	CreateDynamic3DTextLabel("Гараж", cSERVER, 1794.6970, 2075.5935, 15.8505+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0); //
	CreateDynamic3DTextLabel("Покинуть гараж", cSERVER, 1805.5807, 2101.7234, 15001+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FRAC_FSB); //
	//


	// Работа
	for(i,sizeof(JobPos))
	{
		new string[64];
		if(JobPos[i][job_posX] == 0 && JobPos[i][job_posY] == 0) continue;

		CreateDynamicPic(1275, 23, JobPos[i][job_posX], JobPos[i][job_posY], JobPos[i][job_posZ], -1);
		string_f("Раздевалка [%s]\n\n{BBBBBB}Нажмите: Alt", Job_Name[i]);
		CreateDynamic3DTextLabel(string, cSERVER, JobPos[i][job_posX], JobPos[i][job_posY], JobPos[i][job_posZ]+0.80, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	}
	//

	// Работа Лесоповал
	for(d,sizeof(DPI))
	{
		// DPI
		if(DPI[d][Derevo_posX] == 0 && DPI[d][Derevo_posY] == 0 && DPI[d][Derevo_posZ] == 0) continue;

		Derevo[d] = CreateDynamicObject(620, DPI[d][Derevo_posX], DPI[d][Derevo_posY], DPI[d][Derevo_posZ], DPI[d][Derevo_RposX], DPI[d][Derevo_RposY], DPI[d][Derevo_RposZ], 0, 0, -1, 300.0, 300.0);
		DerevoInfo[d] = CreateDynamic3DTextLabel(" ", -1, DPI[d][Derevo_posX], DPI[d][Derevo_posY], DPI[d][Derevo_posZ]+2.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		DerevoArea[d] = CreateDynamicSphere(DPI[d][Derevo_posX], DPI[d][Derevo_posY], DPI[d][Derevo_posZ], 2.0);
		CreateDynamic3DTextLabel("Инструмент", cSERVER, 2313.7346, 1450.7186, 11.3506+1.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		CreateDynamic3DTextLabel("Положить на склад", cSERVER, 2339.5571, 1455.8431, 11.4537+2.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

		KillTimer(DerevoTime[d]);
		DerevoStatus[d] = false;
	}
	//

	/* ------------------------- [ Транспорт ] ------------------------- */
	// for(new v; v < MAX_VEHICLES; v ++) Необходимо вставлять после всего созданных Вами транспорта
	new vehicle;
 	for(vehicle = 1; vehicle <= carMechanic[7]; vehicle++)
	{
	    if(!IsValidVehicle(vehicle)) continue;

	    SetVehicleParamsEx(vehicle, false, false, false, false, false, false, false);

		VehicleInfo[vehicle][vFuel] = VehStats[GetVehicleModel(vehicle)-400][vMaxFuel];

	    KillTimer(UpdateFuel[vehicle]);
	    if(IsAVelik(vehicle)) SetEngine(vehicle, true);

		SetVehicleNumberPlate(vehicle, "Redwich Games");

		// Работа Шахтера
		StatusLoadMineDrive[vehicle] = false; // Статус загрузки транспорта
		MineralsDrive[vehicle] = 0; // Кол-во руды в машине
		//
	}
	printf("\n-> Количество обычного транспорта на сервере: %d\n", vehicle);
	//

	// -------------------- [ Таймеры ] -------------------- //
	SetTimer("SecondUpdate", 1*1000, false); //
	SetTimer("HospitalTimer", 15*1000, false); //
	return 1;
}

stock LoadMapping() // Загрузка объектов - CreateDynamicObject
{
	new newobjectid, tmpobjid;
	#include "../include/Map/Map_List.inc"
	#include "../include/Int/Int_List.inc"
	#include "../include/StaticObject.inc" // Загрузка объектов - (Двери, Ворота, Шлакбаумы и т.д.)
	#include "../include/Vehicle.inc" // Загрузка транспорта
}
/*
OnGameModeExit -
	Данный паблик отвечает за все действия которые происходят при завершении работы мода, например выгрузка данных,
	или же одно из самых важных действий - удаление таймеров.
*/
public OnGameModeExit()
{
    SaveAllServer();
	mysql_close();
	return 1;
}

/*
OnPlayerRequestClass -
	Данный паблик вызывается при выборе игроком скина, сюда же вы вставляете красивый полет камеры,
	использование инты для выбора скина и прочие функции которые вы возможно видел на других серверах при этом действии.
*/
public OnPlayerRequestClass(playerid, classid)
{
	return 1;
}

// Голосовой чат
public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid) // Нажатая кнопка
{
	if(keyid == SV_KEY_Z && sv_player[playerid]) // Локальный
	{
		SvAttachSpeakerToStream(sv_player[playerid], playerid);
	}
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
	if(keyid == SV_KEY_Z && sv_player[playerid]) // Локальный чат
	{
		SvDetachSpeakerFromStream(sv_player[playerid], playerid);
	}
}
//

/*
OnPlayerConnect -
	Этот паблик вызывается когда игрок подключается к серверу, в него можно вставить все загрузку данных об игроке и прочее.
*/
public OnPlayerConnect(playerid)
{
	LoadRempveMaping(playerid);
    LoadPlayerTextDraw(playerid);

    // Голосовой чат
	if(SvGetVersion(playerid) == SV_NULL) SEM(playerid, "Не удалось обнаружить плагин sampvoice!");
	if(SvHasMicro(playerid) == SV_FALSE) SEM(playerid, "Не удалось обнаружить микрофон!");
	if(SvGetVersion(playerid) != SV_NULL && SvHasMicro(playerid) != SV_FALSE)
	{
		if((sv_player[playerid] = SvCreateDLStreamAtPlayer(20.0, SV_INFINITY, playerid)) != SV_NULL)
		{ // 20.0 - Дистанция на котором слышно локальный чат
			SvAddKey(playerid, SV_KEY_Z);
		}
	}
	//

	RemoveServer(playerid);
    RemovePlayer(playerid);

	FixAnimacion(playerid); // Синхранизация анимации

	PlayAudioStreamForPlayer(playerid, "https://redwich-rp.ru/redwich_music/fon.mp3");

    new ip[16], string[144];
	GetPlayerIp(playerid, ip, sizeof(ip));
	string_f("SELECT * FROM "T_BAN_IP" WHERE `biIP` = '%s'", ip);
	mysql_tquery(mysql, string, "CheckPlayerAccBanIP", "i", playerid); //

	GetPlayerName(playerid, GetName(playerid), 24);
	foreach(new i: Player)
	{
		if(AdminLogin[i] && AI[i][aSetting][3])
		{
			new ipText[16];
			if(AI[playerid][aSetting][8]) ipText = ""GREY"Скрыт";
			else format(ipText, 16, "%s", ip);
			
			new stringVhod[256];
			format(stringVhod, 256, "[>>>] {FFFFFF}Игрок %s [ID: %i] присоединяется на сервер. [IP: %s]", GetName(playerid), playerid, ipText);
			SCMAdmin(cGREEN, stringVhod);
		}
	}

 	return 1;
}

stock LoadRempveMaping(playerid)
{
	#include "../Include/RemoveMap.inc"
}

/*
OnPlayerDisconnect -
	Вызывается когда игрок покидает сервер, сюда можно прописать сохранение аккаунта, координат игрока и прочую информацию.
*/
public OnPlayerDisconnect(playerid, reason)
{
	if(!PlayerLogin[playerid]) return 1;
	{
		// Голосовой чат
		if(sv_player[playerid] != SV_NULL)
		{
			SvDeleteStream(sv_player[playerid]);
			SvRemoveKey(playerid, sv_player[playerid]);
			sv_player[playerid] = SV_NULL;
		}
		//

		foreach(new i: Player)
	    {
		    if(AdminLogin[i] && AI[i][aSetting][4])
		    {
		        new string[256];
          		string_f("[<<<] {FFFFFF}Игрок %s [ID: %i] покинул(-а) сервер. [Причина: %s]", GetName(playerid), playerid, (!reason)?("Краш (Обрыв связи)"):(reason==1)?("Выход"):("Kick/Warn/Ban"));
                SCMAdmin(cWAR, string);
			}
	    }

		// GPS
		if(UseGPS[playerid])
		{
	    	DisablePlayerRaceCheckpoint(playerid);
	    	UseGPS[playerid] = false;
	    	for(new i; i < 24; i++) TextDrawHideForPlayer(playerid, GPS[i]);
	    	for(new i; i < 3; i++) PlayerTextDrawHide(playerid, GPS1[playerid][i]);
			GPS1[playerid][2] = PlayerText:INVALID_TEXT_DRAW;
			KillTimer(markTimer[playerid]);
		}
		//

		if(GetPVarInt(playerid, "ServerGMX") != 0)
  		{
		    for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
			SCMAll(cWAR, "===================================================================================");
			SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! Технический РЕСТАРТ сервера отменен!");
			SCMAll(cWAR, "===================================================================================");
			DeletePVar(playerid, "ServerGMX");
		}

		// Наручники
	   	if(pCuff[playerid][pCuffee] != INVALID_PLAYER_ID || TazerTime[playerid] > 0)
		{
			new cuffer = pCuff[playerid][pCuffer];

			PI[playerid][Jail] = 1;
			PI[playerid][JailTime] = ((PI[playerid][Wanted]*10)*60);
			PI[playerid][Spawn] = 7;
			if(PI[playerid][Zakon] > 1) PI[playerid][Zakon] --;
			new string[200];
			string_f("UPDATE "T_PLAYER" SET jail = %i, spawn = %i, jailtime = %i, zakon = %i WHERE ID = %i", PI[playerid][Jail], PI[playerid][Spawn], PI[playerid][JailTime], PI[playerid][Zakon], PI[playerid][ID]);
			mysql_query(mysql, string);
			pCuff[cuffer][pCuffer] =
			pCuff[cuffer][pCuffee] =
			pCuff[playerid][pCuffee] =
			pCuff[playerid][pCuffer] = INVALID_PLAYER_ID;
			new strings[200];
			format(strings, 200, "Игрок %s вышел(-а) при аресте и был(-а) отправлен(-а) в деморган.", GetName(playerid));
			SCMAll(cRED, strings);
		}

		// Система слежения за игроком
		foreach(new i : Player)
		{
			if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && SP[i][SpecID] == playerid)
			{
				GameTextForPlayer(i, "~r~Игрок покинул(-а) сервер", 3000, 3);
				callcmd::specoff(i);
			}
		}

		CheckOnline(playerid, false);

		SaveAccServer(playerid);
		SavePlayer(playerid);

		switch(getDayEx())
		{
			case 0: update_str_mysql("`server_online`", "oDay_6", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
			case 1: update_str_mysql("`server_online`", "oDay_7", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
			case 2: update_str_mysql("`server_online`", "oDay_1", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
			case 3: update_str_mysql("`server_online`", "oDay_2", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
			case 4: update_str_mysql("`server_online`", "oDay_3", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
			case 5: update_str_mysql("`server_online`", "oDay_4", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
			case 6: update_str_mysql("`server_online`", "oDay_5", AcI[playerid][acTimeGameServer], "oName", GetName(playerid));
		}

	    RemoveServer(playerid);
	    RemovePlayer(playerid);
	}
	return 1;
}

/*
OnPlayerSpawn -
	Данный паблик отвечает за действия с игроком во время его спавна, например можно указать где заспавниться игрок, вывести ему сообщение,
	прогрузить ТекстДрав, надеть объекты и так далее.
*/
public OnPlayerSpawn(playerid)
{
    if(!PlayerLogin[playerid])
	{
		SEM(playerid, "Для игры на сервере Вы должны авторизоваться!");
		return Tkick(playerid);
	}
	else
    {
		PlayerAFK[playerid] = 0;

		SetPlayerHealth(playerid, PI[playerid][Health]);
		SetPlayerWantedLevel(playerid, PI[playerid][Wanted]);

		if(DI[playerid][DeathStatus] == true)
		{
			PI[playerid][Health] = 20.0;
			SetPlayerHealth(playerid, PI[playerid][Health]);
			SetPlayerPos(playerid, DI[playerid][DeathPos][0], DI[playerid][DeathPos][1], DI[playerid][DeathPos][2]);
			SetPlayerFacingAngle(playerid, DI[playerid][DeathPos][3]);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Animation(DI[playerid][DeathID], "SWAT", "GNSTWALL_INJURD", 4.0, 1, 1, 1, 1, 0, 1);
			SCM(playerid, -1, "Вы были тяжело ранены, ожидайте скорую помощь!");
			DI[playerid][DeathTime] = 2*60;
			return 1;
		}

		// Система слежения за игроком
		if(SP[playerid][SpecID] != INVALID_PLAYER_ID)
		{
			SetPlayerPos(playerid, SP[playerid][SpecPos][0], SP[playerid][SpecPos][1], SP[playerid][SpecPos][2]);
			SetPlayerFacingAngle(playerid, SP[playerid][SpecPos][3]);
			SetPlayerVirtualWorld(playerid, SP[playerid][SpecWorld]);
			SetPlayerInterior(playerid, SP[playerid][SpecInt]);
			SP[playerid][SpecID] = INVALID_PLAYER_ID;
			return 1;
		}

		//
		if(GetFrac(playerid))
		{
		    if(GetFrac(playerid) == FRAC_VH)
			{
			    FracDuty[playerid][GetFrac(playerid)] = true;
				SetPlayerSkin(playerid, GetFracSkin(playerid));
				SetPlayerColor(playerid, FracColor[GetFrac(playerid)]);
			}
			else
			{
			    if(FracDuty[playerid][GetFrac(playerid)])
				{
					SetPlayerSkin(playerid, GetFracSkin(playerid));
					SetPlayerColor(playerid, FracColor[GetFrac(playerid)]);
				}
			    else
				{
					SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);
				}
			}
		}
		if(JobMine[playerid]) // Работа на подземной шахте
		{
			if(PI[playerid][Sex]==1) SetPlayerSkin(playerid, 16);
			else SetPlayerSkin(playerid, 151);
		}
		if(JobMineDrive[playerid]) // Работа на перевозку руды
		{
			if(PI[playerid][Sex]==1) SetPlayerSkin(playerid, 260);
			else SetPlayerSkin(playerid, 151);
		}
		if(JobLesorub[playerid]) // Работа на Лесорубах
		{
			if(PI[playerid][Sex]==1) SetPlayerSkin(playerid, 260);
			else SetPlayerSkin(playerid, 151);
		}
		else SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);

		if(PlayerDied[playerid] == true)
		{
			PI[playerid][Health] = 20;
			SetPlayerHealth(playerid, PI[playerid][Health]);
	  	    if(PI[playerid][Spawn] < 5)
	  	    {
				switch(random(2))
				{
				    case 0:
					{
				        FreezePlayer(playerid, 4000);
						SetPlayerPos(playerid, 2125.5981, -2448.6045, -40.1024);
						SetPlayerFacingAngle(playerid, 0.0);
						SetCameraBehindPlayer(playerid);
					}
				    case 1:
					{
				        FreezePlayer(playerid, 4000);
						SetPlayerPos(playerid, 2121.2791, -2422.7034, -40.1029);
						SetPlayerFacingAngle(playerid, -90.0);
						SetCameraBehindPlayer(playerid);
					}
				}
				SetPlayerVirtualWorld(playerid, FRAC_SMP);
				SetPlayerInterior(playerid, FRAC_SMP);
				SCM(playerid, cWHITE, "Вы получили серьезную травму и потеряли сознание. Сейчас Вы в больнице");
				HospitalHealth(playerid);
				return 1;
	        }
		}

		switch(PI[playerid][Spawn])
		{
			case 1: // Вокзал
		    {
		        SetPlayerPos(playerid, 1789.7292, 1351.3806, 9.9866);
				SetPlayerFacingAngle(playerid, 90.0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 2500);
			}
			case 2: // Дом
			{
				return 1;
			}
			case 3: // Организация
			{
		        SetPlayerPos(playerid, FracI[GetFrac(playerid)][fPosSpawn][0], FracI[GetFrac(playerid)][fPosSpawn][1], FracI[GetFrac(playerid)][fPosSpawn][2]);
				SetPlayerFacingAngle(playerid, FracI[GetFrac(playerid)][fPosSpawn][3]);
				SetPlayerVirtualWorld(playerid, FracI[GetFrac(playerid)][fID]);
				SetPlayerInterior(playerid, FracI[GetFrac(playerid)][fID]);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 2500);
			}
			case 4: // Где вышел
			{
		        SetPlayerPos(playerid, PI[playerid][Pos][0], PI[playerid][Pos][1], PI[playerid][Pos][2]);
				SetPlayerFacingAngle(playerid, PI[playerid][Pos][3]);
				SetPlayerVirtualWorld(playerid, PI[playerid][World]);
				SetPlayerInterior(playerid, PI[playerid][Int]);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 2500);
			}
			case 5: // КПЗ
			{
				switch(random(4))
				{
					case 0: // КПЗ Камера №1
					{
						SetPlayerPos(playerid, 2570.3247, -2431.3809, 1502.0000);
						SetPlayerFacingAngle(playerid, 180.0);
					}
					case 1: // КПЗ Камера №2
					{
						SetPlayerPos(playerid, 2573.5278, -2431.5298, 1502.0000);
						SetPlayerFacingAngle(playerid, 180.0);
					}
					case 2: // КПЗ Камера №3
					{
						SetPlayerPos(playerid, 2573.5986, -2440.9128, 1502.0000);
						SetPlayerFacingAngle(playerid, 0.0);
					}
					case 3: // КПЗ Камера №4
					{
						SetPlayerPos(playerid, 2570.2498, -2440.7590, 1502.0000);
						SetPlayerFacingAngle(playerid, 0.0);
					}
				}
				SetPlayerInterior(playerid, FRAC_PPS);
				SetPlayerVirtualWorld(playerid, FRAC_PPS);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 2500);
			}
			case 6: // ТСР
			{
			    switch(random(12))
			    {
					case 0: SetPlayerPos(playerid, -1825.1519, -2873.7446, 14.2163); // - Камера тюрьмы №1.
					case 1: SetPlayerPos(playerid, -1823.8635, -2870.2471, 14.2163); // - Камера тюрьмы №2.
					case 2: SetPlayerPos(playerid, -1821.8955, -2866.1289, 14.2163); // - Камера тюрьмы №3.
					case 3: SetPlayerPos(playerid, -1819.9486, -2862.7932, 14.2163); // - Камера тюрьмы №4.
					case 4: SetPlayerPos(playerid, -1818.0026, -2859.0051, 14.2163); // - Камера тюрьмы №5.
					case 5: SetPlayerPos(playerid, -1816.3497, -2855.3398, 14.2163); // - Камера тюрьмы №6.
					case 6: SetPlayerPos(playerid, -1814.0204, -2851.2615, 14.2163); // - Камера тюрьмы №7.
					case 7: SetPlayerPos(playerid, -1812.5273, -2847.7781, 14.2163); // - Камера тюрьмы №8.
					case 8: SetPlayerPos(playerid, -1810.0906, -2844.0112, 14.2163); // - Камера тюрьмы №9.
					case 9: SetPlayerPos(playerid, -1808.5127, -2840.6455, 14.2163); // - Камера тюрьмы №10.
					case 10: SetPlayerPos(playerid, -1806.3141, -2836.6321, 14.2163); // - Камера тюрьмы №11.
					case 11: SetPlayerPos(playerid, -1804.7239, -2833.0347, 14.2163); // - Камера тюрьмы №12.
				}
				SetPlayerFacingAngle(playerid, 240.0);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 2500);
			}
			case 7: // Деморган
			{
				SetPlayerPos(playerid, -1765.7535, -2869.1062, 1031.4701);
				SetPlayerFacingAngle(playerid, 0.0);
				SetPlayerInterior(playerid, playerid+2);
				SetPlayerVirtualWorld(playerid, 1);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 2500);
				return 1;
			}
  		}
	}
    return 1;
}



/*
OnPlayerDeath -
	Паблик вызывается когда погибает игрок, в него можно вставить например чтобы убийца получал какой-либо бонус,
	полиция получала сообщение или же данные выводились в лог администрации. А так же можно добавить объекты на месте смерти. Все ограничения в вашем воображении.
*/
public OnPlayerDeath(playerid, killerid, reason)
{
	if(!PlayerLogin[playerid]) return 1;
	{
		PlayerAFK[playerid] = -2;

		if(!DI[playerid][DeathStatus])
		{
			new Float: deathPos[4];
			GetPlayerPos(playerid, deathPos[0], deathPos[1], deathPos[2]);
			GetPlayerFacingAngle(playerid, deathPos[3]);

			DI[playerid][DeathStatus] = true;
			DI[playerid][DeathID] = playerid;
			DI[playerid][DeathPos][0] = deathPos[0];
			DI[playerid][DeathPos][1] = deathPos[1];
			DI[playerid][DeathPos][2] = deathPos[2];
			DI[playerid][DeathPos][3] = deathPos[3];
		}
		else
		{
			if(!PlayerDied[playerid]) PlayerDied[playerid] = true;

			DI[playerid][DeathStatus] = false;
			DI[playerid][DeathID] = -1;
			DI[playerid][DeathTime] = 0;
			DI[playerid][DeathPos][0] = 0.0;
			DI[playerid][DeathPos][1] = 0.0;
			DI[playerid][DeathPos][2] = 0.0;
			DI[playerid][DeathPos][3] = 0.0;
		}
		//

		if(PI[playerid][Wanted])
		{
			if(pCuff[playerid][pCuffer] != INVALID_PLAYER_ID)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 0);
				pCuff[playerid][pCuffer] = pCuff[playerid][pCuffee] = INVALID_PLAYER_ID;

				PI[playerid][Jail] = 1;
				PI[playerid][JailTime] = ((PI[playerid][Wanted]*10)*60);

				if(PI[playerid][Wanted] < 4) PI[playerid][Spawn] = 5;
				else PI[playerid][Spawn] = 6;

				if(PI[playerid][Zakon] > 1) PI[playerid][Zakon] --;
				SpawnPlayer(playerid);

				PI[playerid][Wanted] = 0;
				SetPlayerWantedLevel(playerid, PI[playerid][Wanted]);

				SCM(playerid, cWAR, "Вы были нейтрализованы и отправлены под стражу!");
			}
		}

		// GPS
		if(UseGPS[playerid])
		{
	    	DisablePlayerRaceCheckpoint(playerid);
	    	UseGPS[playerid] = false;
	    	for(new i; i < 24; i++) TextDrawHideForPlayer(playerid, GPS[i]);
	     	for(new i; i < 3; i++) PlayerTextDrawHide(playerid, GPS1[playerid][i]);
	     	PlayerTextDrawDestroy(playerid, GPS1[playerid][2]);
			GPS1[playerid][2] = PlayerText:INVALID_TEXT_DRAW;
			KillTimer(markTimer[playerid]);
		}
		//
		if(!PI[playerid][Wanted]) return 1;
		{
			if(FracMVD(killerid) && !FracDuty[killerid][GetFrac(killerid)]) return 1;
			{
				if(PI[playerid][Wanted] <= 3) PI[playerid][Spawn] = 6; // КПЗ
				else PI[playerid][Spawn] = 7; // Тюрьма

				if(pCuff[playerid][pCuffer] != INVALID_PLAYER_ID)
				{
					new cuffer = pCuff[playerid][pCuffer];
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					RemovePlayerAttachedObject(playerid, 0);
					pCuff[playerid][pCuffer] = pCuff[playerid][pCuffee] = pCuff[cuffer][pCuffee] = pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
				}
				PI[playerid][Jail] = 1;
				PI[playerid][JailTime] = PI[playerid][Wanted]*10*60;
				if(PI[playerid][Zakon] > 1) PI[playerid][Zakon] --;
				SpawnPlayer(playerid);
				PI[playerid][Wanted] = 0;
				SetPlayerWantedLevel(playerid, PI[playerid][Wanted]);

				// for(i, 5) PlayerTextDrawShow(playerid, Jail_PTD[playerid][i]);

				FSCM(playerid, cBLUE, "Вы были нейтрализованы сотрудни%s %s %s [%i].", (PI[killerid][Sex]==1)?("ком"):("цей"), FracI[GetFrac(killerid)][fName], GetName(killerid));
			}
		}
		//
	}
	return 1;
}

/*
OnPlayerCommandReceived -

*/
public OnPlayerCommandReceived(playerid, cmd[], params[], flags) // Команда введена
{
	if(!PlayerLogin[playerid]) return 0; // SEM(playerid, "Вы не авторизованы!" );
	{
		/*if(GetAdmin(playerid) && AdminLogin[playerid])
		{
  			if(AI[playerid][aBlock])
			{
				SEM(playerid, AdminBlock);
			}
			return 0;
		}*/
 	// FSCM(playerid, cGREY, "Вы ввели команду /%s результата: %s. [%i]", cmd, params, flags);
	}
 	return 1;
}

/*
OnPlayerCommandPerformed -

*/
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) // Команда сработала
{
	if(!PlayerLogin[playerid]) return SEM(playerid, "Вы не авторизованы для пользованием команд!");
	{
		if(result == -1) return SEM(playerid, CMDOff);

		// FSCM(playerid, cGREY, "Вы использовали команду /%s результата: %s. [%i - %i]", cmd, params, result, flags);
	}
	return 1;
}
/*
OnPlayerCommandText -
    Паблик вызывается когда игрок использует команды, тут уж только ваше воображение.
*/
public OnPlayerCommandText(playerid, cmdtext[]) return 0; // Когда игрок отправляет команду в чат

/*
OnVehicleSpawn -
	Вызывается когда спавнится транспорт. Можно повесить объекты, изменить цвет, накинуть 3д текст и прочее.
*/
public OnVehicleSpawn(vehicleid)
{
	return 1;
}

/*
OnVehicleDamageStatusUpdate -
	Этот обратный вызов вызывается, когда элемент транспортного средства, такой как двери, шины, панели или фары, меняет свой статус повреждения.
*/
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	new Float: car_hp;
    new carid = GetPlayerVehicleID(playerid);
    GetVehicleHealth(carid, car_hp);
	if(1000 - car_hp > 300)
	{
		if(!StatusRemen[playerid]) // Если игрок не пристегут
		{
			GiveHealth(playerid, -15);
		}
	}
    if(carid < 250.0) SetVehicleHealth(vehicleid, 250.0);
	return 1;
}

/*
OnVehicleDeath -

*/
public OnVehicleDeath(vehicleid, killerid)
{
	foreach(new i: Player)
	{
		if(VehicleInfo[PlayerRent[i]][vRentID] != INVALID_PLAYER_ID && PlayerRent[i] == vehicleid)
		{
		    FSCM(i, -1, "Ваш транспорт "SERVER"%s (%d)"WHITE" был уничтожен. "WAR"Аренда прекращена!", VehStats[VehicleInfo[PlayerRent[i]][vModel]-400], PlayerRent[i]);
			VehicleInfo[PlayerRent[i]][vRentID] = INVALID_PLAYER_ID;
			VehicleInfo[PlayerRent[i]][vRentPay] = 0;
			if(PlayerRent[i] >= carMine[0] && PlayerRent[i] <= carMine[14])
			{
				if(!MineralsDrive[PlayerRent[i]]) MineralsDrive[PlayerRent[i]] = 0;
				DestroyDynamic3DTextLabel(CarLoadMine[PlayerRent[i]]);
				SetVehicleToRespawn(PlayerRent[i]);
			}
			else DestroyVehicle(PlayerRent[i]);
			PlayerRent[i] = -1;
		}
	}
	return 1;
}

/*
OnPlayerText -
	Вызывается когда игрок пишет в чат. Можно установить префикс, установить внешний вид чата, а так же добавлять анимации диалога.
*/
public OnPlayerText(playerid, text[])
{
	if(!PlayerLogin[playerid]) { SEM(playerid, "Вы не авторизованы для пользованием чата!"); return 0; }
	{
		for(new i; i < SMILE_COUNT; i++)
		{
			if(GetString(text, SmileInfo[i][smInput]))
			{
			    if(PI[playerid][Sex] == 1) MeAction(playerid, SmileInfo[i][smOutput_M]), SetPlayerChatBubble(playerid, SmileInfo[i][smOutput_M], cPURPLE, 13.0, 10000);
				else MeAction(playerid, SmileInfo[i][smOutput_F]), SetPlayerChatBubble(playerid, SmileInfo[i][smOutput_F], cPURPLE, 13.0, 10000);
				return 0;
			}
		}
		if(PI[playerid][Mute]) return SCMMute(playerid, 1);
		{
			new mes[256];
			if(strlen(text) > 90) { SEM(playerid, "Слишком большое сообшение!"); return 0; }
			if(!IsPlayerInAnyVehicle(playerid))
			{
				format(mes, sizeof(mes), ""WHITE"%s{FF0000} "YELLOW"говорит: "WHITE"%s", GetName(playerid), text);
				SetPlayerChatBubble(playerid, text, -1, 20, 7500);
				ProxDetectorText(20.0, playerid, mes, -1, -1, -1, -1, -1);
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 0, 1, 1, 1, 1);
					SetTimerEx("ClearAnimText", 1400, false, "d", playerid);
				}
			}
			else
			{
				format(mes, sizeof(mes), ""WHITE"%s{FF0000} "YELLOW"говорит: "WHITE"%s", GetName(playerid), text);
				SetPlayerChatBubble(playerid, text, -1, 20, 7500);
				ProxDetectorText(20.0, playerid, mes, -1, -1, -1, -1, -1);
			}
		}
	}
	return 0;
}
publics ClearAnimText(playerid) return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);

/*
OnPlayerEnterVehicle -
	Этот паблик отвечает за все происходящее при входе игрока в авто.
*/
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!PlayerLogin[playerid]) return Tkick(playerid);
	{
		if(!ispassenger) // Если игрок садится как водитель
		{
			GetVehicleParams(playerid, vehicleid); // Если игрок садится как водтель
		}
		else // Если игрок садится как посажир
		{
			if(VehicleInfo[vehicleid][vDoors] == true)
			{
				SEM(playerid, "Транспорт закрыт!");
				// return ExitCar(playerid);
			}
			if(pCuff[playerid][pCuffee] == playerid)
			{
				SEM(playerid, "Вы не можете сесть в т/с в наручниках");
				return ExitCar(playerid);
			}
		}
	}
	return 1;
}

stock GetPlayerSubnet(playerid, buffer[], size = sizeof(buffer))
{
    new pos, dots;
    GetPlayerIp(playerid, buffer, size);
    while((pos = strfind(buffer, ".", true, pos + 1)) != -1)
    {
        if(++dots == 2)
        {
            buffer[pos] = 0;
            break;
        }
    }
}

stock GetVehicleParams(playerid, vehicleid)
{
    if(IsAMoped(vehicleid))// Мотоцыкл
    {
		if(!PI[playerid][Lic][0])
		{
			SEM(playerid, "У вас нет водительского удостоверения категории "SERVER"'A'{FFFFFF}!");
			return ExitCar(playerid);
		}
	}
	if(!IsAVelik(vehicleid) && !IsAMoped(vehicleid) && !IsABus(vehicleid) && !IsAGruz(vehicleid) && !IsAVoda(vehicleid) && !IsAPlane(vehicleid)) // Автомобиль
	{
		if(!PI[playerid][Lic][1])
		{
			SEM(playerid, "У вас нет водительского удостоверения категории "SERVER"'B'{FFFFFF}!");
			ExitCar(playerid);
			return 0;
		}
	}
    if(IsABus(vehicleid)) // Автобусы
	{
		if(!PI[playerid][Lic][2])
		{
			SEM(playerid, "У вас нет водительского удостоверения категории "SERVER"'C'{FFFFFF}!");
			ExitCar(playerid);
			return 0;
		}
	}
    if(IsAGruz(vehicleid)) // Грузовик
	{
		if(!PI[playerid][Lic][3])
		{
			SEM(playerid, "У вас нет водительского удостоверения категории "SERVER"'D'{FFFFFF}!");
			ExitCar(playerid);
			return 0;
		}
	}
    if(IsAVoda(vehicleid))// Катера
	{
		if(!PI[playerid][Lic][4])
		{
			SEM(playerid, "У вас нет лицензии на управлением "SERVER"водным{FFFFFF} транспортом!");
			ExitCar(playerid);
			return 0;
		}
	}
	if(IsAPlane(vehicleid))// Самолеты и Вертолеты
	{
		if(!PI[playerid][Lic][5])
		{
			SEM(playerid, "У вас нет лицензии на управлением "SERVER"воздушным{FFFFFF} транспортом!");
			ExitCar(playerid);
			return 0;
		}
	}
	// ===========
	// Начальные работы
	//
	if(vehicleid >= carMine[0] && vehicleid <= carMine[14])
	{
		if(!JobMineDrive[playerid])
		{
			SEM(playerid, "У Вас нет ключей от данного транспорта!");
			ExitCar(playerid);
			return 0;
		}
	}
	//
	// Для работ
	if(VehicleInfo[vehicleid][vJobs])
	{
		if(!PI[playerid][Job] || GetFrac(playerid))
		{
			SEM(playerid, "У Вас нет ключей от данного транспорта!");
			ExitCar(playerid);
			return 0;
		}
		if(PI[playerid][Job] != VehicleInfo[vehicleid][vJobs])
		{
			FSCM(playerid, cWAR, "[ Ошибка ] {FFFFFF}У Вас нет ключей от транспорта "SERVER"''%s''{FFFFFF}!", Job_Name[VehicleInfo[vehicleid][vJobs]]);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			ExitCar(playerid);
			return 0;
		}
		if(PI[playerid][Job] == VehicleInfo[vehicleid][vJobs] && !JobDuty[playerid][PI[playerid][Job]])
		{
			SEM(playerid, "Вы не вышли на работу для пользованием транспорта!");
			ExitCar(playerid);
			return 0;
		}
	}
	//

	// Для организации
	if(VehicleInfo[vehicleid][vFrac])
	{
		if(!GetFrac(playerid) || PI[playerid][Job])
		{
			SEM(playerid, "У Вас нет ключей от данного транспорта!");
			ExitCar(playerid);
			return 0;
		}
		if(PI[playerid][Frac] != VehicleInfo[vehicleid][vFrac])
		{
			FSCM(playerid, cWAR, "[ Ошибка ] {FFFFFF}У Вас нет ключей от транспорта "SERVER"''%s''{FFFFFF}!", FracI[VehicleInfo[vehicleid][vFrac]][fName]);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			ExitCar(playerid);
			return 0;
		}
		if(PI[playerid][Frac] == VehicleInfo[vehicleid][vFrac] && !FracDuty[playerid][GetFrac(playerid)])
		{
			SEM(playerid, "Вы не вышли на работу для пользованием транспорта!");
			ExitCar(playerid);
			return 0;
		}
		if(VehicleInfo[vehicleid][vFracRang] > PI[playerid][FracRang])
		{
		    FSCM(playerid, cWAR, "[ Ошибка ] {FFFFFF}Данный транспорт доступе с должности "SERVER"''%s''{FFFFFF}!", GetRangName[GetFrac(playerid)][VehicleInfo[vehicleid][vFracRang]-1]);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		    ExitCar(playerid);
			return 0;
		}
	}
	//
	if(VehicleInfo[vehicleid][vRent])
	{
		if(PlayerRent[playerid] != -1 && playerid != VehicleInfo[vehicleid][vRentID])
		{
			SEM(playerid, "Вы уже арендовали транспорт!");
			ExitCar(playerid);
			return 0;
		}
		if(VehicleInfo[vehicleid][vRentID] != INVALID_PLAYER_ID && playerid != VehicleInfo[vehicleid][vRentID])
		{
			SEM(playerid, "Данный транспорт уже арендован!");
			ExitCar(playerid);
			return 0;
		}
	}
	/* Таксопарк
	if(CarTaxi[vehicleid])
	{
		if(PI[playerid][Job] != JOB_TAXI) // Если игрок не работает в Такси
		{
			SEM(playerid, "У Вас нет ключей от данного транспорта!");
			ExitCar(playerid);
			return 0;
		}
		if(PI[playerid][Job] == JOB_TAXI)
		{

		}
	}
	*/
	return 0;
}

/*
OnPlayerExitVehicle -
	Этот паблик отвечает за все происходящее при выходе игрока из авто
*/
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(StatusRemen[playerid]) return callcmd::rem(playerid);
	if(GetPVarInt(playerid, "StatusTestDrive") == 1) // Система Автосалона (Тест-драйв)
	{
		DestroyVehicle(SelectCarID[playerid]);

		SetPlayerPos(playerid, 2641.6748, -1912.1439, 2328.1499);
		SetPlayerFacingAngle(playerid, 0.0);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);

		SetPlayerCameraPos(playerid, 2651.2170, -1919.3042, 2330.3555);
		SetPlayerCameraLookAt(playerid, 2650.2305, -1919.3379, 2329.7659);
		SetPlayerVirtualWorld(playerid, playerid+3);
		TogglePlayerControllable(playerid, true);

		for(new i; i < 21; i++) PlayerTextDrawShow(playerid, BuyCars_PTD[playerid][i]);
		SelectTextDraw(playerid, cSERVER); 

		if(SelectCarKlass[playerid] == 1) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarA[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
		if(SelectCarKlass[playerid] == 2) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarB[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
		if(SelectCarKlass[playerid] == 3) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarC[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);

		new string[32], stringer[32];
		if(SelectCarKlass[playerid] == 1) { string_f("%s рублей", ConvertCash(BuyCarA[KlassCarID[playerid]][1])); stringer_f("%s", VehStats[BuyCarC[KlassCarID[playerid]][0]-400][vName]); }
		if(SelectCarKlass[playerid] == 2) { string_f("%s рублей", ConvertCash(BuyCarB[KlassCarID[playerid]][1])); stringer_f("%s", VehStats[BuyCarB[KlassCarID[playerid]][0]-400][vName]); }
		if(SelectCarKlass[playerid] == 3) { string_f("%s рублей", ConvertCash(BuyCarC[KlassCarID[playerid]][1])); stringer_f("%s", VehStats[BuyCarC[KlassCarID[playerid]][0]-400][vName]); }
		PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][13], stringer);
		PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][14], string);

		return DeletePVar(playerid, "StatusTestDrive");
	}
	return 1;
}

/*
OnPlayerStateChange -
	Этот паблик отвечает за все происходящее при изменении статистики игрока.
*/
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	switch(newstate)
	{
		case PLAYER_STATE_ONFOOT: // Если ты не в транспорте
		{
			for(new i; i != 20; i++) PlayerTextDrawHide(playerid, Speed_PTD[playerid][i]);
			KillTimer(TimerSpeed[playerid]);

			// Аренда транспорта
			if(PlayerRent[playerid] != -1)
			{
				if(VehicleInfo[PlayerRent[playerid]][vRentID] != INVALID_PLAYER_ID)
				{
					VehicleInfo[PlayerRent[playerid]][vRentTime] = 2*60;
				}
			}
		}
		case PLAYER_STATE_DRIVER: // Если ты в транспорте
		{
			new carid = GetPlayerVehicleID(playerid);
			SetPVarInt(playerid,"VehicleEnters",carid);

			if(IsACarAll(carid))
			{
				SCM(playerid, cBLUE, "Панель управления: Нажмите {FFFFFF}''2''{3399FF}.");
				SCM(playerid, cWHITE, "Ключ зажигания: Нажмите "SERVER"''CTRL''{FFFFFF}.");
				SCM(playerid, cWHITE, "Ремень безопасности: Нажмите "SERVER"''R''{FFFFFF}.");
			}
			else if(IsAPlane(carid)) SCM(playerid, cBLUE, "Что-бы завести транспорт введите {FFFFFF}''/en(gine)''{3399FF}.");

			if(!IsAPlane(carid) && !IsAVelik(carid) && !IsAVoda(carid)) for(new i; i != 20; i++) PlayerTextDrawShow(playerid, Speed_PTD[playerid][i]);

			if(!IsAVelik(carid) && !IsAVoda(carid) && !IsAPlane(carid)) TimerSpeed[playerid] = SetTimerEx("Update_Speed", 50, false, "i", playerid);
			else if(IsAVelik(carid)) SetEngine(carid, true);

			// Аренда транспорта
			if(VehicleInfo[carid][vRent])
			{
				if(VehicleInfo[carid][vRentID] == INVALID_PLAYER_ID)
				{
					new str[350];
					format(str, sizeof(str), "\
						"SERVER"Данный транспорт можно арендовать!\n\n\
						{ffffff}Стоимость аренды транспорта: "SERVER"%s{ffffff}.\n\
						{ffffff}После аренды никто не сможет управлять данным транспортом, кроме Вас!\n\
						Чтобы закрыть/открыть транспорт используйте: "SERVER"/lock 2", ConvertCash(VehicleInfo[carid][vRentPay]));
					SPD(playerid, dRendCar, d_info, "Аренда транспорта", str, "Арендовать", "Отмена");
				}
				if(VehicleInfo[carid][vRentID] != INVALID_PLAYER_ID && VehicleInfo[PlayerRent[playerid]][vRentTime] != 0) VehicleInfo[PlayerRent[playerid]][vRentTime] = 0;
			}
			//
		}
	}
	return 1;
}

stock ArendaTime(playerid)
{
	if(PlayerRent[playerid] != -1)
	{
		if(VehicleInfo[PlayerRent[playerid]][vRentID] != INVALID_PLAYER_ID)
		{
		    FSCM(playerid, -1, "Аренда транспорта "SERVER"%s (%i)"WHITE" прекращена!", VehStats[VehicleInfo[PlayerRent[playerid]][vModel]-400], PlayerRent[playerid]);
		    VehicleInfo[PlayerRent[playerid]][vRentTime] = 0;
			VehicleInfo[PlayerRent[playerid]][vRentID] = INVALID_PLAYER_ID;
		    if(PlayerRent[playerid] >= carMine[0] && PlayerRent[playerid] <= carMine[14])
			{
				if(!MineralsDrive[PlayerRent[playerid]]) MineralsDrive[PlayerRent[playerid]] = 0;
				DestroyDynamic3DTextLabel(CarLoadMine[PlayerRent[playerid]]);
				SetVehicleToRespawn(PlayerRent[playerid]);
			}
			else DestroyVehicle(PlayerRent[playerid]);
		    PlayerRent[playerid] = -1;
		}
	}
	return 1;
}

/*
OnPlayerEnterCheckpoint -
    Этот паблик отвечает за все происходящее при входе игрока на чекпоинт.
*/
public OnPlayerEnterCheckpoint(playerid)
{
	if(!PlayerLogin[playerid]) return 1;
	{
		// Работа Шахтера
		if(!JobMine[playerid]) return 1;
		{
			if(GetPVarInt(playerid,"StatusMine") == 1) // Добыча руды
			{
				switch(SahtaPosCH[17])
				{
					case 0..17: // Загрузить руду в вагон
					{
						ClearAnimations(playerid, true);
						DisablePlayerCheckpoint(playerid);
						SetPVarInt(playerid, "StatusMine", 1);
						ApplyAnimation(playerid, "SWORD", "sword_4", 15.0, 1, 1, 1, 1, 0);
						SetTimerEx("SetMineral", 15000, false, "i", playerid); // Добыча руды
					}
				}
				return 1;
			}
			if(GetPVarInt(playerid,"StatusMine") == 2) // Положить руду в вагон
			{
				DisablePlayerCheckpoint(playerid);
				DeletePVar(playerid, "StatusMine");
				ClearAnimations(playerid, true);
				ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
				RemovePlayerAttachedObject(playerid, 4); // Руда
				FSCM(playerid, -1, "Вы перенесли "SERVER"%s кг{FFFFFF} руды в вагон.", ConvertCash(PlayerMineral[playerid]));
				AllPlayerMineral[playerid] += PlayerMineral[playerid];
				SI[sMineralVagon] += PlayerMineral[playerid];

				new string[30];
				string_f("%s кг", ConvertCash(AllPlayerMineral[playerid]));
				PlayerTextDrawSetString(playerid, Scahta_PTD[playerid][7], string);

				new stringer[30];
				stringer_f("%s р", ConvertCash(AllPlayerMineral[playerid]*5));
				PlayerTextDrawSetString(playerid, Scahta_PTD[playerid][8], stringer);

				PlayerMineral[playerid] = 0;
				update_int_mysql(T_SERVER, "sMineralVagon", SI[sMineralVagon], "sNumber", 1);
				if(SI[sMineralVagon] >= 80000)
				{
					if(!SI[sStatusVagon]) SI[sStatusVagon] = 1;
					update_int_mysql(T_SERVER, "sStatusVagon", SI[sStatusVagon], "sNumber", 1);

					DestroyDynamic3DTextLabel(VagonInfo);
					MoveDynamicObject(MineralVagon, 2634.3223, 1802.3330, 3427.7935, 3.0); // Едит к складу

					foreach(new i: Player)
					{
						if(!PlayerLogin[i] || !JobMine[i]) continue;
						DisablePlayerCheckpoint(i);
						ClearAnimations(i, true);

						RemovePlayerAttachedObject(i, 4);
						RemovePlayerAttachedObject(i, 3);

						SCMInfo(i, "Вагон был успешно загружен и отправлен на разгрузку!");
						SetTimerEx("MovedVagon", 53000, false, "d", i);
					}
					return 1;
				}
				SetPVarInt(playerid, "StatusMine", 1);
				SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.0000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000); // Кирка
				ClearAnimations(playerid, true);
				return MestaMinerals(playerid);
			}
			if(GetPVarInt(playerid,"StatusMine") == 3) // Взять руду из вагона
			{
				DeletePVar(playerid, "StatusMine");

				PlayerMineral[playerid] = 5 + random(25);
				SI[sMineralVagon] -= PlayerMineral[playerid];

				if(SI[sMineralVagon] < PlayerMineral[playerid])
				{
					PlayerMineral[playerid] = SI[sMineralVagon];
					SI[sMineralVagon] = 0;

					FSCM(playerid, -1, "Вы взяли из вагона: "SERVER"%i руды", PlayerMineral[playerid]);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 1, 1);
					SetPlayerAttachedObject(playerid, 4, 2936, 1, 0.184699, 0.426247, 0.0000, 259.531341, 80.949592, 0.0000, 0.476124, 0.468181, 0.470769);

					if(SI[sMineralVagon] <= 0)
					{
						DestroyDynamic3DTextLabel(VagonInfo);
						MoveDynamicObject(MineralVagon, 2634.3223, 1969.8330, 3427.7935, 3.0); //
						if(SI[sStatusVagon] == 1)  SI[sStatusVagon] = 0;
						update_int_mysql(T_SERVER, "sMineralVagon", SI[sMineralVagon], "sNumber", 1);
						update_int_mysql(T_SERVER, "sStatusVagon", SI[sStatusVagon], "sNumber", 1);

						foreach(new i: Player)
						{
							if(!PlayerLogin[i] || !JobMine[i]) continue;

							SCMInfo(i, "Вагон был успешно разгружен и отправлен на загрузку!");
							SetPVarInt(i, "StatusMine", 5);
							ScahtaSkladCP[0] = SetPlayerCheckpoint(playerid, 2640.5842, 1769.0028, 3426.0000, 3.0);
							SetTimerEx("MovedVagonBack", 55000, false, "d", i);
						}
					}
					return 1;
				}
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 1, 1);
				SetPlayerAttachedObject(playerid, 4, 2936, 1, 0.184699, 0.426247, 0.0000, 259.531341, 80.949592, 0.0000, 0.476124, 0.468181, 0.470769);

				DisablePlayerCheckpoint(playerid);
				FSCM(playerid, -1, "Вы взяли из вагона: "SERVER"%i руды", PlayerMineral[playerid]);
				SetPVarInt(playerid, "StatusMine", 4);
				return MestaMinerals(playerid);
			}
			if(GetPVarInt(playerid,"StatusMine") == 4) // Положить руду в склад
			{
				DisablePlayerCheckpoint(playerid);
				DeletePVar(playerid, "StatusMine");
				ClearAnimations(playerid, true);
				SI[sMinerals] += PlayerMineral[playerid];
				AllPlayerMineral[playerid] += PlayerMineral[playerid];

				RemovePlayerAttachedObject(playerid, 4);
				FSCM(playerid, -1, "Вы перенесли на дробилку "SERVER"%i кг{FFFFFF} руды.", PlayerMineral[playerid]);
				FSCM(playerid, -1, "Общее кол-во "SERVER"%i кг{FFFFFF} руды.", AllPlayerMineral[playerid]);
				PlayerMineral[playerid] = 0;
				ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);

				new string[30];
				string_f("%s кг", ConvertCash(AllPlayerMineral[playerid]));
				PlayerTextDrawSetString(playerid, Scahta_PTD[playerid][7], string);

				new stringer[30];
				stringer_f("%s р", ConvertCash(AllPlayerMineral[playerid]*5));
				PlayerTextDrawSetString(playerid, Scahta_PTD[playerid][8], stringer);

				if(!SI[sMineralVagon] && GetPVarInt(playerid, "StatusMine") == 5)
				{
					DeletePVar(playerid, "StatusMine");
					RemovePlayerAttachedObject(playerid, 3);
					RemovePlayerAttachedObject(playerid, 4);
					SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.0000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000); // Кирка
					return 1;
				}
				SetPVarInt(playerid, "StatusMine", 3);
				return MestaMinerals(playerid);
			}
			if(GetPVarInt(playerid,"StatusMine") == 5) // Положить руду в склад когда вагон едит
			{
				DisablePlayerCheckpoint(playerid);
				DeletePVar(playerid, "StatusMine");
				ClearAnimations(playerid, true);
				SI[sMinerals] += PlayerMineral[playerid];
				AllPlayerMineral[playerid] += PlayerMineral[playerid];
				RemovePlayerAttachedObject(playerid, 4);
				FSCM(playerid, -1, "Вы перенесли на дробилку "SERVER"%i кг{FFFFFF} руды.", PlayerMineral[playerid]);
				FSCM(playerid, -1, "Общее кол-во "SERVER"%i кг{FFFFFF} руды.", AllPlayerMineral[playerid]);
				PlayerMineral[playerid] = 0;
				ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);

				if(!SI[sMineralVagon] && GetPVarInt(playerid, "StatusMine") == 5)
				{
					DeletePVar(playerid, "StatusMine");
					SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.0000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000); // Кирка
					return 1;
				}
			}
			//
		}
		//
	}
	return 1;
}

/*
OnPlayerLeaveCheckpoint -
	Этот паблик отвечает за все происходящее при выходе игрока с чекпоинта.
*/
public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

/*
OnPlayerEnterRaceCheckpoint -
	Этот паблик отвечает за все происходящее при входе игрока на гонку.
*/
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(!PlayerLogin[playerid]) return Tkick(playerid);
	{
	    // GPS
		if(UseGPS[playerid])
		{
	     	DisablePlayerRaceCheckpoint(playerid);
	    	UseGPS[playerid] = false;
	    	for(new i; i < 24; i++) TextDrawHideForPlayer(playerid, GPS[i]);
	    	for(new i; i < 3; i++) PlayerTextDrawHide(playerid, GPS1[playerid][i]);
			GPS1[playerid][2] = PlayerText:INVALID_TEXT_DRAW;
			KillTimer(markTimer[playerid]);
		   	return 1;
		}
		//

		// Работа шахтера
		if(!JobMineDrive[playerid]) return 1;
		{
			DisablePlayerRaceCheckpoint(playerid);
			SahtaDrivePosCH[playerid]++;
			new i = SahtaDrivePosCH[playerid];
			switch(SahtaDrivePosCH[playerid])
			{
				case 0..23: SetPlayerRaceCheckpoint(playerid, 0, ScahtaDriveCP[i][0], ScahtaDriveCP[i][1], ScahtaDriveCP[i][2], ScahtaDriveCP[i][3], ScahtaDriveCP[i][4], ScahtaDriveCP[i][5], 3.0);
				case 24: SetPlayerRaceCheckpoint(playerid, 1, ScahtaDriveCP[i][0], ScahtaDriveCP[i][1], ScahtaDriveCP[i][2], ScahtaDriveCP[i][3], ScahtaDriveCP[i][4], ScahtaDriveCP[i][5], 3.0);
			}
			if(SahtaDrivePosCH[playerid]>=CP_MINEDRIVE_MAX)
			{
				FSCM(playerid, -1, "Вы успешно доставили "SERVER"%s кг{FFFFFF} руды на завод за "GREEN"%s рублей{FFFFFF}!", ConvertCash(MineralsDrive[PlayerRent[playerid]]), ConvertCash(MineralsDrive[PlayerRent[playerid]]*EI[eiDriveMineralsPay]));
				AllPlayerMineral[playerid] += MineralsDrive[PlayerRent[playerid]];
				MineralsDrive[PlayerRent[playerid]] = SahtaDrivePosCH[playerid] = 0;
				new stringLoadCarDrive[64];
				format(stringLoadCarDrive, sizeof(stringLoadCarDrive), "Загружено руды: "SERVER"%s{FFFFFF} кг.", ConvertCash(MineralsDrive[PlayerRent[playerid]]));
				UpdateDynamic3DTextLabelText(CarLoadMine[PlayerRent[playerid]], -1, stringLoadCarDrive);
				return 1;
			}
		}
		//
	}
	return 1;
}

/*
OnPlayerLeaveRaceCheckpoint -
	Этот паблик отвечает за все происходящее при выходе игрока с гонки.
*/
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

/*
OnRconCommand -
	Этот паблик отвечает за все происходящее при использовании игрока ркон команды.
*/
public OnRconCommand(cmd[])
{
	return 1;
}


/*
OnPlayerRequestSpawn -

*/
public OnPlayerRequestSpawn(playerid)
{
	return 1;
}


/*
OnObjectMoved -
	Этот паблик отвечает за все происходящее при движении обьекта.
*/
public OnObjectMoved(objectid)
{
	return 1;
}


/*
OnPlayerObjectMoved -
	Этот паблик отвечает за все происходящее при движении игрока обьекта.
*/
public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

/*
OnPlayerPickUpPickup -
	Этот паблик отвечает за все происходящее при входе игрока на пикап.
*/
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(!PlayerLogin[playerid]) return 1;
  	{
  	    if(pickupid ==  picAutovokzal[0])
  	    {
	 	 	SetPlayerPos(playerid, 778.9370, -321.1627, 1003.2039);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
  	    if(pickupid ==  picAutovokzal[1])
  	    {
	 	 	SetPlayerPos(playerid, 1789.5305, 1351.4175, 10.1754);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		// Банк
	 	if(pickupid ==  picBank[0]) // Выход из Банка
	 	{
			if(GetPlayerVirtualWorld(playerid) == 1) // пгт.Батырево
			{
				SetPlayerPos(playerid, 1835.8016, 2040.2628, 16.9839);
				SetPlayerFacingAngle(playerid, 0.0);
			}
			if(GetPlayerVirtualWorld(playerid) == 2) // г.Южный
			{
				SetPlayerPos(playerid, 2376.6113, -2140.6450, 22.0871);
				SetPlayerFacingAngle(playerid, 180.0);
			}
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
	 	}
	 	if(pickupid ==  picBank[1]) // Банк пгт.Батырево
	 	{
	 	 	SetPlayerPos(playerid, 2666.4866, -1608.2810, 1001.9978);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
	 	}
  	    if(pickupid ==  picBank[2]) // Банк г.Южный
	 	{
	 	 	SetPlayerPos(playerid, 2666.4866, -1608.2810, 1001.9978);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 2);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
	 	}
		//

		// Паспортный стол
		if(pickupid ==  picPass[0])
		{
			SetPlayerPos(playerid, 1393.2327, 1551.4470, 139.9732);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerVirtualWorld(playerid, 10);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		if(pickupid ==  picPass[1])
		{
			SetPlayerPos(playerid, 2436.4456,-1905.3943,22.0043);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		//

		// Работа Шахтера
  	    if(pickupid ==  picScahta[0]) // Вход на шахту
	 	{
			/*SetPlayerPos(playerid, 2628.7937, 1792.1102, 3502.0017);
			SetPlayerFacingAngle(playerid, 180.0);*/

			SetPlayerPos(playerid, 2639.4407, 1774.9249, 3425.9968);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerVirtualWorld(playerid, 5);
			SetPlayerInterior(playerid, 5);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
	 	}
	 	if(pickupid ==  picScahta[1]) // Выход из Шахты
	 	{
	 	 	SetPlayerPos(playerid, 1796.5765, 2289.7642 ,15.7175);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
	 	}

		// Автосалон
		if(pickupid ==  picAutoSalon[0])
		{
			SetPlayerPos(playerid, 2656.5476, -1920.3359, 2325.0081);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		if(pickupid ==  picAutoSalon[1])
		{
			SetPlayerPos(playerid, 2327.7014, -1804.1760, 22.4503);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		//

		/* Автошкола
		if(pickupid ==  picAvtoShkola[0])
		{
			SetPlayerPos(playerid, 211.3831, 1286.2413, 1112.6586);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		if(pickupid ==  picAvtoShkola[1])
		{
			SetPlayerPos(playerid, 180.9658, 1497.3943, 11.8080);
			SetPlayerFacingAngle(playerid, 78.8999);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		*/

		// Паркинг ДПС
		if(pickupid ==  picParkingDPS[0])
	 	{
			if(GetFrac(playerid) != FRAC_DPS && GetAdmin(playerid) < 4) return SEM(playerid, "Доступ на парковку для ДПС ограничен!");
			{
				SetPlayerPos(playerid, 135.5156, 1226.7583, 1000.9933);
				SetPlayerFacingAngle(playerid, -90.0);
				SetPlayerInterior(playerid, FRAC_DPS);
				SetPlayerVirtualWorld(playerid, FRAC_DPS);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 4500);
			}
	 	}
		if(pickupid ==  picParkingDPS[1])
	 	{
	 	 	SetPlayerPos(playerid, 197.9432, 1208.7078, 12.0086);
			SetPlayerFacingAngle(playerid, 78.500);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
	 	}

		// Паркинг Армии
		if(pickupid ==  picParkingVH[0])
	 	{
			if(GetFrac(playerid) != FRAC_VH && GetAdmin(playerid) < 4) return SEM(playerid, "Доступ на парковку для ВЧ ограничен!");
			{
				SetPlayerPos(playerid, 1783.6821, 1721.0815, 1000.9951);
				SetPlayerFacingAngle(playerid, 0.0);
				SetPlayerInterior(playerid, FRAC_VH);
				SetPlayerVirtualWorld(playerid, FRAC_VH);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 4500);
			}
	 	}
		if(pickupid ==  picParkingVH[1])
	 	{
	 	 	SetPlayerPos(playerid, 1776.0192, 1774.9257, 15.3179);
			SetPlayerFacingAngle(playerid, 180.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
	 	}
		//

		// Паркинг ФСБ
		if(pickupid ==  picParkingFSB[0])
	 	{
			if(GetFrac(playerid) != FRAC_FSB && GetAdmin(playerid) < 4) return SEM(playerid, "Доступ на парковку для ФСБ ограничен!");
			{
				SetPlayerPos(playerid, 1813.6173, 2063.4607, 1500.9885);
				SetPlayerFacingAngle(playerid, 0.0);
				SetPlayerInterior(playerid, FRAC_FSB);
				SetPlayerVirtualWorld(playerid, FRAC_FSB);
				SetCameraBehindPlayer(playerid);
				FreezePlayer(playerid, 4500);
			}
	 	}
		if(pickupid ==  picParkingFSB[1])
	 	{
	 	 	SetPlayerPos(playerid, 1794.6970, 2077.0935, 15.8505);
			SetPlayerFacingAngle(playerid, 0.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);
		}
		//

		// Деморган
		if(pickupid ==  picDemorgan[0])
		{
			PI[playerid][Spawn] = 1;
			SpawnPlayer(playerid);
			DestroyPickup(picDemorgan[1]);
		}
		//
	}
	return 1;
}

/*
OnPlayerPickUpDynamicPickup -
	Этот паблик отвечает за все происходящее при входе игрока на пикап.
*/
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(!PlayerLogin[playerid]) return 1;
	{
	    // Антифлуд пикапом
		if(IsPlayerInRangeOfPoint(playerid, 1.5, PickuPI[pickupid][PickX], PickuPI[pickupid][PickY], PickuPI[pickupid][PickZ]) && PickupUp[playerid] == pickupid) return true;
		{
		    PickupUp[playerid] = pickupid;

			if(pickupid == picDemorgan[1]) return 1; // Деморган

			// Работа Шахтера
			if(pickupid == picJobMine)
			{
				if(!JobMine[playerid] && !JobMineDrive[playerid])
				{
					return SPD(playerid, dJobMineSelect, d_list, "Работа на шахте", "{FFFFFF}\
						"SERVER"1. {FFFFFF}Добыча руды\n\
						"SERVER"2. {FFFFFF}Доставка руды",
					"Выбрать", "Закрыть");
				}
				else if(!JobMineDrive[playerid] && JobMine[playerid] == true)
				{
					return SPD(playerid, dJobMine, d_info, "Работа на шахте", "{FFFFFF}\
						Вы желаете завершить добычу руды?",
					"Да", "Нет");
				}
				else if(!JobMine[playerid] && JobMineDrive[playerid] == true)
				{
					return SPD(playerid, dJobMineDrive, d_info, "Работа на шахте", "{FFFFFF}\
						Вы желаете завершить доставуку руды?",
					"Да", "Нет");
				}
			}
			if(pickupid == picInfoMine)
			{
				new string[1024];
				string_f("%s%s%s%s%s%s%s%s", JobMineInfo[0], JobMineInfo[1], JobMineInfo[2], JobMineInfo[3], JobMineInfo[4], JobMineInfo[5], JobMineInfo[6], JobMineInfo[7]);
				SPD(playerid, dNull, d_info, "{FFFFFF}Начальная работа | "SERVER"Шахтера", string, "Хорошо", "");
			}
			if(pickupid == picMineralLoadCar) // Загрузка руды в транспорт
			{
				if(!JobMineDrive[playerid]) return 1;
				{
					if(PlayerRent[playerid] == -1) return 1;
					if(PlayerMineral[playerid] != 0) return 1;
					{
						new minerals = 5 + random(30);
						PlayerMineral[playerid] = minerals;
						FSCM(playerid, -1, "Вы взяли со склада %i кг руды.", minerals);
						SCMInfo(playerid, "Положите руду в Ваш рабочий транспорт!");
						SetPlayerAttachedObject(playerid, 4, 2936, 1, 0.184699, 0.426247, 0.0000, 259.531341, 80.949592, 0.0000, 0.476124, 0.468181, 0.470769);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						return 1;
					}
				}
			}

			if(pickupid == picLoadCarMine)
			{
				if(!JobMineDrive[playerid]) return 1;
				if(!PlayerMineral[playerid]) return 1;
				if(PlayerRent[playerid] != playerid) return SEM(playerid, "Вы загружаете не в свою машину!");
				{
					SI[sMinerals] -= PlayerMineral[playerid];
					MineralsDrive[PlayerRent[playerid]] += PlayerMineral[playerid];
					FSCM(playerid, -1, "Вы загрузили в машину %s кг руды.", ConvertCash(PlayerMineral[playerid]));

					new stringLoadCarDrive[64];
					format(stringLoadCarDrive, sizeof(stringLoadCarDrive), "Загружено руды: "SERVER"%s{FFFFFF} кг.", ConvertCash(MineralsDrive[PlayerRent[playerid]]));
					UpdateDynamic3DTextLabelText(CarLoadMine[PlayerRent[playerid]], -1, stringLoadCarDrive);
					PlayerMineral[playerid] = 0;
					ApplyAnimation(playerid, "BOX", "CATCH_BOX", 4.0, 0, 0, 0, 0, 0, 1);
					RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					// SetPlayerAttachedObject(playerid, 0, 341, 6); //
				}
			}
			//

			// Работа Лесоповал
			if(pickupid == picJobLesorub)
			{
				if(!JobLesorub[playerid]) return SPD(playerid, dJobLesorub, d_info, "Работа на Лесоповале", "{FFFFFF}\
					Вы желаете устроиться на подработку Лесоповала?",
				"Да", "Нет");
				else return SPD(playerid, dJobLesorub, d_info, "Работа на Лесоповале", "{FFFFFF}\
					Вы желаете завершить подработку на Лесоповале?",
				"Да", "Нет");

			}
			if(pickupid == picLesorubInstrument)
			{
				if(!JobLesorub[playerid]) return 1;
				{
					if(!LesorubInstrument[playerid])
					{
						LesorubInstrument[playerid] = true;
						SetPlayerAttachedObject(playerid, 0, 341, 6); //
						SCMInfo(playerid, "Вы успешно взяли интсрумент!");
					}
					else
					{
						LesorubInstrument[playerid] = false;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 0);
						SCMInfo(playerid, "Вы успешно положили интсрумент!");
					}
				}
			}
			if(pickupid == picDerevoSklad) // Сдать дерево на склад
			{
				if(!JobLesorub[playerid]) return 1;
				{
					if(!LesorubInstrument[playerid]) return 1;
					{
						ApplyAnimation(playerid, "BOX", "CATCH_BOX", 4.0, 0, 0, 0, 0, 0, 1);
						RemovePlayerAttachedObject(playerid, 4);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						SetPlayerAttachedObject(playerid, 0, 341, 6); //
						AllPlayerDerevo[playerid] ++;
						FSCM(playerid, cBLUE, "Вы доставили поваленных деревьев: %i шт.", AllPlayerDerevo[playerid]);
						SI[sSkladDerevo] += AllPlayerDerevo[playerid];
					}
				}
			}
			//
			if(pickupid == picPassDoc) // Оформление паспорта
			{
				if(PI[playerid][Pasport]) return SEM(playerid, "У Вас уже есть паспорт!");
				// if(!PI[playerid][Poshlina]) return SEM(playerid, "У Вас не оплачена гос.пошлина!");
				{
					new string[512];
					string_f("{FFFFFF}\
						Уважаемый житель Нижегородской области!\n\
						Для оформления паспорта Вы должны заплатить "SERVER"Государственную пошлину - %s{FFFFFF}.\n\n\
						"SERVER"Государственную пошлину{FFFFFF} Вы можете оплатить в любом отделении банка Нашей области.",
						(PI[playerid][Poshlina])?("{63BD4E}Оплачено"):("{FF0000}Не оплачено"));
					return SPD(playerid, dDocPas, d_info, ""SERVER"Оформления паспорта", string, "Дальше >>", "Отмена");
				}
			}

			if(pickupid == picArendaCar[0] || pickupid == picArendaCar[1])
			{
				if(pickupid ==  picArendaCar[0]) SetPVarInt(playerid, "ArendaVelic", 1);
				else SetPVarInt(playerid, "ArendaVelic", 2);
				SPD(playerid, dArendaVelik, d_info, "Аренда велосипеда", "{FFFFFF}Вы желаете арендовать велосипед?", "Да", "Нет");
			}

			if(pickupid == picNaloginAO)
			{
				new string[1024], str[128];
				new leader[32];
				if(GetString(FracI[FRAC_AO][fLeader], "The Stats")) leader = ""GREY"Отсуствует";
				else format(leader, 50, "Губернатором области: "SERVER"%s", FracI[FRAC_AO][fLeader]);

				strcat(string, ""SERVER"Администрация области{FFFFFF}\n\n");
				format(str, sizeof(str),"%s\n\n", leader); strcat(string,str);
				format(str, sizeof(str),"{ffffff}Стоимость руды: "SERVER"%s рублей за 1 кг\n", ConvertCash(EI[eiScahtaPay])); strcat(string,str);
				format(str, sizeof(str),"{ffffff}Стоимость перевозки руды: "SERVER"%s рублей за 1 кг\n", ConvertCash(EI[eiDriveMineralsPay])); strcat(string,str);
				format(str, sizeof(str),"{ffffff}Стоимость дерева: "SERVER"%s рублей за 1 бревно\n", ConvertCash(EI[eiDrovosekPay])); strcat(string,str);
				format(str, sizeof(str),"{ffffff}Стоимость штрафа за превышение скорости: "SERVER"%s рублей\n", ConvertCash(EI[eiRadarPay])); strcat(string,str);
				return SPD(playerid, dNull, d_info, "Информация", string, "Закрыть", "");
			}

			if(pickupid == picFamilyAO)
			{
				return SPD(playerid, dInfoFamily, d_list, "Семейная информация", "\
					"SERVER"1. {FFFFFF}Список семей\n\
					"SERVER"2. {FFFFFF}Создать семью\n",
				"Выбрать", "Заакрыть");
			}

			// Автосалон
			if(pickupid == picAutoSalonBuy)
			{
				SPD(playerid, dSelectCarBuy, d_list, ""SERVER"Автосалон {FFFFFF}| Выберите категорию!", "\
					"SERVER"1. {FFFFFF}Низский класс\n\
					"SERVER"2. {FFFFFF}Средний класс\n\
					"SERVER"3. {FFFFFF}Высокий класс\n",
				"Выбрать", "Закрыть");
			}
			//
			
			// Система подарков
			for(new i = 1; i <= TOTALPODARKI; i++)
			{
				if(pickupid == picPodarok[i])
				{
				    if(SerP[playerid][spStatus][i-1]==1) return SEM(playerid, "Вы уже подбирали данный подарок!");
				    {
				    	return SetPrizePodarok(playerid, i);
					}
				}
  			}
			//
		}
	}
	return 1;
}

/*
OnVehicleMod -

*/
public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

/*
OnVehiclePaintjob -

*/
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	VehicleInfo[vehicleid][vJobs] = paintjobid;
	return 1;
}

/*
OnVehicleRespray -

*/
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	VehicleInfo[vehicleid][vColor1] = color1;
	VehicleInfo[vehicleid][vColor2] = color2;
	return 1;
}

/*
OnPlayerSelectedMenuRow -
	Этот паблик отвечает за все происходящее при закрытии меню игрока.
*/
public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

/*
OnPlayerExitedMenu -

*/
public OnPlayerExitedMenu(playerid)
{
	return 1;
}

/*
OnPlayerInteriorChange -

*/
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

/*
OnPlayerKeyStateChange -
    Паблик приходит в действие когда игрок нажимает на определенную кнопку, можно использовать например для открытия инвентaря.
	PRESSED-это зажатие клавиши, RELEASED-это ее отпуск
*/

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(!PlayerLogin[playerid]) return Tkick(playerid);
	{
		/*
		if(IsPlayerInAnyVehicle(playerid)) FSCM(playerid, -1, "ТС: newkeys = [%i], oldkeys = [%i]", newkeys, oldkeys);
		else FSCM(playerid, -1, "Пешком: newkeys = [%i], oldkeys = [%i]", newkeys, oldkeys);*/

		new carid = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid)) // Если игрок в транспорте
		{
			if(newkeys == 1) // Ctrl
			{
			
			}

			if(newkeys == 2) // H - CapsLock
			{
				// ДПС
				if(GetFrac(playerid) == FRAC_DPS || GetAdmin(playerid) >= 4)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, 195.4590, 1212.6968, 12.2629)) // Выезд с парковки ДПС
					{
						switch(random(2))
						{
							case 0: { SetPlayerPos(playerid, 138.3890, 1219.7859, 1001.2122); SetVehiclePos(carid, 138.3890, 1219.7859, 1001.2122); } //
							case 1: { SetPlayerPos(playerid, 138.3890, 1249.7859, 1001.2122); SetVehiclePos(carid, 138.3890, 1249.7859, 1001.2122); } //
						}
						SetPlayerVirtualWorld(playerid, FRAC_DPS); SetPlayerInterior(playerid, FRAC_DPS);
						SetVehicleVirtualWorld(carid, FRAC_DPS); LinkVehicleToInterior(carid, FRAC_DPS);
						SetVehicleZAngle(carid, -90.0); PutPlayerInVehicle(playerid, carid, 0);
						FreezePlayer(playerid, 3000);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, 138.3890, 1219.7859, 1001.2122) ||
						IsPlayerInRangeOfPoint(playerid, 2.0, 138.3890, 1249.7859, 1001.2122)) // Въезд на парковку ДПС
					{
							SetPlayerPos(playerid, 195.6048, 1212.6367, 12.2506); SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
							SetVehiclePos(carid, 195.6048, 1212.6367, 12.2506); SetVehicleVirtualWorld(carid, 0); LinkVehicleToInterior(carid, 0);
							SetVehicleZAngle(carid, 78.5000); PutPlayerInVehicle(playerid, carid, 0);
							FreezePlayer(playerid, 3000);
					}
				}
				//

				// ВЧ
				if(GetFrac(playerid) == FRAC_VH || GetAdmin(playerid) >= 4)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, 1772.6388, 1772.2600, 15.5218)) // Выезд с парковки ВЧ
					{
						switch(random(2))
						{
							case 0: { SetPlayerPos(playerid, 1790.6467, 1724.8378, 1001.2410); SetVehiclePos(carid, 1790.6467, 1724.8378, 1001.2410); } //
							case 1: { SetPlayerPos(playerid, 1760.6467, 1724.8378, 1001.2410); SetVehiclePos(carid, 1760.6467, 1724.8378, 1001.2410); } //
						}
						SetPlayerVirtualWorld(playerid, FRAC_VH); SetPlayerInterior(playerid, FRAC_VH);
						SetVehicleVirtualWorld(carid, FRAC_VH); LinkVehicleToInterior(carid, FRAC_VH);
						SetVehicleZAngle(carid, 0.0); PutPlayerInVehicle(playerid, carid, 0);
						FreezePlayer(playerid, 3000);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1790.6467, 1724.8378, 1001.2410) ||
						IsPlayerInRangeOfPoint(playerid, 2.0, 1760.6467, 1724.8378, 1001.2410)) // Въезд на парковку ВЧ
					{
						SetPlayerPos(playerid, 1772.6388, 1772.2600, 15.5218); SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
						SetVehiclePos(carid, 1772.6388, 1772.2600, 15.5218); SetVehicleVirtualWorld(carid, 0); LinkVehicleToInterior(carid, 0);
						SetVehicleZAngle(carid, 180.0); PutPlayerInVehicle(playerid, carid, 0);
						FreezePlayer(playerid, 3000);
					}
				}
				//

				// ФСБ
				if(GetFrac(playerid) == FRAC_FSB || GetAdmin(playerid) >= 4)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, 1797.9634, 2080.5791, 16.0295)) // Выезд с парковки ФСБ
					{
						switch(random(2))
						{
							case 0: { SetPlayerPos(playerid, 1820.6249, 2066.3628, 1501.2100); SetVehiclePos(carid, 1820.6249, 2066.3628, 1501.2100); } //
							case 1: { SetPlayerPos(playerid, 1790.1249, 2066.3628, 1501.2100); SetVehiclePos(carid, 1790.1249, 2066.3628, 1501.2100); } //
						}
						SetPlayerVirtualWorld(playerid, FRAC_DPS); SetPlayerInterior(playerid, FRAC_DPS);
						SetVehicleVirtualWorld(carid, FRAC_DPS); LinkVehicleToInterior(carid, FRAC_DPS);
						SetVehicleZAngle(carid, 0.0); PutPlayerInVehicle(playerid, carid, 0);
						FreezePlayer(playerid, 3000);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1820.6249, 2066.3628, 1501.2100) ||
						IsPlayerInRangeOfPoint(playerid, 2.0, 1790.1249, 2066.3628, 1501.2100)) // Въезд на парковку ФСБ
					{
						SetPlayerPos(playerid, 1797.9634, 2080.5791, 16.0295); SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
						SetVehiclePos(carid, 1797.9634, 2080.5791, 16.0295); SetVehicleVirtualWorld(carid, 0); LinkVehicleToInterior(carid, 0);
						SetVehicleZAngle(carid, 0.0); PutPlayerInVehicle(playerid, carid, 0);
						FreezePlayer(playerid, 3000);
					}
				}
				//
				callcmd::open(playerid);

				// Работа шахтера
				if(JobMineDrive[playerid]) // Перевозка руды
				{
					if(GetVehicleModel(carid) != 406) return SEM(playerid, "Данный транспорт не подходит для загрузки руды!");
					{
						if(IsPlayerInRangeOfPoint(playerid, 5.0, 1763.6733, 2307.6584, 15.7923)) //
						{
							if(!SI[sMinerals]) return SEM(playerid, "Извените! На складе нет руды.");
							{

							}
						}
					}
				}
				//
			}

			if(newkeys == 512) // 2
			{
				if(!IsAPlane(carid) && !IsAVoda(carid) && !IsAVelik(carid))
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						return callcmd::cp(playerid);
					}
				}
			}

			if(PRESSED(KEY_FIRE)) //
			{
				if(!IsAVelik(carid))
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						return callcmd::fare(playerid);
					}
				}
			}

			if(newkeys == KEY_NO) // N
			{
				if(!StatusMapTP[playerid]) return 1;
				{
					if(!AI[playerid][aSetting][6]) return SEM(playerid, "Включите ТП по карте > /aset");
					{
						AllowAdminTeleport(true);
						SetPlayerPos(playerid, MapPos[playerid][0], MapPos[playerid][1], MapPos[playerid][2]);
						SetVehiclePos(carid, MapPos[playerid][0], MapPos[playerid][1], MapPos[playerid][2]);
						SetVehicleVirtualWorld(carid, 0);
						PutPlayerInVehicle(playerid, carid, 0);//Садим игрока в машину
					}
					StatusMapTP[playerid] = false;
					MapPos[playerid][0] = 0.0;
					MapPos[playerid][1] = 0.0;
					MapPos[playerid][2] = 0.0;
				}
			}
		}
		else
		{
			// Работа Шахтера
			if(PRESSED (KEY_SECONDARY_ATTACK) || PRESSED (KEY_JUMP ) || PRESSED (KEY_CROUCH) || PRESSED (KEY_SPRINT) || PRESSED (KEY_FIRE))
			{
				if(JobMine[playerid])
				{
					if(!SI[sStatusVagon])
					{
						if(GetPVarInt(playerid, "StatusMine") == 2) // Перенос руды в вагон
						{
							DeletePVar(playerid, "StatusMine");
							DisablePlayerCheckpoint(playerid);
							RemovePlayerAttachedObject(playerid, 4); // Руда
							ClearAnimations(playerid, true);
							ApplyAnimation(playerid,"MISC","plyr_shkhead",4.0,0,0,0,0,0,1);
							// ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
							PlayerPlaySound(playerid,17200,0.0,0.0,0.0);
							SCM(playerid,0xFF3A3AFF, "Вы уронили руду!");
							SetPVarInt(playerid, "StatusMine", 1);
							if(!SI[sStatusVagon]) SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.000000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
							return MestaMinerals(playerid);
						}
					}
					else
					{
						if(GetPVarInt(playerid, "StatusMine") == 4) // Перенос руды из вагона
						{
							DeletePVar(playerid, "StatusMine");
							DisablePlayerCheckpoint(playerid);
							RemovePlayerAttachedObject(playerid, 4); // Руда
							ClearAnimations(playerid, true);
							ApplyAnimation(playerid,"MISC","plyr_shkhead",4.0,0,0,0,0,0,1);
							PlayerPlaySound(playerid,17200,0.0,0.0,0.0);
							SCM(playerid,0xFF3A3AFF, "Вы уронили руду!");
							SetPVarInt(playerid, "StatusMine", 3);
							return MestaMinerals(playerid);
						}
					}
				}
			}
			//

			if(newkeys == KEY_SECONDARY_ATTACK) // Анимация - Enter
			{
				if(CheckAnims[playerid])
				{
					CheckAnims[playerid] = false;
					ClearAnimations(playerid, true);
					for(i, 1) PlayerTextDrawHide(playerid, Stop_anim_PTD[playerid][i]);
				}

				if(SP[playerid][SpecID] != INVALID_PLAYER_ID) SelectTextDraw(playerid, 0xFF4040AA); // Система слежения за игроком
			}

			if(newkeys == KEY_WALK) // Alt
			{
				// Система банка
				if(IsPlayerInRangeOfPoint(playerid, 0.80, 2672.4060, -1618.8480, 1001.9987)
				|| IsPlayerInRangeOfPoint(playerid, 0.80, 2668.7700, -1618.8480, 1001.9987)) return DialogBankMenu(playerid); // BankShet(playerid);
				//

				// Деморган
				if(StatusGateDemorgan[playerid] != false)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.80, -1767.1617, -2869.5530, 1031.4751))
					{
						new string[132];
						string_f(""WHITE"\
							Вам осталось сидеть еще: "SERVER"%s"WHITE"\n\n\
							Выход на свободу: "GREEN"%s",
						ConvertTime(PI[playerid][JailTime]), ConvertTime(gettime(PI[playerid][JailTime])));
						SPD(playerid, dNull, d_info, ""WAR"Информация о заключении в Деморгане!", string, "Закрыть", "");
					}
					return 1;
				}
				//

				// Башни и двери для ВЧ
				if(GetFrac(playerid) != FRAC_VH && GetAdmin(playerid) <= 4) return 1;
				{
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1805.3136, 1672.7437, 15.2794)) //  Смотровая башня №1 (Низ)
					{
						SetPlayerPos(playerid, 1805.2692, 1673.6272, 25.4878);
						SetPlayerFacingAngle(playerid, 0);
						SetCameraBehindPlayer(playerid);
					}
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1770.8008, 1672.7437, 15.2794)) // Смотровая башня №2 (Низ)
					{
						SetPlayerPos(playerid, 1770.8403, 1673.6970, 25.4878);
						SetPlayerFacingAngle(playerid, 0);
						SetCameraBehindPlayer(playerid);
					}
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1728.4258, 1672.7437, 15.2794)) // Смотровая башня №3 (Низ)
					{
						SetPlayerPos(playerid, 1728.4008, 1673.8573, 25.4878);
						SetPlayerFacingAngle(playerid, 0);
						SetCameraBehindPlayer(playerid);
					}
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1693.7202, 1672.7437, 15.2794)) // Смотровая башня №4 (Низ)
					{
						SetPlayerPos(playerid, 1693.6285, 1673.7800, 25.4878);
						SetPlayerFacingAngle(playerid, 0);
						SetCameraBehindPlayer(playerid);
					}
					//
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1805.2692, 1673.6272, 25.4878)) //  Смотровая башня №1 (Вверх)
					{
						SetPlayerPos(playerid, 1805.3136, 1672.7437, 15.2794);
						SetPlayerFacingAngle(playerid, 180);
						SetCameraBehindPlayer(playerid);
					}
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1770.8403, 1673.6970, 25.4878)) // Смотровая башня №2 (Вверх)
					{
						SetPlayerPos(playerid, 1770.8008, 1672.7437, 15.2794);
						SetPlayerFacingAngle(playerid, 180);
						SetCameraBehindPlayer(playerid);
					}
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1728.4008, 1673.8573, 25.4878)) // Смотровая башня №3 (Вверх)
					{
						SetPlayerPos(playerid, 1728.4258, 1672.7437, 15.2794);
						SetPlayerFacingAngle(playerid, 180);
						SetCameraBehindPlayer(playerid);
					}
					if(IsPlayerInRangeOfPoint(playerid, 0.80, 1693.6285, 1673.7800, 25.4878)) // Смотровая башня №4 (Вверх)
					{
						SetPlayerPos(playerid, 1693.7202, 1672.7437, 15.2794);
						SetPlayerFacingAngle(playerid, 180);
						SetCameraBehindPlayer(playerid);
					}
					//
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1892.5326, 1701.0333, 16.0320)) // Дверь на башню 1
					{
						if(!StatusDoorVH[0])
						{
							StatusDoorVH[0] = true;
							MoveDynamicObject(DoorVH[0], 1892.6487, 1698.9954, 14.7633-0.012, 0.007, 0.0, 0.0, 180.0);
							SetPlayerChatBubble(playerid, "открывает дверь", cPURPLE, 13.0, 10000);
						}
						else
						{
							StatusDoorVH[0] = false;
							MoveDynamicObject(DoorVH[0], 1892.6487, 1698.9954, 14.7633+0.012, 0.007, 0.0, 0.0, 90.0);
							SetPlayerChatBubble(playerid, "закрывает дверь", cPURPLE, 13.0, 10000);
						}
					}
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1664.6079, 1700.4512, 15.6065)) // Дверь на башню 2
					{
						if(!StatusDoorVH[1])
						{
							StatusDoorVH[1] = true;
							MoveDynamicObject(DoorVH[1], 1664.4875, 1702.4840, 14.3351-0.012, 0.007, 0.0, 0.0, -90.0);
							SetPlayerChatBubble(playerid, "открывает дверь", cPURPLE, 13.0, 10000);
						}
						else
						{
							StatusDoorVH[1] = false;
							MoveDynamicObject(DoorVH[1], 1664.4875, 1702.4840, 14.3351+0.012, 0.007, 0.0, 0.0, 0.0);
							SetPlayerChatBubble(playerid, "закрывает дверь", cPURPLE, 13.0, 10000);
						}
					}
					// КПП
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1909.9719, 1715.2355, 16.8769)) // Дверь в КПП 1
					{
						if(!StatusDoorVH[2])
						{
							StatusDoorVH[2] = true;
							MoveDynamicObject(DoorVH[2], 1911.4810, 1716.0179, 15.7321-0.012, 0.007, 0.0, 0.0, -57.0);
							SetPlayerChatBubble(playerid, "открывает дверь", cPURPLE, 13.0, 10000);
						}
						else
						{
							StatusDoorVH[2] = false;
							MoveDynamicObject(DoorVH[2], 1911.4810, 1716.0179, 15.7321+0.012, 0.007, 0.0, 0.0, -180.0);
							SetPlayerChatBubble(playerid, "закрывает дверь", cPURPLE, 13.0, 10000);
						}
					}
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1909.9719, 1711.4275, 16.8769)) // Дверь в КПП 2
					{
						if(!StatusDoorVH[3])
						{
							StatusDoorVH[3] = true;
							MoveDynamicObject(DoorVH[3], 1911.5090, 1710.3090, 15.7321-0.012, 0.007, 0.0, 0.0, 57.0);
							SetPlayerChatBubble(playerid, "открывает дверь", cPURPLE, 13.0, 10000);
						}
						else
						{
							StatusDoorVH[3] = false;
							MoveDynamicObject(DoorVH[3], 1911.5090, 1710.3090, 15.7321+0.012, 0.007, 0.0, 0.0, 180.0);
							SetPlayerChatBubble(playerid, "закрывает дверь", cPURPLE, 13.0, 10000);
						}
					}
					//
				}
				//

				// Система ATM - Банкомата
				for(new a = 1; a <= TOTALATM; a++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2]))
					{
						/*if(timebank[playerid] < gettime())
						{
							for(i,28) PlayerTextDrawShow(playerid, keytext[i][playerid]);
							SelectTextDraw(playerid, cSERVER);
							PlayerTextDrawSetString(playerid, keytext[3][playerid], "_");
							PlayerTextDrawSetString(playerid, keytext[17][playerid], "отмена");
							PlayerTextDrawSetString(playerid, keytext[16][playerid], "далее");
							DeletePVar(playerid, "key_");
							keystats[playerid] = true;
							PutInfo[playerid] = 128;
						}
						else
						*/
						SetPVarInt(playerid, "ATM_ID", ATMInfo[a][aID]);
						return DialogATM_Menu(playerid);
					}
				}
				//

				// Система посадочных мест
				for(i, TOTALDOWNS)
				{
					if(IsPlayerInRangeOfPoint(playerid, 0.50, SeatI[i][SeatDownX], SeatI[i][SeatDownY], SeatI[i][SeatDownZ]))
					{
						SetPlayerPos(playerid, SeatI[i][SeatDownX], SeatI[i][SeatDownY], SeatI[i][SeatDownZ]);
						SetPlayerFacingAngle(playerid, SeatI[i][SeatDownA]);
						CheckAnims[playerid] = true;
						ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
						for(t, 1) PlayerTextDrawShow(playerid, Stop_anim_PTD[playerid][t]);
					}
				}
				//

				// Работа основные
				for(i,sizeof(JobPos))
				{
					if(IsPlayerInRangeOfPoint(playerid, 0.8, JobPos[i][job_posX], JobPos[i][job_posY], JobPos[i][job_posZ])) // Раздевалка
					{
						if(GetPVarInt(playerid, "antifloodduty") > gettime()) return 1;
						if(!PI[playerid][Job]) return 1;
						if(PI[playerid][Job] != JobPos[i][job_id]) return SEM(playerid, "Вы не работаете на данной работе!");
						{
							switch(JobPos[i][job_id])
							{
								case JOB_NONE: return 1;
								case JOB_AVTOBUS: // Водитель автобуса
								{
									return 1;
								}
								case JOB_TAXI: // Таксист
								{
									return 1;
								}
								case JOB_MEHANIC: // Механик
								{
									return 1;
								}
								case JOB_MYSORHIC: // Мусорщик
								{
									if(!JobDuty[playerid][PI[playerid][Job]])
									{
										JobDuty[playerid][PI[playerid][Job]] = true;
										SetPlayerSkin(playerid, 50);
										MeAction(playerid, "переоделся в рабочую одежду");
										SCMInfo(playerid, "Вы начяли рабочий день!");
									}
									else
									{
										JobDuty[playerid][PI[playerid][Job]] = false;
										SetPlayerSkin(playerid, PI[playerid][Skin]);
										MeAction(playerid, "переоделся в свою одежду");
										SCMInfo(playerid, "Вы завершили рабочий день!");
									}
									return 1;
								}
								case JOB_ELECTRIC: // Электрик
								{
									return 1;
								}
								case JOB_PILOT: // Пилот
								{
									return 1;
								}
								case JOB_DALNO: // Дальнобойщик
								{
									return 1;
								}
								case JOB_INCASATOR: // Инкасатор
								{
									if(!JobDuty[playerid][PI[playerid][Job]])
									{
										JobDuty[playerid][PI[playerid][Job]] = true;
										SetPlayerSkin(playerid, 78);
										MeAction(playerid, "переоделся в рабочую одежду");
										SCMInfo(playerid, "Вы начяли рабочий день!");
									}
									else
									{
										JobDuty[playerid][PI[playerid][Job]] = false;
										SetPlayerSkin(playerid, PI[playerid][Skin]);
										MeAction(playerid, "переоделся в свою одежду");
										SCMInfo(playerid, "Вы завершили рабочий день!");
									}
									return 1;
								}
							}
						}
						SetPVarInt(playerid, "antifloodduty", gettime()+2);
					}
				}
				//

				// Организации
				for(new i = 1; i <= TOTALFRAC; i ++)
				{
					// Вход в здание
					if(IsPlayerInRangeOfPoint(playerid, 1.0, FracI[i][fPosExit][0], FracI[i][fPosExit][1], FracI[i][fPosExit][2]))
					{
						SetPlayerPos(playerid, FracI[i][fPosEnter][0], FracI[i][fPosEnter][1], FracI[i][fPosEnter][2]);
						SetPlayerFacingAngle(playerid, FracI[i][fPosEnter][3]);
						SetPlayerInterior(playerid, FracI[i][fID]);
						SetPlayerVirtualWorld(playerid, FracI[i][fID]);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}

					// Выход из здания
					if(IsPlayerInRangeOfPoint(playerid, 1.0, FracI[i][fPosEnter][0], FracI[i][fPosEnter][1], FracI[i][fPosEnter][2]))
					{
						if(FracI[i][fID] == FRAC_SMP && PlayerDied[playerid] == true) return SEM(playerid, "Вы не можете покинуть больницу до полного выздаровления!");
						{
							SetPlayerPos(playerid, FracI[i][fPosExit][0], FracI[i][fPosExit][1], FracI[i][fPosExit][2]);
							SetPlayerFacingAngle(playerid, FracI[i][fPosExit][3]);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, 0);
							SetCameraBehindPlayer(playerid);
							FreezePlayer(playerid, 4500);
						}
					}

					// Раздевалка
					if(IsPlayerInRangeOfPoint(playerid, 1.0, FracI[i][fPosSkin][0], FracI[i][fPosSkin][1], FracI[i][fPosSkin][2]))
					{
						new string[200];
						if(!GetFrac(playerid) || FracI[i][fID] == FRAC_VH) return 1;
						if(GetPVarInt(playerid, "antifloodduty") > gettime()) return 1;
						if(GetFrac(playerid) != FracI[i][fID]) return SEM(playerid, "Вы не состоите в данной организации!");
						{
							if(!FracDuty[playerid][GetFrac(playerid)])
							{
								FracDuty[playerid][GetFrac(playerid)] = true;
								MeAction(playerid, "переоделся(-ась) в служебную форму");

								SetPlayerSkin(playerid, GetFracSkin(playerid)), SetPlayerColor(playerid, FracColor[GetFrac(playerid)]);
								string_f("[R] %s %s - Начал(-а) рабочий день", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
							}
							else
							{
								FracDuty[playerid][GetFrac(playerid)] = false;
								SetPlayerSkin(playerid, PI[playerid][Skin]);
								MeAction(playerid, "переоделся(-ась) в свою одежду");
								SetPlayerColor(playerid, cNone);
								if(FracMVD(playerid)) ResetPlayerWeapons(playerid);
								string_f("[R] %s %s - Завершил(-а) рабочий день", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
							}
							SetPVarInt(playerid, "antifloodduty", gettime()+2);
						}
					}

					// Оружейный склад
					if(IsPlayerInRangeOfPoint(playerid, 1.0, FracI[i][fPosGun][0], FracI[i][fPosGun][1], FracI[i][fPosGun][2]))
					{
						if(FracI[i][fID] != GetFrac(playerid)) return 1;
						else return DialogFracGun(playerid);
					}

					// Раздел информации
					if(IsPlayerInRangeOfPoint(playerid, 1.0, FracI[i][fPosInfo][0], FracI[i][fPosInfo][1], FracI[i][fPosInfo][2]))
					{
						return DialogFracInfo(playerid, i);
					}
					//
				}
				//

				// Система мусорок
				for(new i = 1; i <= TOTALMUSORKI; i++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.30, MI[i][mPos][0], MI[i][mPos][1], MI[i][mPos][2])) //
					{
						return SPD(playerid, dNull, d_info, ""SERVER"Мусорка", "Содержимое мусорки нет!", "Закрыть", "");
					}
				}
				//

				/* Работа шахтера - Лифт
				if(!JobMine[playerid]) return 1;
				{
					// Лифт и двери от него
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 2640.9312, 1772.9550, 3502.0022)) // Кнопка лифта сверху на шахте
					{
						if(!StatusLift) // Если лифт вверху
						{
							MoveDynamicObject(DoorsLiftUp[0], 2643.3054, 1776.5728, 3502.8611, 0.7);
							MoveDynamicObject(DoorsLiftUp[1], 2643.3054, 1773.3087, 3502.8611, 0.7);
						}
						if(StatusLift == 1) return SEM(playerid, "Ожидайте, лифт спускается в шахту."); // Если лифт спускается в шахту
						if(StatusLift == 3) return SEM(playerid, "Ожидайте, лифт уже поднимается."); // Если лифт уже поднимается
						if(StatusLift == 2) // Если лифт внизу
						{
							StatusLift = 3;
							SCMInfo(playerid, "Ожидайте, лифт поднимается к Вам!");
							MoveDynamicObject(DoorsLiftDown[0], 2643.3054, 1774.9408, 3426.8533, 5.0);
							MoveDynamicObject(DoorsLiftDown[1], 2643.3054, 1774.9407, 3426.8533, 5.0);

							MoveDynamicObject(LiftCabin, 2643.3535, 1774.9407, 3502.8911, 2.5);
							SetTimer("LiftMovedUp", 30000, false);
							// Таймер через которой при приезде откроеться вдери ливта сверху
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2643.8679, 1775.0392, 3502.0911) && !StatusLift) // Активация лифта для спуска в шахту
					{
						StatusLift = 1;
						MoveDynamicObject(DoorsLiftUp[0], 2643.3054, 1774.9408, 3502.8611, 0.7);
						MoveDynamicObject(DoorsLiftUp[1], 2643.3054, 1774.9407, 3502.8611, 0.7);
						SetTimer("LiftMovedDown1", 5000, false);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.5, 2640.9319, 1776.8918, 3426.0000)) // Кнопка лифта снизу на шахте
					{
						if(StatusLift == 1) return SEM(playerid, "Ожидайте, лифт уже спускается."); // Если лифт уже спускается в шахту
						if(!StatusLift) // Если лифт вверху
						{
							StatusLift = 1;
							SCMInfo(playerid, "Ожидайте, лифт спускается к Вам!");
							MoveDynamicObject(DoorsLiftUp[0], 2643.3054, 1774.9408, 3502.8611, 5.0);
							MoveDynamicObject(DoorsLiftUp[1], 2643.3054, 1774.9407, 3502.8611, 5.0);

							MoveDynamicObject(LiftCabin, 2643.3535, 1774.9407, 3426.8882, 2.5);
							SetTimer("LiftMovedDown", 30000, false);
							// Таймер через которой при приезде откроеться вдери ливта сверху
						}
						if(StatusLift == 3) return SEM(playerid, "Ожидайте, лифт поднимается на поверхность."); // Если лифт поднимается
						if(StatusLift == 2) // Если лифт внизу
						{
							MoveDynamicObject(DoorsLiftDown[0], 2643.3054, 1776.5728, 3426.8533, 0.7);
							MoveDynamicObject(DoorsLiftDown[1], 2643.3054, 1773.3087, 3426.8533, 0.7);
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2643.6179, 1775.0183, 3426.0881) && StatusLift == 2) // Активация лифта для подъема на поверхность
					{
						StatusLift = 3;
						MoveDynamicObject(DoorsLiftDown[0], 2643.3054, 1774.9408, 3426.8533, 0.7);
						MoveDynamicObject(DoorsLiftDown[1], 2643.3054, 1774.9407, 3426.8533, 0.7);
						SetTimer("LiftMovedUp1", 5000, false);
					}
				}
				*/
			}

			if(newkeys == KEY_YES) // Y
			{
				if(InviteFrac[playerid] != -1) // Принятие в организацию
				{
					getdate(day_s, month_s, year_s);
					new NumberPricaz = 1000+random(8999);

					if(PI[playerid][Job] != 0) PI[playerid][Job] = 0;

					MeAction(playerid, "подписал(-а) заявление и передал(-а) человеку на против");
					DoAction(playerid, "Заявление подписано датой и подпесью.");

					MeAction(InviteFrac[playerid], "взял(-а) подписанное заявление и ручку у человека на против");
					DoAction(InviteFrac[playerid], "Подписанное заявление с датой и подпесью в руке.");

					PI[playerid][Frac] = GetFrac(InviteFrac[playerid]);
					PI[playerid][FracRang] = 1;
					new string[512];
					string[0] = EOS;
					string_f("[R] %s %s подписал(-а) приказ о вступлении %s на должность - %s!",
						GetRangName[GetFrac(InviteFrac[playerid])][PI[InviteFrac[playerid]][FracRang]-1], GetName(InviteFrac[playerid]), GetName(playerid), GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1]);
					SCMFrac(GetFrac(playerid), cGREEN, string);

					string[0] = EOS;
					string_f("Принят%s на должность %s. Приказ: %i/%i", (PI[playerid][Sex]==1)?(""):("а"), GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], NumberPricaz, year_s);
					SetTK(playerid, string);
					PI[playerid][Spawn] = 1;
					// SpawnPlayer(playerid);
					InviteFrac[playerid] = INVALID_PLAYER_ID;
					return 1;
				}

				if(GetPVarInt(playerid, "StatusHeal") == 1) // Лечение
				{
					new targetid = GetPVarInt(playerid, "PlayerHeal"), price = GetPVarInt(playerid, "MoneyHeal");
					if(GetMoney(playerid) < price)
					{
						FSCM(targetid, cRED, "У игрока %s недостаточно средств!", GetName(playerid));
						DeletePVar(playerid, "PlayerHeal");
						DeletePVar(playerid, "MoneyHeal");
						DeletePVar(playerid, "StatusHeal");
						return SEM(playerid, "У Вас недостаточно денег!");
					}
					if(!PlayerDied[playerid]) PlayerDied[playerid] = true;
					if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid))) return SEM(playerid, "Игрок должен находится вместе с Вами в машине!");
					GiveMoney(playerid, -price);
					FracI[FRAC_SMP][fBank] += price;
					PI[playerid][Health] = 100;
					MedPland[targetid] -= 1;
					FSCM(targetid, -1, "Оставлось медикоментов: "SERVER"%i шт", MedPland[targetid]);
					SetPlayerHealth(playerid, PI[playerid][Health]);
					if(GetPlayerDrunkLevel(playerid) > 0) SetPlayerDrunkLevel(playerid, 0);
					FSCM(playerid, cGREEN, "%s %s вылечил Вас за %i рублей", GetRang(GetFrac(targetid), PI[targetid][FracRang]), GetName(targetid), price);
					FSCM(targetid, cGREEN, "Вы вылечили %s за %i рублей", GetName(playerid), price);
					DeletePVar(playerid, "PlayerHeal");
					DeletePVar(playerid, "MoneyHeal");
					DeletePVar(playerid, "StatusHeal");
					return 1;
				}
				if(GetPVarInt(playerid, "MedCardStatus") == 1) //
				{
					new targetid = GetPVarInt(playerid, "PlayerMedCard"), price = GetPVarInt(playerid, "MedCardCash");
					if(GetMoney(playerid) < price)
					{
						FSCM(targetid, cRED, "У игрока %s недостаточно средств!", GetName(playerid));
						DeletePVar(playerid, "MedCardStatus");
						DeletePVar(playerid, "MedCardCash");
						DeletePVar(playerid, "PlayerMedCard");
						return SEM(playerid, "У Вас недостаточно денег!");
					}
					GiveMoney(playerid, -price);
					FracI[FRAC_SMP][fBank] += price;
					// Выдать мед-карту

					new string[144], mdDay = 30;
					string_f("INSERT INTO "T_MEDCARD" (`mcName`, `mcData`, `mcStatus`, `mcDataClose`) VALUES ('%s', NOW(), 1, NOW() + INTERVAL %d DAY)", GetName(playerid), mdDay);
					mysql_query(mysql, string);

					if(!PI[playerid][MedCard]) PI[playerid][MedCard] = 1;
					update_int_mysql(T_PLAYER, "MedCard", PI[playerid][MedCard], "ID", PI[playerid][ID]);

					if(PI[playerid][MedCard])
					{
						new stringMedCard[100]; // Проверка на счет в банке
						format(stringMedCard, sizeof(stringMedCard), "SELECT * FROM "T_MEDCARD" WHERE `mcName` = '%s' AND `mcDataClose` > NOW()", GetName(playerid));
						mysql_tquery(mysql, stringMedCard, "LoadMedCard", "i", playerid);
					}

					DeletePVar(playerid, "PlayerMedCard");
					DeletePVar(playerid, "MedCardCash");
					DeletePVar(playerid, "MedCardStatus");
					return 1;
				}

				if(InviteFamily[playerid] != -1)
				{
					new i = InviteFamily[playerid];
					new Float:x,Float:y,Float:z;
					GetPlayerPos(i, x, y, z);
					if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
					{
						SEM(playerid, "Вы не рядом с игроком");
						InviteFamily[playerid] = -1;
						return 1;
					}
					PI[playerid][Family] = PI[i][Family];
					new string[150];
					string_f("%s | Приветствуем нового члена семьи %s", FamI[PI[i][Family]][famName], GetName(playerid));
					SCMFamily(PI[playerid][Family], string);
					FamI[PI[i][Family]][famMembers]++;

					update_int_mysql(T_PLAYER, "Family", PI[playerid][Family], "ID", PI[playerid][ID]);

					update_int_mysql(T_FAMILY, "famMembers", FamI[PI[i][Family]][famMembers], "famID", FamI[PI[i][Family]][famID]);
					InviteFamily[playerid] = InviteFamily[i] = -1;
				}
			}

			if(newkeys == KEY_NO) // N
			{
				if(StatusMapTP[playerid] == true)
				{
					if(!AI[playerid][aSetting][6]) return SEM(playerid, "Включите ТП по карте > /aset");
					{
						AllowAdminTeleport(true);
						SetPlayerPos(playerid, MapPos[playerid][0], MapPos[playerid][1], MapPos[playerid][2]);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetCameraBehindPlayer(playerid);

						StatusMapTP[playerid] = false;
						MapPos[playerid][0] = 0.0;
						MapPos[playerid][1] = 0.0;
						MapPos[playerid][2] = 0.0;
						return 1;
					}
				}

				callcmd::cancel(playerid);
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(!PlayerLogin[playerid]) return 1;
	{
	    PlayerAFK[playerid] = 0;

		if(PickupUp[playerid] != -1 && !IsPlayerInRangeOfPoint(playerid, 2.5, PickuPI[PickupUp[playerid]][PickX], PickuPI[PickupUp[playerid]][PickY], PickuPI[PickupUp[playerid]][PickZ])) PickupUp[playerid] = -1;

		if(GetPlayerMoney(playerid) != GetMoney(playerid))
		{
		    ResetPlayerMoney(playerid);
		    GivePlayerMoney(playerid, GetMoney(playerid));
		}
		//
		SetPVarInt(playerid, "NewPlayerAmmo", GetPlayerAmmo(playerid));
		if(GetPVarInt(playerid, "NewPlayerAmmo") != GetPVarInt(playerid, "PlayerAmmo"))
		{
		    OnPlayerAmmoChange(playerid, GetPVarInt(playerid, "NewPlayerAmmo"), GetPVarInt(playerid, "PlayerAmmo"));
		    SetPVarInt(playerid, "PlayerAmmo", GetPVarInt(playerid, "NewPlayerAmmo"));
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

/*
OnDialogResponse -
    Используется когда игрок нажимает на определенную кнопку в диалоговом окне.
*/
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		case dServerPass:
		{
		    if(!response) return Tkick(playerid);
			{
			    if(!(5 <= strlen(inputtext) <= 32))
			    {
				    SEM(playerid, "Укажите пароль от 5 до 32 символов!");
					return ServerTehRaboti(playerid);
				}
				for(new i; i < strlen(inputtext); i++)
				{
				    switch(inputtext[i])
				    {
				        case '0'..'9', 'A'..'Z', 'a'..'z',  'А'..'Я',  'а'..'я': continue;
				        default:
				        {
				    		SEM(playerid, "Пароль может содержать только латинские/кириллические символы и цыфры (Aa-Zz, Аа-Яя, 0-9)!");
							return ServerTehRaboti(playerid);
				        }
				    }
				}
				if(!GetString(inputtext, SI[sPassword])) return SEM(playerid, "Указанный Вами пароль неверный!"), Tkick(playerid);

				new string[150];
				string_f("SELECT * FROM "T_ACC_S" WHERE `acLogin` = '%s'", GetName(playerid));
				mysql_tquery(mysql, string, "CheckPlayerAcc", "i", playerid);
			}
		}
		case dRegPlayer:
		{
			new pass = strlen(inputtext);
			if(!response) return SEM(playerid, "Вы отменили регистрацию!"), Tkick(playerid);
			{
				if(!pass) // Поле для ввода пустое
				{
				    PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "Вы не указали пароль!");
					return DialogPlayerRegister(playerid);
	   			}
	   			if(!(6 <= pass <= 32)) // Колличество символов малое или большое!
				{
				    PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "Указанный Вами пароль меньше 6-ти или больше 32-ух символов!");
					return DialogPlayerRegister(playerid);
				}
				for(new i = pass; i != 0; --i) // Проверка на регистер ввода!
				{
				    switch(inputtext[i]) // проверка на русскую раскладку
				    {
				        case 'А'..'Я', 'а'..'я', ' ', '=':
				        {
				    		PlayerPlaySound(playerid, 1150,0,0,0);
							SEM(playerid, "Вы указали пароль на киррилице, укажите пароль на латинице!");
							return DialogPlayerRegister(playerid);
				        }
					}
				}
				strmid(AcI[playerid][acPassword], inputtext, 0, strlen(inputtext), 40);
            	DialogPlayerRegisterEmail(playerid);
			}
		}
		case dRegPlayerEmail:
		{
			if(!response) return SEM(playerid, "Вы отменили регистрацию!"), Tkick(playerid);
			{
                if(!strlen(inputtext) || strlen(inputtext) > 64)
				{
				    PlayerPlaySound(playerid, 1150,0,0,0);
			        SEM(playerid, "Вы указали почту более 64-ти символов!");
				    return DialogPlayerRegisterEmail(playerid);
				}
				for(new i = strlen(inputtext); i != 0; --i) // Проверка на регистер ввода!
				{
				    switch(inputtext[i])
				    {
				        case 'А'..'Я', 'а'..'я', ' ', '=':
				        {
				    		PlayerPlaySound(playerid, 1150,0,0,0);
					        SEM(playerid, "Вы указали почту на русском языке, смените расскладку!");
						    return DialogPlayerRegisterEmail(playerid);
				        }
			        }
				}
				new stringEmail[110];
			    format(stringEmail, sizeof(stringEmail), "SELECT * FROM "T_ACC_S" WHERE `acEmail` = '%s' LIMIT 1", inputtext);
				mysql_tquery(mysql, stringEmail, "CheckEmailAcc", "is", playerid, inputtext);
			}
		}
		case dRegPlayerEmailPass:
		{
			if(!response)
			{
			    DeletePVar(playerid, "RegMail");
				return DialogPlayerRegisterEmail(playerid);
			}
			else
			{
				new string[1024];
			    new MailCodes = strval(inputtext), GetCodeMail = GetPVarInt(playerid, "RegMailCode"), mails[32];
				if(GetCodeMail == MailCodes) // Код верный
				{
					GetPVarString(playerid, "RegMail", mails, sizeof(mails));
	                strmid(AcI[playerid][acEmail], mails, 0, strlen(mails), 32);
	                SCMInfo(playerid, "Вы успешно подтвердили Вашу почту!");
				    DeletePVar(playerid, "RegMail");
				    DeletePVar(playerid, "RegMailCode");
		    		DialogPlayerRegisterReferal(playerid);
	    		}
	    		else
	    		{
					if(!MailCodes || MailCodes > 6)
					{
						DeletePVar(playerid, "RegMailCode");
						/*
						new MaillCodes = 6 + random(1000000);
						format(stringMail, sizeof(stringMail), "Добро пожаловать на %s. Ваш код подтверждения - %i", SI[sName], MaillCodes);

						SendMail(mails, "support@redwich-rp.ru", "Подтверждение почты при регистрации!", "Redwich RolePlay - Mail Code", stringMail);

						GetPVarString(playerid, "RegMail", mails, sizeof(mails));
						SetPVarInt(playerid, "RegMailCode", MaillCodes);
						// FSCM(playerid, -1, "Код для подтверждения почты - %i", MaillCodes);
						*/
						string_f("{FFFFFF}На Вашу указанную почту "SERVER"%s{FFFFFF} выслан код подтверждения.\n\
						Обязательно проверьте папку "SERVER"СПАМ{FFFFFF}, бывает что туда приходит почта!\n\n\
						Укажите Ваш код ниже:", mails);
						return SPD(playerid, dRegPlayerEmailPass, d_input, "{FFFFFF}Регистрация | Подтверждение почты", string, "Далее >>", "Отмена");
					}
					if(GetCodeMail != MailCodes)
					{
						DeletePVar(playerid, "RegMailCode");
						/*
						new MaillCodes = 6 + random(1000000);
						format(stringMail, sizeof(stringMail), "Добро пожаловать на %s. Ваш код подтверждения - %i", SI[sName], MaillCodes);
						SendMail(mails, "support@redwich-rp.ru", "Подтверждение почты при регистрации!", "Redwich RolePlay - Mail Code", stringMail);

						GetPVarString(playerid, "RegMail", mails, sizeof(mails));
						SetPVarInt(playerid, "RegMailCode", MaillCodes);
						// FSCM(playerid, -1, "Код для подтверждения почты - %i", MaillCodes);
						*/
						string_f("{FFFFFF}На Вашу указанную почту "SERVER"%s{FFFFFF} выслан код подтверждения.\n\
						Обязательно проверьте папку "SERVER"СПАМ{FFFFFF}, бывает что туда приходит почта!\n\n\
						Укажите Ваш код ниже:", mails);
						return SPD(playerid, dRegPlayerEmailPass, d_input, "{FFFFFF}Регистрация | Подтверждение почты", string, "Далее >>", "Отмена");
					}
				}
			}
		}
		case dRegPlayerReferal:
		{
			if(!response)
			{
			    strmid(AcI[playerid][acReferal], "No Referal", 0, strlen("No Referal"), MAX_PLAYER_NAME);
				return DialogPlayerRegisterSex(playerid);
			}
			else
	        {
	            if(!strlen(inputtext))
				{
				    PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "Вы не указали Имя игрока реферала!");
					return DialogPlayerRegisterReferal(playerid);
				}
				for(new i = strlen(inputtext); i != 0; --i)
				{
				    switch(inputtext[i])
				    {
				        case 'А'..'Я', 'а'..'я', ' ', '=':
				        {
				    		PlayerPlaySound(playerid, 1150,0,0,0);
							SEM(playerid, "Имя реферала долно быть на лотинице!");
							return DialogPlayerRegisterReferal(playerid);
				        }
				    }
				}
				if(strlen(inputtext) < 5 || strlen(inputtext) > 24)
			    {
				    PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "Имя реферала должно быть от 5-ти до 24-ех символов!");
					return DialogPlayerRegisterReferal(playerid);
				}
			}
			DialogPlayerRegisterSex(playerid);
			/*
			new stringReferal[100];
			format(stringReferal, sizeof(stringReferal), "SELECT * FROM "T_ACC_S" WHERE `acLogin` = '%s' LIMIT 1", inputtext);
			mysql_tquery(mysql, stringReferal, "CheckReferalAcc", "is", playerid, inputtext);*/
		}
		case dRegPlayerSex:
		{
			if(!response) return DialogPlayerRegisterReferal(playerid);
			{
				switch(listitem)
				{
					case 0:
					{
						PI[playerid][Sex] = 1;
						new RandomSkinM[4] = {26,35,142,262}; //
						new RandomM = random(sizeof(RandomSkinM));
						PI[playerid][Skin] = RandomSkinM[RandomM];
					}
					case 1:
					{
						PI[playerid][Sex] = 2;
						new RandomSkinJ[3] = {65,69,193}; //
						new RandomJ = random(sizeof(RandomSkinJ));
						PI[playerid][Skin] = RandomSkinJ[RandomJ];
					}
				}
				return DialogCreatePlayer(playerid);
			}
		}
		case dPlayerLogin:
		{
			if(!response) // Отказ от Авторизации
		    {
		        SCM(playerid, cRED, "Вы отказались от авторизации Вашего аккаунта!");
				for(i, 4) PlayerTextDrawHide(playerid, LoginTime_PTD[playerid][i]);
		    	return Tkick(playerid);
		    }
			else
			{
				new string[256];
				if(!strlen(inputtext)) // Поле для ввода пустое
				{
					SEM(playerid, "Вы не указали пароль!");
					string_f("{FFFFFF}\
						Добро пожаловать на "SERVER"%s{FFFFFF}\n\n\
						Введите свой пароль\n\
						Попыток для ввода: "GREEN"%i", SI[sName], PasswordError[playerid]);
					return SPD(playerid, dPlayerLogin, d_pass, ""WHITE"Авторизация", string, "Ввести", "Отмена");
	   			}
	   			if(!(5 <= strlen(inputtext) <= 32)) // Колличество символов малое или большое!
				{
					SEM(playerid, "Указанный Вами пароль меньше 6-ти или больше 32-ух символов!");
					string_f("{FFFFFF}\
						Добро пожаловать на "SERVER"%s{FFFFFF}\n\n\
						Введите свой пароль\n\
						Попыток для ввода: "GREEN"%i", SI[sName], PasswordError[playerid]);
					return SPD(playerid, dPlayerLogin, d_pass, ""WHITE"Авторизация", string, "Ввести", "Отмена");
				}
				for(new i = strlen(inputtext); i != 0; --i) // Проверка на регистер ввода!
				{
				    switch(inputtext[i])
				    {
				        case 'А'..'Я', 'а'..'я', ' ', '=':
				        {
							SEM(playerid, "Вы указали пароль на киррилице, укажите пароль на латинице!");
							string_f("{FFFFFF}\
								Добро пожаловать на "SERVER"%s{FFFFFF}\n\n\
								Введите свой пароль\n\
								Попыток для ввода: "GREEN"%i", SI[sName], PasswordError[playerid]);
							return SPD(playerid, dPlayerLogin, d_pass, ""WHITE"Авторизация", string, "Ввести", "Отмена");
				        }
					}
				}
				string[0] = EOS;
				string_f("SELECT * FROM "T_ACC_S" WHERE `acLogin` = '%s' AND `acPassword` = md5('%s')", GetName(playerid), inputtext);
				mysql_tquery(mysql, string, "CheckPlayerPassword", "d", playerid);
			}
		}
		case dSetPin:
		{
			if(!response)
		    {
				SCMInfo(playerid, "Вы отказались от ввода защитного PIN кода!");
				SCM(playerid, cWAR, "Для выхода с сервера нажмите F6 и введите /q(uit).");
				return Tkick(playerid);
			}
			else
			{
				new pin = strval(inputtext);
				if(!pin)
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "Вы не ввели PIN код!");
					return SPD(playerid, dSetPin, d_input, ""SERVER"Защитный PIN код", ""WHITE"\
						Введите защитный "SERVER"PIN код"WHITE" для входа на сервер!",
					"Указать", "Отмена");
				}
				/*if(pin > 4)
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "PIN код состоить их 4-ёх цыфр!");
					return SPD(playerid, dSetPin, d_input, ""SERVER"Защитный PIN код", ""WHITE"\
						Введите защитный "SERVER"PIN код"WHITE" для входа на сервер!",
					"Указать", "Отмена");
				}*/
				if(AcI[playerid][acPinCode] != pin)
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					SEM(playerid, "PIN код не верный!");
					return SPD(playerid, dSetPin, d_input, ""SERVER"Защитный PIN код", ""WHITE"\
						Введите защитный "SERVER"PIN код"WHITE" для входа на сервер!",
					"Указать", "Отмена");
				}
				new stringupdate[256];
				// GetPlayerIp(playerid, ip, sizeof(ip));

				GetPlayerSubnet(playerid, AcI[playerid][acLastIP], 9);
				format(stringupdate, sizeof(stringupdate), "UPDATE "T_ACC_S" SET `acLastIP` = '%s', `acLastData` = NOW() WHERE `acLogin` = '%s'", AcI[playerid][acLastIP], GetName(playerid));
				mysql_query(mysql, stringupdate);

				new string[100];
				format(string, sizeof(string),"SELECT * FROM "T_ACC_S" WHERE `acLogin` = '%s'", GetName(playerid));
				mysql_tquery(mysql, string, "LoadAccPlayer", "i", playerid);
			}
		}
		case dPlayerSpawn:
		{
			if(!response) return 1;
		    {
		        switch(listitem)
		        {
		            case 0: // На вокзале
		            {
		                if(PI[playerid][Jail] > 0) return SpawnPlayer(playerid);
		                {
		                	PI[playerid][Spawn] = 1;
			         		SpawnPlayer(playerid);
		            	}
					}
					case 1:
					{
					    if(PI[playerid][Jail] > 0) return SpawnPlayer(playerid);
						{
							DialogPlayerSpawn(playerid);
							return SEM(playerid, "Вы не владеете домом!");
						}
					}
		            case 2: // На базе организации
					{
					    if(PI[playerid][Jail] > 0) return SpawnPlayer(playerid);
						{
							if(GetFrac(playerid))
						    {
						    	PI[playerid][Spawn] = 3;
				                SpawnPlayer(playerid);
							}
	        				else
							{
								DialogPlayerSpawn(playerid);
								return SEM(playerid, "Вы не состоите в организации!");
							}
						}
		            }
					case 3: // Где вышел
				    {
				        if(PI[playerid][Jail] > 0) return SpawnPlayer(playerid);
				        if(PI[playerid][Pos][0] == 0 && PI[playerid][Pos][1] == 0 && PI[playerid][Pos][2] == 0)
						{
							DialogPlayerSpawn(playerid);
						    return SEM(playerid, "Ваши координаты не сохранены!");
						}
						else
				        {
							PI[playerid][Spawn] = 4;
			                SpawnPlayer(playerid);
						}
					}
					/*
					case 4: return DialogPlayerSpawn(playerid);
					case 5: callcmd::az(playerid);
					*/
				}
		    }
		}
		// Главные настройки сервера
		case dSettingServerMenu: // Меню
	    {
	        if(!response)return 1;
	        {
				new string[512];
				switch(listitem)
				{
				    case 0: // Название проекта
				    {
						string_f("{FFFFFF}\
							Укажите новое название проекта.\n\n\
							Название проекта должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"32-ух{FFFFFF} символов.\n\
							Название проекта не долно содержать оскорбительной формы.\n\n\
							Текущее название проекта: "SERVER"%s",
						SI[sName]);
						SPD(playerid, dSettingServerNameProject, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название проекта", string, "Сменить", "<< Назад");
					}
				    case 1: // Номер сервера
				    {
						string_f("{FFFFFF}\
							Укажите новый номер сервера.\n\n\
							Текущий номер сервера: "SERVER"%i",
						SI[sNumber]);
						SPD(playerid, dSettingServerNumber, d_input, "{FFFFFF}Панель разработчика | "SERVER"Номер сервера", string, "Сменить", "<< Назад");
					}
				    case 2: // Название сервера
				    {
						string_f("{FFFFFF}\
							Укажите новое название сервера.\n\n\
							Название сервера должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"12-ух{FFFFFF} символов.\n\
							Название сервера не долно содержать оскорбительной формы.\n\n\
							Текущее название сервера: "SERVER"%s",
						SI[sNameServer]);
						SPD(playerid, dSettingServerName, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название сервера", string, "Сменить", "<< Назад");
					}
				    case 3: // Название обновления
				    {
				        new stringObnova[32];
				        if(GetString(SI[sObnova], "None")) stringObnova = ""GREEN"Отсутствует";
        				else format(stringObnova, sizeof(stringObnova), "%s", SI[sObnova]);

						string_f("{FFFFFF}\
							Укажите новое название обновления.\n\n\
							Название обновления должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"32-ух{FFFFFF} символов.\n\
							Название обновления не долно содержать оскорбительной формы.\n\
							Укажите "SERVER"None{FFFFFF} если хотите снять убрать название обновления.\n\n\
							Текущее название обновления: "SERVER"%s",
						stringObnova);
						SPD(playerid, dSettingServerNameUpdate, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название обновления", string, "Сменить", "<< Назад");
					}
				    case 4: // Версия обновления
				    {
						string_f("{FFFFFF}\
							Укажите новую версию обновления.\n\n\
							Версия обновления должна быть пример: "SERVER"v 0.0.1\n\
							Текущая версия обновления: "SERVER"%s",
						SI[sVersion]);
						SPD(playerid, dSettingServerUpdate, d_input, "{FFFFFF}Панель разработчика | "SERVER"Версия обновления", string, "Сменить", "<< Назад");
					}
				    case 5: // Сайт проекта
				    {
						string_f("{FFFFFF}\
							Укажите новый "SERVER"URL{FFFFFF} сайта проекта.\n\
							"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
							Текущий "SERVER"URL{FFFFFF} сайта проекта: "SERVER"%s",
						SI[sWeb]);
						SPD(playerid, dSettingServerWeb, d_input, "{FFFFFF}Панель разработчика | "SERVER"Сайт проекта", string, "Сменить", "<< Назад");
					}
				    case 6: // Сайт доната проекта
				    {
						string_f("{FFFFFF}\
							Укажите новый "SERVER"URL{FFFFFF} сайта с донатом проекта.\n\
							"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
							Текущий "SERVER"URL{FFFFFF} сайта с донатом проекта: "SERVER"%s",
						SI[sDonate]);
						SPD(playerid, dSettingServerWebDonat, d_input, "{FFFFFF}Панель разработчика | "SERVER"Сайт доната проекта", string, "Сменить", "<< Назад");
					}
				    case 7: // Форум проекта
				    {
						string_f("{FFFFFF}\
							Укажите новый "SERVER"URL{FFFFFF} форума проекта.\n\
							"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
							Текущий "SERVER"URL{FFFFFF} форума проекта: "SERVER"%s",
						SI[sForum]);
						SPD(playerid, dSettingServerForum, d_input, "{FFFFFF}Панель разработчика | "SERVER"Форум проекта", string, "Сменить", "<< Назад");
					}
				    case 8: // Группа ВКонтакте проекта
				    {
						string_f("{FFFFFF}\
							Укажите новый "SERVER"URL{FFFFFF} группы "SERVER"ВК{FFFFFF} проекта.\n\
							"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
							Текущий "SERVER"URL{FFFFFF} группы "SERVER"ВК{FFFFFF} проекта: "SERVER"%s",
						SI[sGroup]);
						SPD(playerid, dSettingServerGroup, d_input, "{FFFFFF}Панель разработчика | "SERVER"Группа ВКонтакте проекта", string, "Сменить", "<< Назад");
					}
				    case 9: // Название карты
				    {
						string_f("{FFFFFF}\
							Укажите новое название карты.\n\n\
							Название карты должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"12-ух{FFFFFF} символов.\n\
							Название карты не долно содержать оскорбительной формы.\n\n\
							Текущее название карты: "SERVER"%s",
						SI[sMapName]);
						SPD(playerid, dSettingServerNameMap, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название карты", string, "Сменить", "<< Назад");
					}
				    case 10: return callcmd::ss(playerid); // Язык
				    case 11: // Пароль сервера
				    {
						new stringPass[32];
						if(GetString(SI[sPassword], "None")) stringPass = ""GREEN"Отсутствует";
				        else format(stringPass, sizeof(stringPass), "%s", SI[sPassword]);

						string_f("{FFFFFF}\
							Укажите новый пароль сервера.\n\
							Пароль сервера нужен для закрытия сервера при вводе нового обновления.\n\
							Так-же пароль необходим для технических работ на сервере.\n\n\
	      					Паротль должен быть только из латинских ("SERVER"En{FFFFFF}) символов и цыфр от "SERVER"5-ти{FFFFFF} до "SERVER"32-ух{FFFFFF} символов.\n\
		  					Укажите "SERVER"None{FFFFFF} если хотите снять пароль с сервера.\n\n\
							Текущий пароль от сервера: "SERVER"%s",
						stringPass);
						SPD(playerid, dSettingServerPassword, d_input, "{FFFFFF}Панель разработчика | "SERVER"Пароль сервера", string, "Сменить", "<< Назад");
					}
				    case 12: // Бонусные деньги
				    {
						string_f("{FFFFFF}\
							Укажите новую сумму бонусных рублей.\n\
							Бонусные деньги выдаются игрокам при регистрации.\n\n\
							Сумма должна быть от "GREEN"0 рублей{FFFFFF} до "GREEN"1.500.000 рублей{FFFFFF}\n\n\
							Текущая сумма бонусных рублей: "GREEN"%s рублей",
						ConvertCash(SI[sBonusMoney]));
						SPD(playerid, dSettingServerBonusCash, d_input, "{FFFFFF}Панель разработчика | "SERVER"Бонусные деньги", string, "Сменить", "<< Назад");
					}
				    case 13: // Бонусный уровень
				    {
						string_f("{FFFFFF}\
							Укажите новый бонусный уровень.\n\
							Бонусный уровень выдаётся игрокам при регистрации.\n\n\
							Бонусный уровень должен быть от "SERVER"1{FFFFFF} до "SERVER"10{FFFFFF}\n\n\
							Текущий бонусный уровень: "SERVER"%i",
						SI[sBonusLevel]);
						SPD(playerid, dSettingServerBonusLevel, d_input, "{FFFFFF}Панель разработчика | "SERVER"Бонусный уровень", string, "Сменить", "<< Назад");
					}
				    case 14: // Бонусный донат
				    {
						string_f("{FFFFFF}\
							Укажите новую сумму бонусного доната.\n\
							Бонусный донат выдаются игрокам при регистрации.\n\n\
							Сумма должна быть от "SERVER"500 ДО{FFFFFF} до "SERVER"1.500 ДО{FFFFFF}\n\n\
							Текущая сумма бонусного доната: "SERVER"%s ДО",
						ConvertCash(SI[sBonusDonat]));
						SPD(playerid, dSettingServerBonusDonat, d_input, "{FFFFFF}Панель разработчика | "SERVER"Бонусный донат", string, "Сменить", "<< Назад");
					}
				    case 15: // Удвоение на сервере
				    {
						string_f("{FFFFFF}\
						X1\n\
						X2\n\
						X3\n\
						X4",
						SI[sX_Server]);
						SPD(playerid, dSettingServerXServer, d_list, "{FFFFFF}Панель разработчика | "SERVER"Удвоение на сервере", string, "Сменить", "<< Назад");
					}
				    case 16: // Удвоение опыта
				    {
						string_f("{FFFFFF}\
						X1\n\
						X2\n\
						X3\n\
						X4",
						SI[sX_Exp]);
						SPD(playerid, dSettingServerXexp, d_list, "{FFFFFF}Панель разработчика | "SERVER"Удвоение опыта", string, "Сменить", "<< Назад");
					}
				    case 17: // Удвоение зарплат на работах
				    {
						string_f("{FFFFFF}\
						X1\n\
						X2\n\
						X3\n\
						X4",
						SI[sX_JobPay]);
						SPD(playerid, dSettingServerXjobPay, d_list, "{FFFFFF}Панель разработчика | "SERVER"Удвоение зарплат на работах", string, "Сменить", "<< Назад");
					}
				    case 18: // Удвоение зарплат в организациях
				    {
						string_f("{FFFFFF}\
						X1\n\
						X2\n\
						X3\n\
						X4",
						SI[sX_PayDay]);
						SPD(playerid, dSettingServerXfracPay, d_list, "{FFFFFF}Панель разработчика | "SERVER"Удвоение зарплат в организациях", string, "Сменить", "<< Назад");
					}
				    case 19: // Удвоение доната
				    {
						string_f("{FFFFFF}\
						X1\n\
						X2\n\
						X3\n\
						X4",
						SI[sX_Donat]);
						SPD(playerid, dSettingServerXdonat, d_list, "{FFFFFF}Панель разработчика | "SERVER"Удвоение доната", string, "Сменить", "<< Назад");
					}
					case 20: // Праздничный Ивент
					{
						if(!SI[sEvent])
                        {
                            SI[sEvent] = 1; // Новый год
                            #include "../include/Map/Event/New_Year.inc" // -
						}
                        else if(SI[sEvent] == 1)
                        {
                            SI[sEvent] = 2; // 9 Мая
                            #include "../include/Map/Event/9_May.inc" // -
						}
                        else if(SI[sEvent] == 2)
                        {
                            SI[sEvent] = 3; // Хэллоуин
                            #include "../include/Map/Event/Halloween.inc" // -
						}
                        else if(SI[sEvent] == 3)
                        {
                            SI[sEvent] = 0; // Отключить
						}
		                update_int_mysql(T_SERVER, "sEvent", SI[sEvent], "sNumber", 1);
		                return callcmd::ss(playerid);
					}
					case 21,22: return callcmd::ss(playerid); //
					case 23: // Шахта - склад
					{
						return callcmd::ss(playerid);
					}
					case 24: // Шахта - вагон
					{
						return callcmd::ss(playerid);
					}
 				}
			}
		}
		case dSettingServerNameProject: // Название проекта
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameProject = strlen(inputtext);
				if(!(4 <= NameProject <= 32))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новое название проекта.\n\n\
						Название проекта должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"32-ух{FFFFFF} символов.\n\
						Название проекта не долно содержать оскорбительной формы.\n\n\
						Текущее название проекта: "SERVER"%s",
					SI[sName]);
					return SPD(playerid, dSettingServerNameProject, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название проекта", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили название проекта с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sName], inputtext);

				new nam[80];
				SetString(SI[sName], inputtext);
                update_str_mysql(T_SERVER, "sName", SI[sName], "sNumber", 1);

				if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] == 1) format(nam, sizeof(nam), "hostname %s | %s", SI[sName], SI[sObnova]); // Название проекта
			    else if(GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | X%i PayDay", SI[sName], SI[sX_PayDay]);
			    else if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | %s | X%i PayDay", SI[sName], SI[sObnova], SI[sX_PayDay]); // Название проекта
				else format(nam, sizeof(nam), "hostname %s", SI[sName]);
				SendRconCommand(nam);
			}
		}
	    case dSettingServerNumber: // Номер сервера
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new ServerNumber = strval(inputtext);
				if(!(1 <= ServerNumber <= 5))
				{
				    new string[1024];
					string_f("{FFFFFF}\
						Укажите новый номер сервера.\n\n\
						Текущий номер сервера: "SERVER"%i",
					SI[sNumber]);
					return SPD(playerid, dSettingServerNumber, d_input, "{FFFFFF}Панель разработчика | "SERVER"Номер сервера", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили номер сервера с "SERVER"%i{FFFFFF} на "GREEN"%i{FFFFFF}", SI[sNumber], ServerNumber);
				SI[sNumber] = ServerNumber;
                update_int_mysql(T_SERVER, "sNumber", SI[sNumber], "sNumber", 1);
			}
		}
	    case dSettingServerName: // Название сервера
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameServer = strlen(inputtext);
				if(!(4 <= NameServer <= 32))
				{
				    new string[1024];
					string_f("{FFFFFF}\
						Укажите новое название сервера.\n\n\
						Название сервера должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"12-ух{FFFFFF} символов.\n\
						Название сервера не долно содержать оскорбительной формы.\n\n\
						Текущее название сервера: "SERVER"%s",
					SI[sNameServer]);
					return SPD(playerid, dSettingServerName, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название сервера", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили название сервера с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sNameServer], inputtext);
				SetString(SI[sNameServer], inputtext);

                update_str_mysql(T_SERVER, "sNameServer", SI[sNameServer], "sNumber", 1);
			}
		}
	    case dSettingServerNameUpdate: // Название обновления
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameUpdate = strlen(inputtext);
				if(!(4 <= NameUpdate <= 32))
				{
				    new string[1024], stringObnova[32];
			        if(GetString(SI[sObnova], "None")) stringObnova = ""GREEN"Отсутствует";
    				else format(stringObnova, sizeof(stringObnova), "%s", SI[sObnova]);

                    string_f("{FFFFFF}\
						Укажите новое название обновления.\n\n\
						Название обновления должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"32-ух{FFFFFF} символов.\n\
						Название обновления не долно содержать оскорбительной формы.\n\
						Укажите "SERVER"None{FFFFFF} если хотите снять убрать название обновления.\n\n\
						Текущее название обновления: "SERVER"%s",
					stringObnova);
					return SPD(playerid, dSettingServerNameUpdate, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название обновления", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили название обновления с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sObnova], inputtext);
				SetString(SI[sObnova], inputtext);
                update_str_mysql(T_SERVER, "sObnova", inputtext, "sNumber", 1);

				new nam[80];
				if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] == 1) format(nam, sizeof(nam), "hostname %s | %s", SI[sName], SI[sObnova]); // Название проекта
			    else if(GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | X%i PayDay", SI[sName], SI[sX_PayDay]);
			    else if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | %s | X%i PayDay", SI[sName], SI[sObnova], SI[sX_PayDay]); // Название проекта
				else format(nam, sizeof(nam), "hostname %s", SI[sName]);
				SendRconCommand(nam);
			}
		}
		case dSettingServerUpdate: // Версия обновления
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameVersion = strlen(inputtext);
				if(!(6 <= NameVersion <= 12))
				{
				    new string[1024];
					string_f("{FFFFFF}\
						Укажите новую версию обновления.\n\n\
						Версия обновления должна быть пример: "SERVER"v 0.0.1\n\
						Текущая версия обновления: "SERVER"%s",
					SI[sVersion]);
					return SPD(playerid, dSettingServerUpdate, d_input, "{FFFFFF}Панель разработчика | "SERVER"Версия обновления", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили версию обновления с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sVersion], inputtext);
				new ver[32];
				SetString(SI[sVersion], inputtext);
                update_str_mysql(T_SERVER, "sVersion", SI[sVersion], "sNumber", 1);
				format(ver, sizeof(ver), "%s", SI[sVersion]);
				SetGameModeText(ver); // Версия обновления - мода
			}
		}
	    case dSettingServerWeb: // Сайт проекта
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameWeb = strlen(inputtext);
				if(!(6 <= NameWeb <= 32))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новый "SERVER"URL{FFFFFF} сайта проекта.\n\
						"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
						Текущий "SERVER"URL{FFFFFF} сайта проекта: "SERVER"%s",
					SI[sWeb]);
					return SPD(playerid, dSettingServerWeb, d_input, "{FFFFFF}Панель разработчика | "SERVER"Сайт проекта", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили URL сайта проекта с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sWeb], inputtext);
				new web[32];
				SetString(SI[sWeb], inputtext);
                update_str_mysql(T_SERVER, "sWeb", SI[sWeb], "sNumber", 1);
				format(web, sizeof(web), "weburl %s", SI[sWeb]);
				SendRconCommand(web); // URL сайта проекта
			}
		}
	    case dSettingServerWebDonat: // Сайт доната проекта
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameWebDonat = strlen(inputtext);
				if(!(6 <= NameWebDonat <= 32))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новый "SERVER"URL{FFFFFF} сайта с донатом проекта.\n\
						"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
						Текущий "SERVER"URL{FFFFFF} сайта с донатом проекта: "SERVER"%s",
					SI[sDonate]);
					return SPD(playerid, dSettingServerWebDonat, d_input, "{FFFFFF}Панель разработчика | "SERVER"Сайт доната проекта", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили URL сайта с донатом проекта с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sDonate], inputtext);
				SetString(SI[sDonate], inputtext);
                update_str_mysql(T_SERVER, "sDonate", SI[sDonate], "sNumber", 1);
			}
		}
	    case dSettingServerForum: // Форум проекта
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameForum = strlen(inputtext);
				if(!(6 <= NameForum <= 32))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новый "SERVER"URL{FFFFFF} форума проекта.\n\
						"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
						Текущий "SERVER"URL{FFFFFF} форума проекта: "SERVER"%s",
					SI[sForum]);
					return SPD(playerid, dSettingServerForum, d_input, "{FFFFFF}Панель разработчика | "SERVER"Форум проекта", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили URL форума проекта с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sForum], inputtext);
				SetString(SI[sForum], inputtext);
                update_str_mysql(T_SERVER, "sForum", SI[sForum], "sNumber", 1);
			}
		}
	    case dSettingServerGroup: // Группа ВКонтакте проекта
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameGroup = strlen(inputtext);
				if(!(6 <= NameGroup <= 32))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новый "SERVER"URL{FFFFFF} группы "SERVER"ВК{FFFFFF} проекта.\n\
						"SERVER"URL{FFFFFF} не должен содержать следующие элементы ("SERVER"http://{FFFFFF} или "SERVER"https://{FFFFFF}).\n\n\
						Текущий "SERVER"URL{FFFFFF} группы "SERVER"ВК{FFFFFF} проекта: "SERVER"%s",
					SI[sGroup]);
					return SPD(playerid, dSettingServerGroup, d_input, "{FFFFFF}Панель разработчика | "SERVER"Группа ВКонтакте проекта", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили URL группы ВК проекта с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sGroup], inputtext);
				SetString(SI[sGroup], inputtext);
                update_str_mysql(T_SERVER, "sGroup", SI[sGroup], "sNumber", 1);
			}
		}
	    case dSettingServerNameMap: // Название карты
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new NameMap = strlen(inputtext);
				if(!(4 <= NameMap <= 12))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новое название карты.\n\n\
						Название карты должно быть от "SERVER"4-ех{FFFFFF} до "SERVER"12-ух{FFFFFF} символов.\n\
						Название карты не долно содержать оскорбительной формы.\n\n\
						Текущее название карты: "SERVER"%s",
					SI[sMapName]);
					return SPD(playerid, dSettingServerNameMap, d_input, "{FFFFFF}Панель разработчика | "SERVER"Название карты", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили название карты с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sMapName], inputtext);
				new map[32];
				SetString(SI[sMapName], inputtext);
                update_str_mysql(T_SERVER, "sMapName", SI[sMapName], "sNumber", 1);
				format(map, sizeof(map), "mapname %s", SI[sMapName]);
				SendRconCommand(map); // Название карты
			}
		}
	    case dSettingServerPassword: // Пароль сервера
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new ServerPass = strlen(inputtext);
				if(!(4 <= ServerPass <= 32))
				{
				    new string[1024], stringPass[32];
					if(GetString(SI[sPassword], "None")) stringPass = ""GREEN"Отсутствует";
			        else format(stringPass, sizeof(stringPass), "%s", SI[sPassword]);

					string_f("{FFFFFF}\
						Укажите новый пароль сервера.\n\
						Пароль сервера нужен для закрытия сервера при вводе нового обновления.\n\
						Так-же пароль необходим для технических работ на сервере.\n\n\
      					Паротль должен быть только из латинских ("SERVER"En{FFFFFF}) символов и цыфр от "SERVER"5-ти{FFFFFF} до "SERVER"32-ух{FFFFFF} символов.\n\
	  					Укажите "SERVER"None{FFFFFF} если хотите снять пароль с сервера.\n\
						Текущий пароль от сервера: "SERVER"%s",
					stringPass);
					return SPD(playerid, dSettingServerPassword, d_input, "{FFFFFF}Панель разработчика | "SERVER"Пароль сервера", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно сменили пароль сервера с "SERVER"%s{FFFFFF} на "GREEN"%s{FFFFFF}", SI[sPassword], inputtext);
				SetString(SI[sPassword], inputtext);
                update_str_mysql(T_SERVER, "sPassword", SI[sPassword], "sNumber", 1);
			}
		}
	    case dSettingServerBonusCash: // Бонусные деньги
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new BonusMoney = strval(inputtext);
				if(!(0 <= BonusMoney <= 1500000))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новую сумму бонусных рублей.\n\
						Бонусные деньги выдаются игрокам при регистрации.\n\n\
						Сумма должна быть от "GREEN"0 рублей{FFFFFF} до "GREEN"1.500.000 рублей{FFFFFF}\n\n\
						Текущая сумма бонусных рублей: "GREEN"%s рублей",
					ConvertCash(SI[sBonusMoney]));
					return SPD(playerid, dSettingServerBonusCash, d_input, "{FFFFFF}Панель разработчика | "SERVER"Бонусные деньги", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно изменили сумму бонусных рублей с "SERVER"%s рублей{FFFFFF} на "GREEN"%s рублей{FFFFFF}", ConvertCash(SI[sBonusMoney]), ConvertCash(BonusMoney));
				SI[sBonusMoney] = BonusMoney;
                update_int_mysql(T_SERVER, "sBonusMoney", SI[sBonusMoney], "sNumber", 1);
			}
		}
	    case dSettingServerBonusLevel: // Бонусный уровень
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new BonusLevel = strval(inputtext);
				if(!(1 <= BonusLevel <= 10))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новый бонусный уровень.\n\
						Бонусный уровень выдаётся игрокам при регистрации.\n\n\
						Бонусный уровень должен быть от "SERVER"1{FFFFFF} до "SERVER"10{FFFFFF}\n\n\
						Текущий бонусный уровень: "SERVER"%i",
					SI[sBonusLevel]);
					return SPD(playerid, dSettingServerBonusLevel, d_input, "{FFFFFF}Панель разработчика | "SERVER"Бонусный уровень", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно изменили бонусный уровень с "SERVER"%i{FFFFFF} на "GREEN"%i{FFFFFF}", SI[sBonusLevel], BonusLevel);
				SI[sBonusLevel] = BonusLevel;
                update_int_mysql(T_SERVER, "sBonusLevel", SI[sBonusLevel], "sNumber", 1);
			}
		}
	    case dSettingServerBonusDonat: // Бонусный донат
	    {
            if(!response) return callcmd::ss(playerid);
			{
				new BonusDonat = strval(inputtext);
				if(!(0 <= BonusDonat <= 1500))
				{
				    new string[1024];
                    string_f("{FFFFFF}\
						Укажите новую сумму бонусного доната.\n\
						Бонусный донат выдаются игрокам при регистрации.\n\n\
						Сумма должна быть от "SERVER"1 ДО{FFFFFF} до "SERVER"1.500 ДО{FFFFFF}\n\n\
						Текущая сумма бонусного доната: "SERVER"%s ДО",
					ConvertCash(SI[sBonusDonat]));
					return SPD(playerid, dSettingServerBonusDonat, d_input, "{FFFFFF}Панель разработчика | "SERVER"Бонусный донат", string, "Сменить", "<< Назад");
				}
				FSCM(playerid, -1, "Вы успешно изменили бонусный донат с "SERVER"%s ДО{FFFFFF} на "GREEN"%s ДО{FFFFFF}", ConvertCash(SI[sBonusDonat]), ConvertCash(BonusDonat));
				SI[sBonusDonat] = BonusDonat;
                update_int_mysql(T_SERVER, "sBonusDonat", SI[sBonusDonat], "sNumber", 1);
			}
		}
	    case dSettingServerXServer: // Удвоение на сервере
	    {
            if(!response) return callcmd::ss(playerid);
			{
				FSCM(playerid, -1, "Вы успешно изменили удвоение на сервере с "SERVER"X%i{FFFFFF} на "GREEN"X%i{FFFFFF}", SI[sX_Server], listitem+1);
                SI[sX_Server] = SI[sX_Exp] = SI[sX_JobPay] = SI[sX_PayDay] = SI[sX_Donat] = listitem+1;
                update_int_mysql(T_SERVER, "sX_Server", SI[sX_Server], "sNumber", 1);
                update_int_mysql(T_SERVER, "sX_Exp", SI[sX_Exp], "sNumber", 1);
                update_int_mysql(T_SERVER, "sX_JobPay", SI[sX_JobPay], "sNumber", 1);
                update_int_mysql(T_SERVER, "sX_PayDay", SI[sX_PayDay], "sNumber", 1);
                update_int_mysql(T_SERVER, "sX_Donat", SI[sX_Donat], "sNumber", 1);

                new nam[80];
				if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] == 1) format(nam, sizeof(nam), "hostname %s | %s", SI[sName], SI[sObnova]); // Название проекта
			    else if(GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | X%i PayDay", SI[sName], SI[sX_PayDay]);
			    else if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | %s | X%i PayDay", SI[sName], SI[sObnova], SI[sX_PayDay]); // Название проекта
				else format(nam, sizeof(nam), "hostname %s", SI[sName]);
				SendRconCommand(nam);

                return callcmd::ss(playerid);
			}
		}
	    case dSettingServerXexp: // Удвоение опыта
	    {
            if(!response) return callcmd::ss(playerid);
			{
				FSCM(playerid, -1, "Вы успешно изменили удвоение опыта с "SERVER"X%i{FFFFFF} на "GREEN"X%i{FFFFFF}", SI[sX_Exp], listitem+1);
                SI[sX_Exp] = listitem+1;
                update_int_mysql(T_SERVER, "sX_Exp", SI[sX_Exp], "sNumber", 1);
                return callcmd::ss(playerid);
			}
		}
	    case dSettingServerXjobPay: // Удвоение зарплат на работах
	    {
            if(!response) return callcmd::ss(playerid);
			{
				FSCM(playerid, -1, "Вы успешно изменили удвоение зарплат на работах с "SERVER"X%i{FFFFFF} на "GREEN"X%i{FFFFFF}", SI[sX_JobPay], listitem+1);
                SI[sX_JobPay] = listitem+1;
                update_int_mysql(T_SERVER, "sX_JobPay", SI[sX_JobPay], "sNumber", 1);
                return callcmd::ss(playerid);
			}
		}
	    case dSettingServerXfracPay: // Удвоение зарплат в организациях
	    {
            if(!response) return callcmd::ss(playerid);
			{
				FSCM(playerid, -1, "Вы успешно изменили удвоение зарплат в организациях с "SERVER"X%i{FFFFFF} на "GREEN"X%i{FFFFFF}", SI[sX_PayDay], listitem+1);
                SI[sX_PayDay] = listitem+1;
                update_int_mysql(T_SERVER, "sX_PayDay", SI[sX_PayDay], "sNumber", 1);

                new nam[80];
				if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] == 1) format(nam, sizeof(nam), "hostname %s | %s", SI[sName], SI[sObnova]); // Название проекта
			    else if(GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | X%i PayDay", SI[sName], SI[sX_PayDay]);
			    else if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] > 1) format(nam, sizeof(nam), "hostname %s | %s | X%i PayDay", SI[sName], SI[sObnova], SI[sX_PayDay]); // Название проекта
				else format(nam, sizeof(nam), "hostname %s", SI[sName]);
				SendRconCommand(nam);

                return callcmd::ss(playerid);
			}
		}
		// Меню банка
		case dBankMenu:
		{
            if(!response) return 1;
			{
				switch(listitem)
				{
					case 5: return DialogBankMenu(playerid);
					case 0:  // Основной счет
					{
						return DialogBankList(playerid);
					}
					case 1:  // Счет для дома
					{
						return DialogBankMenu(playerid);
					}
					case 2:  // Счет для Семьи
					{
						/*if(!PI[playerid][Family])
					    {
							SEM(playerid, "У Вас нет семьи!");
							return DialogBankMenu(playerid);
					    }
						else return DialogShetFamily(playerid);*/
						return DialogBankMenu(playerid);
					}
					case 3:  // Счет для Бизнеса
					{
						/*if(!PI[playerid][Biz])
					    {
							SEM(playerid, "У Вас нет бизнеса!");
							return DialogBankMenu(playerid);
					    }
						else return DialogShetBiz(playerid);*/
						return DialogBankMenu(playerid);
					}
					case 4:  // Счет для Компания
					{
						/*if(!PI[playerid][Company])
					    {
							SEM(playerid, "У Вас нет Компании!");
							return DialogBankMenu(playerid);
					    }
						else return DialogShetTK(playerid);*/
						return DialogBankMenu(playerid);
					}
					case 6: // Система банковских карт
					{
						new string[124];
						format(string, sizeof string, "SELECT * FROM "T_BANK_CARDS" WHERE `bpcOwner` = '%s'", GetName(playerid));
						mysql_tquery(mysql, string, "CheckPlayerCards", "i", playerid);
					}
					case 7: // Оплата пошлины для паспорта
					{
						if(!PI[playerid][Poshlina])
						{
							if(GetMoney(playerid) < 500) return SEM(playerid, "Недостаточно средств для оплаты пошлины!");
							{
								GiveMoney(playerid, -500);
								FracI[FRAC_AO][fBank] += 500;
								update_int_mysql(T_FRAC, "fBank", FracI[FRAC_AO][fBank], "fID", FracI[FRAC_AO][fID]);
								PI[playerid][Poshlina] = true;
								update_int_mysql(T_PLAYER, "Poshlina", PI[playerid][Poshlina], "ID", PI[playerid][ID]);
								SCMInfo(playerid, "Вы успешно оплатили пошлину для оформление паспорта!");
								SCMInfo(playerid, "Теперь напрявляйтесь в Паспортный стол для оформления паспорта.");
								
								return SetPlayerGPS(playerid, 2436.5420, -1903.8353, 22.0043, "Паспортный стол");
							}
						}
						else DialogBankMenu(playerid);
					}
				}
			}
		}
		case dCreateCard:
		{
			if(!response) return 1;
			{
				new sCardNumber[24], randomcard[3];
				format(sCardNumber, sizeof(sCardNumber), "2124 %i %i %i",randomcard[0] = 1000 + random(999),  randomcard[1] = 1000 + random(999), randomcard[2] = 1000 + random(999));

				getdate(year_s, month_s, day_s); // Узнаем дату
				new sCardData[10];
				format(sCardData, sizeof(sCardData), "%02d/%02d", month_s, year_s+5);

				new stringCards[1024];
				format(stringCards, sizeof(stringCards), "INSERT INTO "T_BANK_CARDS" \
					(`bpcOwner`, `bpcNumber`, `bpcData`, `bpcCode`, `bpcPinCod`) VALUES \
					('%s', '%s', '%s', %i,  %i)", \
				GetName(playerid), sCardNumber, sCardData, random(999), 1000+random(999));
				mysql_query(mysql, stringCards);

				SCMInfo(playerid, "Вы успешно получили дебитовую банковскую карту!");
				FSCM(playerid, -1, "PIN код Вашей карты - "SERVER"%i",  BPC[playerid][bpcPinCod]);

				return LoadPlayerCard(playerid);
			}
		}
		case dBankCardMenu:
		{
			if(!response) return DialogBankMenu(playerid);
			{
				SPD(playerid, dPlayerCardMenu, d_list, "Меню управления картой", "\
					"SERVER"1. "WHITE"Информация\n\
					"SERVER"2. "WHITE"Сменить PIN код\n\
					"SERVER"3. "WHITE"Сделать зарплатной\n\
					"SERVER"4. "WHITE"Заблокировать",
				"Выбрать", "<< Назад");
				SetPVarInt(playerid, "CardsID", listitem);
			}
		}
		case dPlayerCardMenu:
		{
			new MyCardID = GetPVarInt(playerid, "CardsID");
            if(!response)
			{
				new string[124];
				format(string, sizeof string, "SELECT * FROM "T_BANK_CARDS" WHERE `bpcOwner` = '%s'", GetName(playerid));
				mysql_tquery(mysql, string, "CheckPlayerCards", "i", playerid);

				return DeletePVar(playerid, "CardsID");
			}
			else
			{
				switch(listitem)
				{
					case 0: // Информация
					{
						new string[512];
						string_f("\
							"WHITE"Держатель карты: "BLUE"%s\n\n\
							"WHITE"Номер карты: "GREEN"%s [%s]\n\
							"WHITE"Остаток на карте: "GREEN"%s рублей\n\n\
							"WHITE"Статус карты: "SERVER"%s\n",
						BPC[MyCardID][bpcOwner], BPC[MyCardID][bpcNumber], BPC[MyCardID][bpcData], ConvertCash(BPC[MyCardID][bpcMoney]), (!BPC[MyCardID][bpcStatus])?("Не активирована"):(BPC[MyCardID][bpcStatus]==1)?("Дебитовая"):("Кредитная"));
						SPD(playerid, dNull, d_info, "Инфомация о карте", string, "Закрыть", "");
					}
					case 1: // Сменить PIN код
					{
						return SPD(playerid, dPlayerCardMenu, d_list, "Меню управления картой", "\
							"SERVER"1. "WHITE"Информация\n\
							"SERVER"2. "WHITE"Сменить PIN код\n\
							"SERVER"3. "WHITE"Сделать зарплатной\n\
							"SERVER"4. "WHITE"Заблокировать",
						"Выбрать", "<< Назад");
					}
					case 2: // Сделать зарплатной
					{
						return SPD(playerid, dPlayerCardMenu, d_list, "Меню управления картой", "\
							"SERVER"1. "WHITE"Информация\n\
							"SERVER"2. "WHITE"Сменить PIN код\n\
							"SERVER"3. "WHITE"Сделать зарплатной\n\
							"SERVER"4. "WHITE"Заблокировать",
						"Выбрать", "<< Назад");
					}
					case 3: // Заблокировать
					{
						return SPD(playerid, dPlayerCardMenu, d_list, "Меню управления картой", "\
							"SERVER"1. "WHITE"Информация\n\
							"SERVER"2. "WHITE"Сменить PIN код\n\
							"SERVER"3. "WHITE"Сделать зарплатной\n\
							"SERVER"4. "WHITE"Заблокировать",
						"Выбрать", "<< Назад");
					}
				}
				return DeletePVar(playerid, "CardsID");
			}
		}
		case dBankList:
		{
            if(!response) return DialogBankMenu(playerid);
			{
				new string[254];
				switch(listitem)
				{
					case 0: // Баланс
					{
						if(PI[playerid][Bank]<1) string_f( "{FFFFFF}На Вашем банковском счету {FF0000}%s рублей", ConvertCash(PI[playerid][Bank]));
						else string_f( "{FFFFFF}На Вашем банковском счету "SERVER"%s рублей", ConvertCash(PI[playerid][Bank]));
						SPD(playerid, dBankBalans, d_info, "Баланс", string, "<< Назад", "");
					}
					case 1: // Пополнить
					{
						SPD(playerid, dBankUp, d_input, "Введите сумму",
							"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:",
						"Положить","<< Назад");
					}
					case 2: // Снять
					{
					    SPD(playerid, dBankDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:",
						"Снять","<< Назад");
					}
					case 3: // Перевести
					{
			        	SPD(playerid, dBankPerevod, d_input, "Перевод", "\
						Введите ID игрока, которому хотите перевести деньги и количество денег через запятую:\n\n{afafaf}\
						Пример: 0,500000", "Перевести", "Отмена");
					}
					case 4: // Оплатить штраф по номеру
					{
						if(!PI[playerid][ShtrafPPS]&&!PI[playerid][ShtrafDPS]) return SEM(playerid, "У Вас нет неоплаченных штрафов!");
						{
				        	SPD(playerid, dBankPayShtrafNumber, d_input, "Оплата штрафа",
								"{FFFFFF}Введите: номер штрафа:\n\
								Чтобы узнать номер штрафа, используйте /tickets",
							"Оплатить", "<< Назад");
						}
					}
					case 5: // Оплатить все штрафы
					{
						if(!PI[playerid][ShtrafPPS]&&!PI[playerid][ShtrafDPS]) return SEM(playerid, "У Вас нет неоплаченных штрафов!");
						{
							new stringer[124];
							stringer_f("SELECT SUM(tPrice) FROM "T_TICKETS" WHERE `tName` = '%s' AND `tID` = 1 or `tID` = 2", GetName(playerid));
							mysql_tquery(mysql, stringer, "AllShtrafPay", "i", playerid);

							/*new stringer[1024], str[124];
							format(str, sizeof(str), ""WHITE"Вы желаете оплатить все "SERVER"%i шт "WHITE"штрафов?\n", PI[playerid][ShtrafPPS]&&PI[playerid][ShtrafDPS]); strcat(stringer, str);
							strcat(stringer, "Сумма всех неоплаченных штрафов состовляет:");
							SPD(playerid, dNull, d_info, ""SERVER"Оплата всех штрафов", stringer, "Оплатить", "Отмена");*/
						}
					}
				}
			}
		}
		case dBankBalans:
		{
            if(!response) DialogBankList(playerid);
			else DialogBankList(playerid);
			return 1;
		}
		case dBankUp: // Пополнить счет
		{
			if(!response) return DialogBankList(playerid);
            {
				if(!strval(inputtext) || strval(inputtext) == 0)
				{
					SPD(playerid, dBankUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Укажите сумму пополнения!",
					"Положить","<< Назад");
					return 1;
				}
				if(strval(inputtext) < 1 || strval(inputtext) > 500000000)
				{
					SPD(playerid, dBankUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Сумма пополнения от 1 до 500.000.000 рублей!",
					"Положить","<< Назад");
					return 1;
				}
				if(GetMoney(playerid) < strval(inputtext))
				{
					SPD(playerid, dBankUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}У Вас нет с собой столько денег!",
					"Положить","<< Назад");
					return 1;
				}
				if(GetBank(playerid) > 500000000)
				{
					SPD(playerid, dBankUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Банковский счет заполнен!",
					"Положить","<< Назад");
					/*
					new stringBank[512];
					format(stringBank, sizeof(stringBank),
						"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Вы можете положить на счет только %s рублей!", ConvertCash(2000000000 - GetBank(playerid)));
					SPD(playerid, dBankUp, d_input, "Введите сумму", stringBank, "Положить","<< Назад");
					*/
					return 1;
				}
				GiveMoney(playerid, -strval(inputtext));
				GiveBank(playerid, strval(inputtext));
				FSCM(playerid, cBLUE, "Вы положили %s рублей на банковский счет", ConvertCash(strval(inputtext)));
				FSCM(playerid, cBLUE, "Баланс в банке: %s рублей", ConvertCash(PI[playerid][Bank]));
			}
		}
		case dBankDown: // Снять со счета
		{
            if(!response) return DialogBankList(playerid);
			{
				if(!strval(inputtext))
				{
				    SPD(playerid, dBankDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Укажите сумму перевода!",
					"Снять","<< Назад");
					return 1;
				}
				if(strval(inputtext) < 1)
				{
				    SPD(playerid, dBankDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Сумма снятия от 1 до 500.000.000 рублей!",
					"Снять","<< Назад");
					return 1;
				}
				if(PI[playerid][Bank] < strval(inputtext))
				{
					SPD(playerid, dBankDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковсккого счета:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}У Вас нет в банке столько денег!",
					"Снять","<< Назад");
					return 1;
				}
				GiveBank(playerid, -strval(inputtext));
				GiveMoney(playerid, strval(inputtext));
				FSCM(playerid, cBLUE, "Вы сняли %s рублей с банковского счета", ConvertCash(strval(inputtext)));
				FSCM(playerid, cBLUE, "Остаток в банке: %s рублей", ConvertCash(PI[playerid][Bank]));
            }
		}
		case dBankPerevod: // перевести на другой счет
		{
            if(!response) return DialogBankList(playerid);
			{

			}
		}
		case dBankPayShtrafNumber: // Оплата штрафа по номеру
		{
	    	if(!response) return DialogBankList(playerid);
	    	{
				new string[128], number;
				if(sscanf(inputtext, "d", number))
				{
					return SPD(playerid, dBankPayShtrafNumber, d_input, "Оплата штрафа",
						"{FFFFFF}Введите: номер штрафа:\n\
						Чтобы узнать номер штрафа, используйте "SERVER"/tickets",
					"Оплатить", "<< Назад");
				}
				format(string, sizeof string, "SELECT * FROM "T_TICKETS" WHERE `tNumber` = '%d'", number);
				mysql_tquery(mysql, string, "CheckShtrafPayNumber", "ii", playerid, number);
			}
		}
		case dPayShtrafAll:
		{
			if(!response) return DeletePVar(playerid, "ShtrafSumma");
			{
				new AllSumma = GetPVarInt(playerid, "ShtrafSumma");
				if(GetMoney(playerid) < AllSumma) return SEM(playerid, "У Вас недостаточно средств для оплаты штрафов!"), DeletePVar(playerid, "ShtrafSumma");
				{
					GiveMoney(playerid, -AllSumma);

					PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
					FSCM(playerid, cWHITE, "Вы успешно оплатили все "SERVER"%i шт{FFFFFF} штрафов за "GREEN"%s рублей{FFFFFF}.", PI[playerid][ShtrafPPS]+PI[playerid][ShtrafDPS], ConvertCash(AllSumma));
					PI[playerid][ShtrafPPS] = PI[playerid][ShtrafDPS] = 0;
					update_int_mysql(T_PLAYER, "ShtrafPPS", PI[playerid][ShtrafPPS], "ID", PI[playerid][ID]);
					update_int_mysql(T_PLAYER, "ShtrafDPS", PI[playerid][ShtrafDPS], "ID", PI[playerid][ID]);

					new stringer[80];
					stringer_f("DELETE FROM "T_TICKETS" WHERE `tName` = '%s'", GetName(playerid));
					mysql_query(mysql, stringer);

					return DeletePVar(playerid, "ShtrafSumma");
				}
			}
		}
		//
		// Система ATM - Банкомата
		case dAtmMenu:
		{
            if(!response) return 1;
			{
				switch(listitem)
				{
					case 0: // Баланс
					{
						new string[80];
						if(PI[playerid][Bank]<1) string_f( "{FFFFFF}На Вашей банковской карте {FF0000}%s рублей", ConvertCash(PI[playerid][Bank]));
						else string_f( "{FFFFFF}На Вашей банковской карте "SERVER"%s рублей", ConvertCash(PI[playerid][Bank]));
						SPD(playerid, dNull, d_info, "Баланс карты", string, "Хорошо", "");
						return DeletePVar(playerid, "ATM_ID");
					}
					case 1: // Снять деньги с карты
					{
						SPD(playerid, dAtmDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:",
						"Снять","<< Назад");
					}
					case 2: // Положить деньги на карту
					{
						SPD(playerid, dAtmUp, d_input, "Введите сумму",
							"{FFFFFF}Укажите сумму которую Вы хотите положить на банковский счет:",
						"Положить","<< Назад");
					}
					case 3: // Пополнить баланс телефона
					{
						/*
						if(PI[playerid][SimCard]==0)
						{
							SEM(playerid, "У Вас нет Sim-Card!");
							return DialogATM_Menu(playerid);
						}
						SPD(playerid, dNull, d_input, ""SERVER"Пополнение моб.счета", "{FFFFFF}Укажите сумму:", "Принять", "<< Назад");
						*/
						SEM(playerid, "Временно недоступно!");
						return DialogATM_Menu(playerid);
					}
					case 4: // Пожертвовать деньги области
					{
						SEM(playerid, "Временно недоступно!");
						return DialogATM_Menu(playerid);
					}
				}
			}
		}
		case dAtmDown:
		{
            if(!response) return DialogATM_Menu(playerid);
			{
				new a = GetPVarInt(playerid, "ATM_ID");
	            if(!strval(inputtext))
				{
				    SPD(playerid, dAtmDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Укажите сумму которую хотите снять!",
					"Снять","<< Назад");
					return 1;
				}
				if(PI[playerid][Bank] < strval(inputtext))
				{
					SPD(playerid, dAtmDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}У Вас нет в банке столько денег!",
					"Снять","<< Назад");
					return 1;
				}
				if(ATMInfo[a][aMoney] < strval(inputtext))
				{
					SPD(playerid, dAtmDown, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите снять с банковского счета:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}В данном банкомате нет запращиваемой Вами суммы!",
					"Снять","<< Назад");
					return 1;
				}
				ATMInfo[a][aMoney] -= strval(inputtext); // Снимаем деньги с банкомата
				update_int_mysql(T_ATM, "aMoney", ATMInfo[a][aMoney], "aID", a);

				PI[playerid][Bank] -= strval(inputtext); // Снимаем деньги с банковского счета
				GiveMoney(playerid, strval(inputtext)); // Пополняем деньги на руках игрока
				FSCM(playerid, cBLUE, "Вы сняли %s рублей с банковского счета", ConvertCash(strval(inputtext)));
				FSCM(playerid, cBLUE, "Остаток в банке: %s рублей", ConvertCash(PI[playerid][Bank]));
				return DeletePVar(playerid, "ATM_ID");
			}
		}
		case dAtmUp:
		{
            if(!response) return DialogATM_Menu(playerid);
			{
				new a = GetPVarInt(playerid, "ATM_ID");
	            if(!strval(inputtext))
				{
				    SPD(playerid, dAtmUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите пополнить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Укажите сумму которую хотите снять!",
					"Снять","<< Назад");
					return 1;
				}
				if(PI[playerid][Money] < strval(inputtext))
				{
					SPD(playerid, dAtmUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите пополнить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}У Вас нет на руках столько денег!",
					"Снять","<< Назад");
					return 1;
				}
				if(ATMInfo[GetPVarInt(playerid, "ATMID")][aMoney] >= MAX_ATM_CASH)
				{
					SPD(playerid, dAtmUp, d_input, "Введите сумму",
						"{FFFFFF}Укажите сумму которую Вы хотите пополнить на банковский счет:\n\
						{FF0000}[ Ошибка! ] {FFFFFF}Простите банкомат временно недоступен!",
					"Положить","<< Назад");
					return 1;
				}
				GiveMoney(playerid, -strval(inputtext)); // Снимаем деньги с рук игрока

				ATMInfo[a][aMoney] += strval(inputtext); // Пополняем деньги с банкомата
				PI[playerid][Bank] += strval(inputtext); // Пополняем деньги на банковский счет
				update_int_mysql(T_ATM, "aMoney", ATMInfo[a][aMoney], "aID", a);

				FSCM(playerid, cBLUE, "Вы положили %s рублей на банковский счет", ConvertCash(strval(inputtext)));
				FSCM(playerid, cBLUE, "Остаток в банке: %s рублей", ConvertCash(PI[playerid][Bank]));
				return DeletePVar(playerid, "ATM_ID");
			}
		}
		//
	    case dSettingServerXdonat: // Удвоение доната
	    {
            if(!response) return callcmd::ss(playerid);
			{
				FSCM(playerid, -1, "Вы успешно изменили удвоение доната с "SERVER"X%i{FFFFFF} на "GREEN"X%i{FFFFFF}", SI[sX_Donat], listitem+1);
                SI[sX_Donat] = listitem+1;
                update_int_mysql(T_SERVER, "sX_Donat", SI[sX_Donat], "sNumber", 1);
                return callcmd::ss(playerid);
			}
		}
		//
		// Сменить статистику игроку
		case dSetStats:
		{
		    if(!response) return DeletePVar(playerid, "SetStats");
		    new string[60], pl = GetPVarInt(playerid, "SetStats");
            new str[3]; format(str, 3, "%i", pl);
		    switch(listitem)
		    {
		        case 0: // Выдать уровень - (Level)
		        {
					string_f("{FFFFFF}Выдать уровень - Level для %s [%d]", GetName(pl), pl);
					SPD(playerid, dSetStatsLevel, d_input, string, "{FFFFFF}\
						Укажите колличество уровней которое хотите выдать игроку.\n\
						Выдать уровень можно от 1 до 100:",
					"Выдать", "<< Назад");
				}
		        case 1: // Изменить пол
		        {
					string_f("{FFFFFF}Изменить пол для %s [%d]", GetName(pl), pl);
					SPD(playerid, dSetStatsSex, d_list, string, "{FFFFFF}\
						Женский\n\
						Мужской",
					"Выдать", "<< Назад");
				}
		        case 2: // Выдать законку
		        {
					string_f("{FFFFFF}Выдать уровень законопослушности для %s [%d]", GetName(pl), pl);
					SPD(playerid, dSetStatsZakon, d_input, string, "{FFFFFF}\
						Укажите колличество законопослушности которое хотите выдать игроку.\n\
						Выдать законопослушность можно от 0 до 100 уровня:",
					"Выдать", "<< Назад");
				}
		        case 3: // Выдать розыск
		        {
					string_f("{FFFFFF}Выдать уровень розыска для %s [%d]", GetName(pl), pl);
					SPD(playerid, dSetStatsWanted, d_input, string, "{FFFFFF}\
						Укажите колличество звезд которое хотите выдать игроку.\n\
						Выдать уровень розыска можно от 0 до 6 звезд:",
					"Выдать", "<< Назад");
				}
		        case 4: // Указать работу
		        {
					string_f("{FFFFFF}Укажите работу для %s [%d]", GetName(pl), pl);
					SPD(playerid, dSetStatsJob, d_input, string, "{FFFFFF}\
						Укажите цыфрой ту работу которую Вы хотите дать игроку:\n\n\
						"SERVER"0 - Уволить с работы!\n\n\
						"SERVER"1. {FFFFFF} Водитель автобуса\n\
						"SERVER"2. {FFFFFF} Таксист\n\
						"SERVER"3. {FFFFFF} Механик\n\
						"SERVER"4. {FFFFFF} Мусорщик\n\
						"SERVER"5. {FFFFFF} Электрик\n\
						"SERVER"6. {FFFFFF} Пилот\n\
						"SERVER"7. {FFFFFF} Дальнобойщик\n\
						"SERVER"8. {FFFFFF} Инкасатор\n",
					"Назначить", "<< Назад");
				}
				case 5: // Снять розыск
				{
				    if(!PI[pl][Wanted]) return SEM(playerid, "У игрока нет розыска!"), DeletePVar(playerid, "SetStats");
				    {
						string_f("{FFFFFF}Снять уровень розыска с %s [%d]", GetName(pl), pl);
						SPD(playerid, dSetStatsClearWanted, d_input, string, "{FFFFFF}\
							Укажите колличество звезд которое хотите снять с игрока.\n\
							Снять уровень розыска можно от 1 до 6 звезд:",
						"Снять", "<< Назад");
					}
				}
				case 6: // Снять наручники
				{
					if(pCuff[pl][pCuffer] == INVALID_PLAYER_ID) return SEM(playerid, "Игрок не в наручниках!"), DeletePVar(playerid, "SetStats");
					{
						SetPlayerSpecialAction(pl, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(pl, 0);
					 	pCuff[pl][pCuffer] = pCuff[pl][pCuffee] = pCuff[playerid][pCuffee] = pCuff[playerid][pCuffer] = INVALID_PLAYER_ID;
						FSCM(playerid, cBLUE, "Вы сняли наручники с %s", GetName(pl));
						FSCM(pl, cBLUE, "Администратор %s снял%s с Вас наручники", GetName(playerid), (PI[playerid][Sex]==1)?(""):("а"));
						GameTextForPlayer(pl, "~g~Вам сняли наручники", 5000, 1);

					}
					return DeletePVar(playerid, "SetStats");
				}
		        case 7: // Выдать Скиллы оружия
		        {
		            if(PI[pl][SkillGun][0]&&PI[pl][SkillGun][1]&&PI[pl][SkillGun][2]&&PI[pl][SkillGun][3]&&PI[pl][SkillGun][4]&&PI[pl][SkillGun][5]&&PI[pl][SkillGun][6]==10000)
		            {
		                SEM(playerid, "У данного игрока уже есть все скиллы на оружие!");
		                return DeletePVar(playerid, "SetStats");
		            }
					PI[pl][SkillGun][0]=PI[pl][SkillGun][1]=PI[pl][SkillGun][2]=PI[pl][SkillGun][3]=PI[pl][SkillGun][4]=PI[pl][SkillGun][5]=PI[pl][SkillGun][6]=10000;
                    SetPlayerSkills(pl);
					FSCM(playerid, cGREEN, "Вы успешно выдали игроку %s [%d] все скиллы на оружие.", GetName(pl), pl);
					FSCM(pl, cBLUE, "%s %s выдал Вам все скиллы на оружие.", AdminName(playerid), AI[playerid][aNumber]);
					return DeletePVar(playerid, "SetStats");
				}
				case 8: // Выдать паспорт
				{
					if(!PI[pl][Pasport])
					{
                        PI[pl][Pasport] = 1;
						update_int_mysql(T_PLAYER, "Pasport", PI[pl][Pasport], "ID", PI[pl][ID]);
                        FSCM(playerid, -1, "Вы успешно выдали игроку %s [%d] Паспорт.", GetName(pl), pl);

                        callcmd::ssp(playerid, str);
					}
					return DeletePVar(playerid, "SetStats");
				}
				case 9: // Выдать Мед карту
				{
					if(!PI[pl][MedCard])
					{
                        PI[pl][MedCard] = 1;
						update_int_mysql(T_PLAYER, "MedCard", PI[pl][MedCard], "ID", PI[pl][ID]);
                        FSCM(playerid, -1, "Вы успешно выдали игроку %s [%d] Мед карту.", GetName(pl), pl);
                        callcmd::ssp(playerid, str);
					}
					return DeletePVar(playerid, "SetStats");
				}
				case 10: // Выдать военный билет
				{
					if(!PI[pl][Voenik])
					{
                        PI[pl][Voenik] = 1;
						update_int_mysql(T_PLAYER, "Voenik", PI[pl][Voenik], "ID", PI[pl][ID]);
                        FSCM(playerid, -1, "Вы успешно выдали игроку %s [%d] Военный билет.", GetName(pl), pl);
                        callcmd::ssp(playerid, str);
					}
					return DeletePVar(playerid, "SetStats");
				}
		    }
		}
		case dSetStatsLevel:
		{
		    if(!response) return DeletePVar(playerid, "SetStats");
		    new level, string[500], id = GetPVarInt(playerid, "SetStats");
		    {
		        level = strval(inputtext);
		        if(!level)
		        {
		       	 	string_f("{FFFFFF}Выдать уровень - Level для %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsLevel, d_input, string, "{FFFFFF}\
						Укажите колличество уровней которое хотите выдать игроку.\n\
						Выдать уровень можно от 1 до 100:\n\n\
						{FF0000}Вы оставили поле пустым!",
					"Выдать", "<< Назад");
					return 1;
		        }
				if(level < 1 || level > 100)
				{
		       	 	string_f("{FFFFFF}Выдать уровень - Level для %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsLevel, d_input, string, "{FFFFFF}\
						Укажите колличество уровней которое хотите выдать игроку.\n\
						Выдать уровень можно от 1 до 100:\n\n\
						{FF0000}Вы указали уровень недопустимый, можно указать от 1 до 100!",
					"Выдать", "<< Назад");
					return 1;
				}

				string_f("Администратор %s [%d] изменил игровой уровень игроку %s [%d] на %d Level", GetName(playerid), playerid, GetName(id), id, level);
				SCMAdmin(cGREEN, string);
				FSCM(id, cSERVER, "Администратор %s изменил Вам игровой уровень на %d Level.", GetName(playerid), level);
				PI[id][Level] = level;
				SetPlayerScore(id, PI[id][Level]);
				update_int_mysql(T_PLAYER, "Level", PI[id][Level], "ID", PI[id][ID]);
				SavePlayer(id);
				return DeletePVar(playerid, "SetStats");
		    }
		}
		case dSetStatsSex:
		{
		    if(!response) return DeletePVar(playerid, "SetStats");
		    new string[500], id = GetPVarInt(playerid, "SetStats");
		    switch(PI[id][Sex])
		    {
				case 1: PI[id][Sex] = 1;
				case 2: PI[id][Sex] = 2;
		    }
			string_f("Администратор %s [%d] изменил игровой пол игроку %s [%d] на %s", GetName(playerid), playerid, GetName(id), id, (listitem == 1)?("Мужской"):("Женский"));
			SCMAdmin(cGREEN, string);
			FSCM(id, cSERVER, "Администратор %s изменил Вам игровой пол на %s.", GetName(playerid), (listitem == 1)?("Мужской"):("Женский"));
			PI[id][Sex] = listitem;
			update_int_mysql(T_PLAYER, "Sex", PI[id][Sex], "ID", PI[id][ID]);
			SavePlayer(id);
			return DeletePVar(playerid, "SetStats");
		}
		case dSetStatsZakon:
		{
			if(!response) return DeletePVar(playerid, "SetStats");
			new Zakons, string[500], id = GetPVarInt(playerid, "SetStats");
		    {
		        Zakons = strval(inputtext);
		        if(!Zakons)
		        {
					string_f("{FFFFFF}Выдать уровень законопослушности для %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsZakon, d_input, string, "{FFFFFF}\
						Укажите колличество законопослушности которое хотите выдать игроку.\n\
						Выдать законопослушность можно от 0 до 100 уровня:\n\n\
						{FF0000}Вы оставили поле пустым!",
					"Выдать", "<< Назад");
					return 1;
				}
				if(Zakons < 0 || Zakons > 100)
				{
					string_f("{FFFFFF}Выдать уровень законопослушности для %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsZakon, d_input, string, "{FFFFFF}\
						Укажите колличество законопослушности которое хотите выдать игроку.\n\
						Выдать законопослушность можно от 0 до 100 уровня:\n\n\
						{FF0000}Вы указали законопослушность недопустимый, можно указать от 0 до 100!",
					"Выдать", "<< Назад");
					return 1;
				}
				string_f("Администратор %s [%d] выдал законопослушность игроку %s [%d] в размере %d едениц", GetName(playerid), playerid, GetName(id), id, Zakons);
				SCMAdmin(cGREEN, string);
				FSCM(id, cSERVER, "Администратор %s изменил Вам законопослушность на %d едениц.", GetName(playerid), Zakons);
				PI[id][Zakon] = Zakons;
				update_int_mysql(T_PLAYER, "Zakon", PI[id][Zakon], "ID", PI[id][ID]);
				SavePlayer(id);
			}
			return DeletePVar(playerid, "SetStats");
		}
		case dSetStatsWanted:
		{
			if(!response) return DeletePVar(playerid, "SetStats");
			new Wanteds, string[500], id = GetPVarInt(playerid, "SetStats");
		    {
		        Wanteds = strval(inputtext);
				if(Wanteds < 0 || Wanteds > 6)
				{
					string_f("{FFFFFF}Выдать уровень розыска для %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsWanted, d_input, string, "{FFFFFF}\
						Укажите колличество звезд которое хотите выдать игроку.\n\
						Выдать уровень розыска можно от 0 до 6 звезд:\n\n\
						{FF0000}Вы указали уровень розыска недопустимый, можно указать от 0 до 6!",
					"Выдать", "<< Назад");
					return 1;
				}
				string_f("Администратор %s [%d] выдал уровень розыска игроку %s [%d] на %d звезд(-ы)", GetName(playerid), playerid, GetName(id), id, Wanteds);
				SCMAdmin(cGREEN, string);
				FSCM(id, cSERVER, "Администратор %s изменил Вам уровень розыска на %d звезд(-ы)", GetName(playerid), Wanteds);
				PI[id][Wanted] = Wanteds;
				SetPlayerWantedLevel(id, PI[id][Wanted]);

				update_int_mysql(T_PLAYER, "Wanted", PI[id][Wanted], "ID", PI[id][ID]);
				SavePlayer(id);
			}
			return DeletePVar(playerid, "SetStats");
		}
		case dSetStatsJob:
		{
			if(!response) return DeletePVar(playerid, "SetStats");
			new Jobs, string[500], id = GetPVarInt(playerid, "SetStats");
		    {
		        Jobs = strval(inputtext);
				if(Jobs < 0 || Jobs > MAX_JOB)
				{
					string_f("{FFFFFF}Укажите работу для %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsJob, d_input, string, "{FFFFFF}\
						Укажите цыфрой ту работу которую Вы хотите дать игроку:\n\n\
						"SERVER"0 - Уволить с работы!\n\n\
						"SERVER"1. {FFFFFF} Водитель автобуса\n\
						"SERVER"2. {FFFFFF} Таксист\n\
						"SERVER"3. {FFFFFF} Механик\n\
						"SERVER"4. {FFFFFF} Мусорщик\n\
						"SERVER"5. {FFFFFF} Электрик\n\
						"SERVER"6. {FFFFFF} Пилот\n\
						"SERVER"7. {FFFFFF} Дальнобойщик\n\
						"SERVER"8. {FFFFFF} Инкасатор\n",
					"Назначить", "<< Назад");
					return 1;
				}
				if(PI[id][Job] == Jobs) return SEM(playerid, "Данный игрок уже работает на данной работе!");
				if(GetFrac(id)) return SEM(playerid, "Данный игрок состоит в организации!");
				// if(PI[id][Job]>0 && Jobs==0)
				string_f("Администратор %s [%d] назначял работу '%s' игроку %s [%d]", GetName(playerid), playerid, Job_Name[Jobs], GetName(id), id);
				SCMAdmin(cGREEN, string);
				FSCM(id, cSERVER, "Администратор %s изменил Вам работу на '%s'", GetName(playerid), Job_Name[Jobs]);
				PI[id][Job] = Jobs;
				update_int_mysql(T_PLAYER, "Job", PI[id][Job], "ID", PI[id][ID]);
				SavePlayer(id);
			}
		}
		case dSetStatsClearWanted:
		{
			if(!response) return DeletePVar(playerid, "SetStats");
			new Wanteds, string[500], id = GetPVarInt(playerid, "SetStats");
		    {
		        Wanteds = strval(inputtext);
				if(Wanteds < 1 || Wanteds > 6)
				{
					string_f("{FFFFFF}Снять уровень розыска с %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsClearWanted, d_input, string, "{FFFFFF}\
						Укажите колличество звезд которое хотите снять с игрока.\n\
						Снять уровень розыска можно от 1 до 6 звезд:",
					"Снять", "<< Назад");
					return 1;
				}
				if(Wanteds > PI[id][Wanted])
				{
				    FSCM(playerid, -1, "У игрока осталось %i звезда!", PI[id][Wanted]);
					string_f("{FFFFFF}Снять уровень розыска с %s [%d]", GetName(id), id);
					SPD(playerid, dSetStatsClearWanted, d_input, string, "{FFFFFF}\
						Укажите колличество звезд которое хотите снять с игрока.\n\
						Снять уровень розыска можно от 1 до 6 звезд:",
					"Снять", "<< Назад");
					return 1;
				}
				string_f("Администратор %s снял уровень розыска игроку %s [%d] на %d звезд(-ы)", GetName(playerid), GetName(id), id, Wanteds);
				SCMAdmin(cGREEN, string);
				FSCM(id, cSERVER, "Администратор %s снял Вам уровень розыска на %d звезд(-ы)", GetName(playerid), Wanteds);
				PI[id][Wanted] -= Wanteds;
				SetPlayerWantedLevel(id, PI[id][Wanted]);
				update_int_mysql(T_PLAYER, "Wanted", PI[id][Wanted], "ID", PI[id][ID]);
			}
			return DeletePVar(playerid, "SetStats");
		}
		//
		case dCarPanel:
		{
		    if(!response) return 1;
		    {
				new string[500], str[150];
				new carid = GetPlayerVehicleID(playerid);
			    switch(listitem)
			    {
					case 2,5,8: return callcmd::carpanel(playerid); // - Пропуск
					case 0: return callcmd::engine(playerid); // engine - Двигатель
					case 1: return callcmd::fare(playerid); // lights - Фары
					case 3: // Doors - Двери
					{
						new drivers, passengers, backlefts, backrights;
	       			 	GetVehicleParamsCarWindows(carid, drivers, passengers, backlefts, backrights); // Узнаем статус окон транспората

	        			strcat(string, "№. Окна\tСостояние\n");
						format(str, sizeof(str), ""SERVER"1. {FFFFFF}Дверь пердная левая\t%s\n", (!drivers)?(""GREY"Закрыта"):(""GREEN"Открыта")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"2. {FFFFFF}Дверь пердная правая\t%s\n", (!passengers)?(""GREY"Закрыта"):(""GREEN"Открыта")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"3. {FFFFFF}Дверь задняя левая\t%s\n", (!backlefts)?(""GREY"Закрыта"):(""GREEN"Открыта")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"4. {FFFFFF}Дверь задняя правая\t%s\n", (!backrights)?(""GREY"Закрыта"):(""GREEN"Открыта")); strcat(string, str);
						SPD(playerid, dCarPanelDoors, d_tlisth, "{FFFFFF}Панель управления транспортом | "SERVER"Двери", string, "Выбрать", "Закрыть");
					}
					case 4: // Windows - Окна
					{
						new drivers, passengers, backlefts, backrights;
	       			 	GetVehicleParamsCarWindows(carid, drivers, passengers, backlefts, backrights); // Узнаем статус окон транспората

	        			strcat(string, "№. Окна\tСостояние\n");
						format(str, sizeof(str), ""SERVER"1. {FFFFFF}Окно перднее левое\t%s\n", (!drivers)?(""GREY"Опущено"):(""GREEN"Поднято")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"2. {FFFFFF}Окно перднее правое\t%s\n", (!passengers)?(""GREY"Опущено"):(""GREEN"Поднято")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"3. {FFFFFF}Окно заднее левое\t%s\n", (!backlefts)?(""GREY"Опущено"):(""GREEN"Поднято")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"4. {FFFFFF}Окно заднее правое\t%s\n", (!backrights)?(""GREY"Опущено"):(""GREEN"Поднято")); strcat(string, str);
						SPD(playerid, dCarPanelWindows, d_tlisth, "{FFFFFF}Панель управления транспортом | "SERVER"Окна", string, "Выбрать", "Закрыть");
					}
					case 6: // bonnet - Капот
					{
	                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	                    {
	                        GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(carid, engine, lights, alarm, doors, (!bonnet)?(true):(false), boot, objective);
						}
					}
					case 7: // boot - Багажник
					{
	                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	                    {
	                        GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, (!boot)?(true):(false), objective);
						}
					}
					case 9: // alarm - Сигнализация
					{
	                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	                    {
	                        GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(carid, engine, lights, (!alarm)?(true):(false), doors, bonnet, boot, objective);
						}
					}
					// case 10: return callcmd::crash(playerid); //
				}
			}
		}
		case dCarPanelDoors:
		{
		    if(!response) return callcmd::carpanel(playerid);
		    {
				new carid = GetPlayerVehicleID(playerid);
				new bool:drivers, bool:passengers, bool:backlefts, bool:backrights;
				GetVehicleParamsCarDoors(carid, drivers, passengers, backlefts, backrights);
				switch(listitem)
				{
					case 0:
					{
						drivers = !drivers ? (true) : (false);
						if(drivers==false) MeAction(playerid, "открыл(-а) левую переднюю дверь");
						else MeAction(playerid, "закрыл(-а) левую переднюю дверь");
					}
					case 1:
					{
						passengers = !passengers ? (true) : (false);
						if(passengers==false) MeAction(playerid, "открыл(-а) правую переднюю дверь");
						else MeAction(playerid, "закрыл(-а) правую переднюю дверь");
					}
					case 2:
					{
						backlefts = !backlefts ? (true) : (false);
						if(backlefts==false) MeAction(playerid, "открыл(-а) левую заднюю дверь");
						else MeAction(playerid, "закрыл(-а) левую заднюю дверь");
					}
					case 3:
					{
						backrights = !backrights ? (true) : (false);
						if(backrights==false) MeAction(playerid, "открыл(-а) правую заднюю дверь");
						else MeAction(playerid, "закрыл(-а) правправуюе заднюю дверь");
					}
				}
				SetVehicleParamsCarDoors(carid, drivers, passengers, backlefts, backrights);
			}
		}
		case dCarPanelWindows:
		{
		    if(!response) return callcmd::carpanel(playerid);
		    {
				new carid = GetPlayerVehicleID(playerid);
				new bool:drivers, bool:passengers, bool:backlefts, bool:backrights;
				GetVehicleParamsCarWindows(carid, drivers, passengers, backlefts, backrights);
				switch(listitem)
				{
					case 0:
					{
						drivers = !drivers ? (true) : (false);
						if(drivers==false) MeAction(playerid, "открыл(-а) левое переднее окно");
						else MeAction(playerid, "закрыл(-а) левое переднее окно");
					}
					case 1:
					{
						passengers = !passengers ? (true) : (false);
						if(passengers==false) MeAction(playerid, "открыл(-а) правое переднее окно");
						else MeAction(playerid, "закрыл(-а) правое переднее окно");
					}
					case 2:
					{
						backlefts = !backlefts ? (true) : (false);
						if(backlefts==false) MeAction(playerid, "открыл(-а) левое заднее окно");
						else MeAction(playerid, "закрыл(-а) левое заднее окно");
					}
					case 3:
					{
						backrights = !backrights ? (true) : (false);
						if(backrights==false) MeAction(playerid, "открыл(-а) правое заднее окно");
						else MeAction(playerid, "закрыл(-а) правое заднее окно");
					}
				}
				SetVehicleParamsCarWindows(carid, drivers, passengers, backlefts, backrights);
			}
		}
		case dAdminLogin:
		{
			new apass = strlen(inputtext);
            if(!response) return 1;
            {
				if(GetPVarInt(playerid, "type_alogin") == 1)
				{
				    if(!apass || apass < 5 || apass > 32 || strfind(inputtext, "=", true) != -1)
				    {
						SPD(playerid, dAdminLogin, d_input, ""SERVER"Регистрация администратора", "{FFFFFF}\
							Введите пароль, который будет от панели администратора\n\n{63BD4E}\
							Примечание:\n\
							\t- Пароль должен состоять из латинских букв и цифр\n\
							\t- Размер пароля от 5 до 32 символов",
						"Ввести", "Отмена");
						return 1;
					}
					new string[100];
					SetPVarString(playerid, "inputtext", inputtext);
					string_f("SELECT * FROM "T_ADMIN" WHERE `aName` = '%s'", GetName(playerid));
					mysql_tquery(mysql, string, "CheckAdminAloginReg", "i", playerid);
				}
				else
				{
				    if(!apass)
					{
						new string[500];
						string_f("\
							{FFFFFF}Ваш логин для входа в Панель администратора: "SERVER"%s\n\
							{FFFFFF}Ваш уровень администрирования: "SERVER"%s - (%d)\n\n\
							{FFFFFF}Введите Ваш пароль от панели администратора", GetName(playerid), AdminName(playerid), GetAdmin(playerid));
	                    SPD(playerid, dAdminLogin, d_pass, ""SERVER"Доступ администратора", string, "Принять", "Отмена");
						return 1;
					}
					new string[150];
					string_f("SELECT * FROM "T_ADMIN" WHERE `aName` = '%s' AND `aPassword` = md5('%s')", AI[playerid][aName], inputtext);
					mysql_tquery(mysql, string, "CheckAdminAloginAuth", "d", playerid);
				}
			}
		}
		case dAdminLoginOff:
		{
			if(!response) return 1;
			{
			    if(AdminLogin[playerid])
				{
				    if(GetAdmin(playerid)<=8)
				    {
						new string[156];
						string_f("[A] %s %s [%i]: завершил(-а) дежурство!", AdminName(playerid), GetName(playerid), AI[playerid][aNumber]);
						SCMAdmin(cSERVER, string);
					}
                    AdminLogin[playerid] = false;
					SCMInfo(playerid, "Вы успешно ушли с дежурства как администратор!");
				}
			}
		}
		case dAhelp:
		{
			if(!response) return 1;
			{
				new str[112], string[256], stringer[1024];
		        stringer[0] = EOS;
				format(str, sizeof(str), "{FFFFFF}Команды для - "SERVER"%s", Admin_Name[listitem]), strcat(string, str);
				switch(listitem)
				{
				    case 0: // 1 - Помощник
					{
						strcat(stringer, ""SERVER"/alogin {FFFFFF}- Авторизоваться в админ цетре\n");
						strcat(stringer, ""SERVER"/ahelp-(/ah) {FFFFFF}- Команды для администратора\n");
						strcat(stringer, ""SERVER"/a {FFFFFF}- Чат администратора\n");
					}
					case 1: // 2 - Старший помощник
					{
						strcat(stringer, ""SERVER"/tp {FFFFFF}- Меню телепорта администратора\n");
						strcat(stringer, ""SERVER"/veh {FFFFFF}- Создать временный транспорт\n");
						strcat(stringer, ""SERVER"/delveh {FFFFFF}- Удалить созданный временый транспорт\n");
						// strcat(stringer, ""SERVER"/sp(ec) {FFFFFF}- Начять наблюдение за игроком\n");
						// strcat(stringer, ""SERVER"/spoff {FFFFFF}- Завершить наблюдение за игроком\n");
						strcat(stringer, ""SERVER"/jet {FFFFFF}- Выдать себе JetPack\n");
						strcat(stringer, ""SERVER"/vhp {FFFFFF}- Починить транспорт\n");
						strcat(stringer, ""SERVER"/up {FFFFFF}- Подадвинуть себя вверх\n");
						strcat(stringer, ""SERVER"/down {FFFFFF}- Подадвинуть себя вниз\n");
						strcat(stringer, ""SERVER"/left {FFFFFF}- Подадвинуть себя вправо\n");
						strcat(stringer, ""SERVER"/right {FFFFFF}- Подадвинуть себя влево\n");
					}
					case 2: // 3 - Младший модератор
					{
						strcat(stringer, ""SERVER"/sethp {FFFFFF}- Выдать игроку здоровье\n");
						strcat(stringer, ""SERVER"/setseat {FFFFFF}- Выдать игроку сытость\n");
						strcat(stringer, ""SERVER"/freeze {FFFFFF}- Заморозить-(Разморозить) игрока\n");
						// strcat(stringer, ""SERVER"/unfreeze {FFFFFF}- Разморозить игрока\n");
						strcat(stringer, ""SERVER"/dearm {FFFFFF}- Убрать с игрока броню\n");
						strcat(stringer, ""SERVER"/kick {FFFFFF}- Отключить игрока от сервера\n");
						strcat(stringer, ""SERVER"/skick {FFFFFF}- Тихо отключить игрока от сервера\n");
						strcat(stringer, ""SERVER"/spawn {FFFFFF}- Заспавнить игрока\n");
						strcat(stringer, ""SERVER"/setarmour {FFFFFF}- Выдать игроку бронижелет\n");
						strcat(stringer, ""SERVER"/mute {FFFFFF}- Выдать игроку мут\n");
						strcat(stringer, ""SERVER"/setfuel {FFFFFF}- Заправить транспорт по ID\n");
						strcat(stringer, ""SERVER"/setfuelall {FFFFFF}- Заправить весь транспорт на сервере\n");
						strcat(stringer, ""SERVER"/jail {FFFFFF}- Посадить игрока в Деморган\n");
						strcat(stringer, ""SERVER"/clearchat-(/cc) {FFFFFF}- Очистить чат для администраторов\n");
						strcat(stringer, ""SERVER"/clearchatplayer-(/ccp) {FFFFFF}- Очистить чат для игроков\n");
					}
					case 3: // 4 - Модератор
					{
						strcat(stringer, ""SERVER"/a {FFFFFF}- Чат администрации\n");
						strcat(stringer, ""SERVER"/msg {FFFFFF}- Общий чат для сервера\n");
						strcat(stringer, ""SERVER"/unjail {FFFFFF}- Выпустить игрока от заключения\n");
						strcat(stringer, ""SERVER"/setcolor {FFFFFF}- Устоновить временный цвет транспорта\n");
						strcat(stringer, ""SERVER"/gotoveh {FFFFFF}- Телепортироваться к транспорту\n");
						strcat(stringer, ""SERVER"/getveh {FFFFFF}- Телепортировать транспорту к себе\n");
						strcat(stringer, ""SERVER"/tpcor {FFFFFF}- Телепортироваться по координатам X, Y, Z\n");
						strcat(stringer, ""SERVER"/goto {FFFFFF}- Телепортироваться к игроку\n");
						strcat(stringer, ""SERVER"/delgun {FFFFFF}- Удалить оружие у игрока\n");
						strcat(stringer, ""SERVER"/skin {FFFFFF}- Выдать игроку временную внешность\n\n");
						strcat(stringer, ""SERVER"/gethere {FFFFFF}- Телепортировать игрока к себе\n");
						strcat(stringer, ""SERVER"/spawncar-(/scar) {FFFFFF}- Заспавнить весь незанятый транспорт\n");
						strcat(stringer, ""SERVER"/spawncarall {FFFFFF}- Заспавнить незанятый транспорт в радиусе\n");
						strcat(stringer, ""SERVER"/slap {FFFFFF}- Подкинуть игрока\n");
						strcat(stringer, ""SERVER"/pjob {FFFFFF}- Устоновить временную покраску на транспорт\n");
						strcat(stringer, ""SERVER"/setint {FFFFFF}- Изменить интерьер игроку\n");
						strcat(stringer, ""SERVER"/setvw {FFFFFF}- Изменить виртуальный мир игроку\n");
						strcat(stringer, ""SERVER"/rescarid {FFFFFF}- Заспавнить транспорт по ID\n");
						strcat(stringer, ""SERVER"/offmute {FFFFFF}- Выдать игроку мут в Offline\n");
					}
					case 4: // 5 - Младший администратор
					{
						strcat(stringer, ""SERVER"/agivelic-(/agl) {FFFFFF}- Выдать игроку лицензию-(одну или все)\n");
					}
					case 5: // 6 - Администратор
					{
						strcat(stringer, ""SERVER"/atakelic-(/atl) {FFFFFF}- Забрать у игрока лицензию-(одну или все)\n\n");
						strcat(stringer, ""SERVER"/asettings-(/aset) {FFFFFF}- Настройки администратора\n");
						strcat(stringer, ""SERVER"/settime {FFFFFF}- Устоновить время на сервере\n");
					    strcat(stringer, ""SERVER"==================== [ Для дома ] ====================\n\n");
						strcat(stringer, ""SERVER"/houselist {FFFFFF}- ТП к дому\n");
						strcat(stringer, ""SERVER"/sethpos {FFFFFF}- Переместить дом\n");
						strcat(stringer, ""SERVER"/sethowner {FFFFFF}- Сменить владельца дома\n");
						strcat(stringer, ""SERVER"/sethprice {FFFFFF}- Указать стоимость дома\n");
						strcat(stringer, ""SERVER"/sethint {FFFFFF}- Сменить интерьер дома\n");
					}
					case 6: // 7 - Заместитель главного администратора
					{
						strcat(stringer, ""SERVER"/askin {FFFFFF}- Выдать игроку постоянную внешность\n");
						strcat(stringer, ""SERVER"/givevip {FFFFFF}- Выдать игроку VIP статус\n");
						strcat(stringer, ""SERVER"/resetmoney {FFFFFF}- Обнулить игроку деньги (Наличные/Банковские)\n");
						strcat(stringer, ""SERVER"/setleader {FFFFFF}- Поставить игрока на пост лидера\n");
						strcat(stringer, ""SERVER"/removeleaderoff {FFFFFF}- Снять игрока в оффлайне с поста лидера\n");
						strcat(stringer, ""SERVER"/aintlist {FFFFFF}- Список ТП поп интерьерам\n");
						strcat(stringer, ""SERVER"/checkoff {FFFFFF}- Просмотреть статистику игрока в Offline\n");

						// strcat(stringer, ""SERVER"/setmoneyatm {FFFFFF}- Пополнить банкомат деньгами\n");
					}
					case 7: // 8 - Главный администратор
					{
						strcat(stringer, ""SERVER"/givedonat {FFFFFF}- Выдать игроку донат очки\n");
						strcat(stringer, ""SERVER"/setadmin {FFFFFF}- Поставить игрока на пост администратора\n");
						strcat(stringer, ""SERVER"/setstatsplayer (/ssp) {FFFFFF}- Изменить статистику игроку\n");
						strcat(stringer, ""SERVER"/givemoney {FFFFFF}- Выдать игроку игровую валюту-(Вирты)\n");
						strcat(stringer, ""SERVER"/setrep {FFFFFF}- Повысить администратору репутацию {FFCC00}NEW\n");
						strcat(stringer, ""SERVER"/resetrep {FFFFFF}- Понизить администратору репутацию {FFCC00}NEW\n");
						strcat(stringer, ""SERVER"/dellacc {FFFFFF}- Удалить аккаунт игрока\n");
					}
					case 8: // 9 - Руководитель сервера
					{
					    strcat(stringer, ""SERVER"/addfrac {FFFFFF}- Создать организацию\n");
					    strcat(stringer, ""SERVER"/setitem {FFFFFF}- Добавить предмет в инвентарь игроку\n");
					}
					case 9: // 10 - Основатель
					{
						return callcmd::ahelp(playerid);
					}
				}
				SPD(playerid, dAhelpOff, d_info, string, stringer, "Закрыть", "<< Назад");
			}
		}
		case dAhelpOff:
		{
		    if(response) return 1;
			else callcmd::ahelp(playerid);
		}
		case dRemoveAdmin:
		{
			new Names[24], string[254];
		    GetPVarString(playerid, "RemoveAdminName", Names, sizeof(Names));
			if(!response) return DeletePVar(playerid, "RemoveAdminName");
			{
				string[0]=EOS;
				SCMAdmin(cSERVER, " ");
				string_f("[ A ] %s %s был снят со своей должности!", AdminName(GetPlayerID(Names)), GetName(GetPlayerID(Names)));
				SCMAdmin(cSERVER, string);
				string_f("[ A ] Кем: %s %s", AdminName(playerid), GetName(playerid));
				SCMAdmin(cSERVER, string);

				if(IsPlayerConnected(GetPlayerID(Names)))
				{
					if(AdminLogin[GetPlayerID(Names)]) AdminLogin[GetPlayerID(Names)] = false;
					RemoveAdmin(GetPlayerID(Names));
				}
				else
				{
					string[0]=EOS;
					string_f("DELETE FROM "T_ADMIN" WHERE `aName` = '%s'", Names);
					mysql_query(mysql, string);
				}
				FSCM(playerid, cGREEN, "Вы успешно сняли %s с должности администратора!", Names);
			}
			DeletePVar(playerid, "RemoveAdmin");
		}
		case dCarColor: // Сменить цвет транспорту
		{
	        if(!response) return 1;
	        {
				new carid = GetPlayerVehicleID(playerid), color = strval(inputtext);
				if(!strlen(inputtext))
				{
					SEM(playerid, "Вы не выбрали цвет для транспорта! [ Цвета: 0 - 255 ]");
					return callcmd::carcolor(playerid);
				}
				if(color < 0 || color > 255)
				{
					SEM(playerid, "Вы указали неверный цвет для транспорта! [ Цвета: 0 - 255 ]");
					return callcmd::carcolor(playerid);
				}
				ChangeVehicleColor(carid, color, color);
				FSCM(playerid, -1, "Вы успешно сменили цвет транспорту "SERVER"ID: %i"WHITE" на ColorID: "GREEN"%i", carid, color);
				return 1;
			}
		}
		case dAddMenu: //
		{
		  	if(!response) return 1;
			switch(listitem)
			{
				case 0: // Радар
				{
					SPD(playerid, dAddRadar, d_list, ""SERVER" Создание радара","\
						"SERVER"1. {FFFFFF}Дворовая территория "SERVER"(Макс. доп. скорость: 20км/ч)\n\
						"SERVER"2. {FFFFFF}Населенные пункты "SERVER"(Макс. доп. скорость: 60км/ч)\n\
						"SERVER"3. {FFFFFF}Вне населенных пунктов(ост. дороги): "SERVER"(Макс. доп. скорость: 90км/ч)\n\
						"SERVER"4. {FFFFFF}Автомагистрали "SERVER"(Макс. доп. скорость: 110км/ч)",
					"Выбрать","Отмена");
				}
				case 1: // Мусорка
				{
					if(GetPVarInt(playerid, "CreateMusorka")) return SEM(playerid, "Вы уже устанавливаете мусорку!");
					{
						new Float: posX, Float: posY, Float: posZ;
						GetPlayerPos(playerid, posX, posY, posZ);

						new musorka = CreateObject(1345, posX+2.0, posY+2.0, posZ, 0.0, 0.0, 0.0);
						SetPVarInt(playerid, "CreateMusorka", 1);
						SetPVarInt(playerid, "MusorkaObject", musorka);
						EditObject(playerid, musorka);
						SCM(playerid, cGREEN, "Вы начали установку мусорки. Поставьте мусорку в любую удобную для Вас позицию.");
					}
				}
				case 2: return SPD(playerid, dAddATM, d_info, ""SERVER"Установка банкомата", "{FFFFFF}Вы хотите начать установку банкомата?", "Да", "Нет"); //
				case 3: return SPD(playerid, dAddBilBord, d_info, ""SERVER"Установка рекламного щита", "{FFFFFF}Вы хотите начать установку рекламного щита?", "Да", "Нет"); // Билборды
				case 4: // Система Промо-кода
				{
                    new string[1024];
					strcat(string, "{FFFFFF}Добро пожаловать на создание Промо-кода!\n");
					strcat(string, "Для того что бы создать Промо-код\n\n");
					strcat(string, ""SERVER"#{FFFFFF} - Данный символ без которого нельзя создавать Промо-код!\n");
					strcat(string, ""SERVER"bonus{FFFFFF} - Название Промо-кода должно быть уникальным и не повторяться!\n");
					strcat(string, ""SERVER"24{FFFFFF} - данное число указывает сколько активаций в данном Промо-коде!\n\n");
					strcat(string, ""SERVER"[ Содержание приза Промо-кода ]\n\n");
					strcat(string, ""SERVER"Exp{FFFFFF} - Игровой опыт (Указать от 5 до 500)\n");
					strcat(string, ""SERVER"Level{FFFFFF} - Игровой уровень (Указать от 1 до 25)\n");
					strcat(string, ""SERVER"Money{FFFFFF} - Деньги (Указать от 10000 до 3000000)\n");
					strcat(string, ""SERVER"Donat{FFFFFF} - Донат (Указать от 1 до 5000)\n");
					strcat(string, ""SERVER"Vip{FFFFFF} - Vip статус (Указать от 3 д. до 30 д.)\n");
				    return SPD(playerid, dAddPromoMenu, d_info, ""SERVER" Создание Промо-кода", string, "Начать", "Отмена");
				}
			}
		}
		case dAddRadar:
		{
			if(!response) return 1;
	        {
				if(GetPVarInt(playerid, "CreateRadar")) return SEM(playerid, "Вы уже устанавливаете радар!");
				{
					SetPVarInt(playerid, "TypeRadar", listitem);
					new Float: posX, Float: posY, Float: posZ;
					GetPlayerPos(playerid, posX, posY, posZ);
					SendClientMessage(playerid, cGREEN, "Вы начали установку радара. Поставьте радар в любую удобную для Вас позицию..");
					new radar = CreateDynamicObject(18880, posX+1, posY, posZ-0.35, 0.0, 0.0, 0.0, 0, 0, 0, 300.0, 300.0);
					SetPVarInt(playerid, "CreateRadar", 1);
					SetPVarInt(playerid, "RadarObject", radar);
					EditObject(playerid, radar);
				}
			}
		}
		case dAddATM:
		{
			if(!response) return DialogAddMenu(playerid);
			{
				if(GetPVarInt(playerid, "CreateATM")) return SEM(playerid, "Вы уже устанавливаете Банкомат!");
				{
					new Float:x, Float:y, Float:z, Float:angle;
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, angle);
					x += floatsin(-angle, degrees);
					y += floatcos(-angle, degrees);
					new AtmObject;
					SCM(playerid, cSERVER, "Чтобы отменить установку, нажмите: ESC");
					SCM(playerid, cSERVER, "Чтобы установить, выберите подходящую позицию и нажмите на иконку СОХРАНИТЬ");
					AtmObject = CreateObject(2942, x, y, z-0.35, 0.0, 0.0, 0.0);
					SetPVarInt(playerid, "CreateATM", 1);
					SetPVarInt(playerid, "AtmObject", AtmObject);
					EditObject(playerid, AtmObject);
				}
			}
		}
		case dAddBilBord: // Система билбордов
		{
			if(!response) return DialogAddMenu(playerid);
			{
				if(GetPVarInt(playerid, "CreateBilBord")) return SEM(playerid, "Вы уже устанавливаете Рекламный щит!");
				{
					new Float:x, Float:y, Float:z, Float:angle;
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, angle);
					x += floatsin(-angle, degrees);
					y += floatcos(-angle, degrees);
					new BilBordObject;
					SCM(playerid, cSERVER, "Чтобы отменить установку, нажмите: ESC");
					SCM(playerid, cSERVER, "Чтобы установить, выберите подходящую позицию и нажмите на иконку СОХРАНИТЬ");
					// (4416 - 4429) Без освещения, (3613 - 3646) С освещением, (4430 - 4432) Цилиндрические
					BilBordObject = CreateObject(3613, x, y, z-0.35, 0.0, 0.0, 0.0);
					SetPVarInt(playerid, "CreateBilBord", 1);
					SetPVarInt(playerid, "BilBordObject", BilBordObject);
					EditObject(playerid, BilBordObject);
				}
			}
		}
		case dAddPromoMenu:
		{
			if(!response) return DialogAddMenu(playerid);
			{
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoCreate:
		{
			if(!response)
			{
				new string[1024];
				strcat(string, "{FFFFFF}Добро пожаловать на создание Промо-кода!\n");
				strcat(string, "Для того что бы создать Промо-код\n\n");
				strcat(string, ""SERVER"#{FFFFFF} - Данный символ без которого нельзя создавать Промо-код!\n");
				strcat(string, ""SERVER"bonus{FFFFFF} - Название Промо-кода должно быть уникальным и не повторяться!\n");
				strcat(string, ""SERVER"24{FFFFFF} - данное число указывает сколько активаций в данном Промо-коде!\n\n");
				strcat(string, ""SERVER"[ Содержание приза - Промо-кода ]\n\n");
				strcat(string, ""SERVER"Exp{FFFFFF} - Игровой опыт (Указать от 5 до 500)\n");
				strcat(string, ""SERVER"Level{FFFFFF} - Игровой уровень (Указать от 1 до 25)\n");
				strcat(string, ""SERVER"Money{FFFFFF} - Деньги (Указать от 10000 до 3000000)\n");
				strcat(string, ""SERVER"Donat{FFFFFF} - Донат (Указать от 1 до 5000)\n");
				strcat(string, ""SERVER"Vip{FFFFFF} - Vip статус (Указать от 3 д. до 30 д.)\n");
				return SPD(playerid, dAddPromoMenu, d_info, ""SERVER" Создание Промо-кода", string, "Начать", "<< Назад");
			}
			else
			{
				switch(listitem)
				{
					case 0: // bonus
					{
						return SPD(playerid, dAddPromoName, d_input, ""WHITE"Создание Промо-кода | "SERVER"Название промо", "{FFFFFF}Введите название для Промо", "Указать", "<< Назад");
					}
					case 1: // Число активаций
					{
						return SPD(playerid, dAddPromoActiv, d_input, ""WHITE"Создание Промо-кода | "SERVER"Число активаций", "{FFFFFF}Укажите кол-во активаций", "Указать", "<< Назад");
					}
					case 2: // Кол-во опыта
					{
						return SPD(playerid, dAddPromoExp, d_info, ""WHITE"Создание Промо-кода | "SERVER"Кол-во опыта", "{FFFFFF}Укажите кол-во опыта", "Указать", "<< Назад");
					}
					case 3: // Кол-во уровня
					{
						return SPD(playerid, dAddPromoLevel, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во уровня", "{FFFFFF}Укажите кол-во уровня", "Указать", "<< Назад");
					}
					case 4: // Кол-во виртов
					{
						return SPD(playerid, dAddPromoMoney, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во виртов", "{FFFFFF}Укажите кол-во виртов", "Указать", "<< Назад");
					}
					case 5: // Кол-во R-Coins
					{
						return SPD(playerid, dAddPromoDonat, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во R-Coins", "{FFFFFF}Укажите кол-во доната", "Указать", "<< Назад");
					}
					case 6: // Кол-во дней VIP
					{
						return SPD(playerid, dAddPromoVip, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во дней VIP", "{FFFFFF}Укажите кол-во дней для VIP", "Указать", "<< Назад");
					}
				}
			}
		}
		case dAddPromoName: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoName = strlen(inputtext);
				if(!PromoName)
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoName, d_info, ""WHITE"Создание Промо-кода | "SERVER"Название промо", "{FFFFFF}Укажите название для Промо", "Указать", "<< Назад");
				}
				for(new i = PromoName; i != 0; --i) // Проверка на регистер ввода!
				{
					switch(inputtext[i]) // проверка на русскую раскладку
					{
						case 'А'..'Я', 'а'..'я', ' ', '=':
						{
							PlayerPlaySound(playerid, 1150,0,0,0);
							return SPD(playerid, dAddPromoName, d_input, ""WHITE"Создание Промо-кода | "SERVER"Название промо", "{FFFFFF}Укажите название для Промо", "Указать", "<< Назад");
						}
					}
				}
				SetString(PrI[TOTALPROMO][prName], inputtext);
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoActiv: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoActive = strval(inputtext);
				if(!strval(inputtext))
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoActiv, d_input, ""WHITE"Создание Промо-кода | "SERVER"Число активаций", "{FFFFFF}Укажите кол-во активаций", "Указать", "<< Назад");
				}
				PrI[TOTALPROMO][prActive] = PromoActive;
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoExp: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoExp = strval(inputtext);
				if(!strval(inputtext))
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoExp, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во опыта", "{FFFFFF}Укажите кол-во опыта", "Указать", "<< Назад");
				}
				PrI[TOTALPROMO][prPrizExp] = PromoExp;
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoLevel: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoLevel = strval(inputtext);
				if(!strval(inputtext))
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoLevel, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во уровня", "{FFFFFF}Укажите кол-во уровня", "Указать", "<< Назад");
				}
				PrI[TOTALPROMO][prPrizLevel] = PromoLevel;
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoMoney: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoMoney = strval(inputtext);
				if(!strval(inputtext))
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoMoney, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во виртов", "{FFFFFF}Укажите кол-во виртов", "Указать", "<< Назад");
				}
				PrI[TOTALPROMO][prPrizMoney] = PromoMoney;
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoDonat: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoDonat = strval(inputtext);
				if(!strval(inputtext))
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoDonat, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во R-Coins", "{FFFFFF}Укажите кол-во доната", "Указать", "<< Назад");
				}
				PrI[TOTALPROMO][prPrizDonat] = PromoDonat;
				return DialogAddPromo(playerid);
			}
		}
		case dAddPromoVip: //
		{
			if(!response) return DialogAddPromo(playerid);
			{
				new PromoVip = strval(inputtext);
				if(!strval(inputtext))
				{
					PlayerPlaySound(playerid, 1150,0,0,0);
					return SPD(playerid, dAddPromoVip, d_input, ""WHITE"Создание Промо-кода | "SERVER"Кол-во дней VIP", "{FFFFFF}Укажите кол-во дней для VIP", "Указать", "<< Назад");
				}
				PrI[TOTALPROMO][prPrizVip] = PromoVip;
				return DialogAddPromo(playerid);
			}
		}
		//
		case dAdminIntList:
		{
			if(!response) return 1;
	        {
				new string[1024];
		        switch(listitem)
				{
					case 0: // Работы
					{
	    				strcat(string, ""SERVER"1. {FFFFFF}Шахта\n");
						SPD(playerid, dAdminIntListJob, d_list, ""SERVER"Работы", string, "Выбрать", "Закрыть");
					}
					case 1: // Организации
					{
						new org[60], allorgs[512];
						for(new i = 1; i <= TOTALFRAC; i ++)
						{
							format(org, 60, ""SERVER"%i. {ffffff}%s\n", i, FracI[i][fName]);
							strcat(allorgs, org);
						}
						SPD(playerid, dAdminIntListFrac, d_list, ""SERVER"Организации", allorgs, "Выбрать", "Закрыть");
					}
					case 2: // Дома
					{
						strcat(string, ""SERVER"1. {FFFFFF}Дом - Эконом\n");
						strcat(string, ""SERVER"2. {FFFFFF}Дом - Средний\n");
						strcat(string, ""SERVER"3. {FFFFFF}Дом - Высокий\n");
						strcat(string, ""SERVER"4. {FFFFFF}Дом - Элитный\n");
						strcat(string, ""SERVER"5. {FFFFFF}Дом - Люкс\n");
						strcat(string, ""SERVER"6. {FFFFFF}Дом - Семейный\n");
						SPD(playerid, dAdminIntListHouse, d_list, ""SERVER"Дома", string, "Выбрать", "Закрыть");
					}
					case 3: // Гаражи
					{
						strcat(string, ""SERVER"1. {FFFFFF}Гараж на 1 место\n");
						strcat(string, ""SERVER"2. {FFFFFF}Гараж на 2 места\n");
						strcat(string, ""SERVER"3. {FFFFFF}Гараж на 3 места\n");
						strcat(string, ""SERVER"4. {FFFFFF}Гараж на 4 места\n");
						strcat(string, ""SERVER"5. {FFFFFF}Гараж на 5 мест\n");
						SPD(playerid, dAdminIntListGarage, d_list, ""SERVER"Гаражи", string, "Выбрать", "Закрыть");
					}
				}
			}
		}
		case dAdminIntListJob: // Работы
		{
			if(!response) return callcmd::atp(playerid);
	        {
		        switch(listitem)
				{
					case 0: // Шахта
					{
						/*SetPlayerPos(playerid, 2628.7937, 1792.1102, 3502.0017);
						SetPlayerFacingAngle(playerid, 180.0);*/

						SetPlayerPos(playerid, 2639.4407, 1774.9249, 3425.9968);
						SetPlayerFacingAngle(playerid, 0.0);
						SetPlayerVirtualWorld(playerid, 5);
						SetPlayerInterior(playerid, 5);
					}
					case 1: //
					{

					}
					case 2: //
					{

					}
				}
			}
		}
		case dAdminIntListFrac: // Организации
		{
			if(!response) return callcmd::atp(playerid);
	        {
		        SetPlayerPos(playerid, FracI[listitem+1][fPosEnter][0], FracI[listitem+1][fPosEnter][1], FracI[listitem+1][fPosEnter][2]);
				SetPlayerFacingAngle(playerid, FracI[listitem+1][fPosEnter][3]);
				SetPlayerInterior(playerid, FracI[listitem+1][fID]);
				SetPlayerVirtualWorld(playerid, FracI[listitem+1][fID]);
				SetCameraBehindPlayer(playerid);
			}
		}
		case dAdminIntListHouse: // Дома
		{
			if(!response) return callcmd::atp(playerid);
	        {
		        switch(listitem)
				{
					case 0:
					{
						SetPlayerPos(playerid, 1172.4321, 199.8343, 1113.3772);
						SetPlayerFacingAngle(playerid, 180);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 1:
					{
						SetPlayerPos(playerid, 276.2666, -123.6176, 1444.1788);
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 2:
					{
						SetPlayerPos(playerid, 394.9451, 31.3584, 1585.6439);
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 3:
					{
						return 1;
					}
				}
			}
		}
		case dAdminIntListGarage: // Гаражи
		{
			if(!response) return callcmd::atp(playerid);
	        {
		        switch(listitem)
				{
					case 0:
					{
						SetPlayerPos(playerid, -530.5142, 2121.7437, 1002.8203);
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 1:
					{
						SetPlayerPos(playerid, -3.5110, -421.2728, 1301.4976);
						SetPlayerFacingAngle(playerid, -90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 2:
					{
						SetPlayerPos(playerid, 1516.0605, -309.9798, 1701.4980);
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 3:
					{
						SetPlayerPos(playerid, 1436.0486, 6.9186, 1801.4979);
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
					case 4:
					{
						SetPlayerPos(playerid, 1913.6436, 2312.3291, 1601.4982);
						SetPlayerFacingAngle(playerid, 90);
						SetCameraBehindPlayer(playerid);
						FreezePlayer(playerid, 4500);
					}
				}
			}
		}
		// Мои штрафы
		case dShtrafInfo:
		{
			if(!response) return 1;
			{
				new string[154];
			    switch(listitem)
			    {
					case 0: format(string, sizeof string, "SELECT * FROM "T_TICKETS" WHERE `tName` = '%s' AND `tID` = 1", GetName(playerid));
					case 1: format(string, sizeof string, "SELECT * FROM "T_TICKETS" WHERE `tName` = '%s' AND `tID` = 2", GetName(playerid));
			    }
				mysql_tquery(mysql, string, "CheckInfoShtraf", "i", playerid);
			}
		}
		// Меню лидера организации
		case dLeaderPanel:
		{
		    if(!response) return 1;
		    {
				new Float: PosCord[4], fracid = GetFrac(playerid);
				GetPlayerPos(playerid, PosCord[0], PosCord[1], PosCord[2]);
				GetPlayerFacingAngle(playerid, PosCord[3]);
		        switch(listitem)
		        {
					case 0: // Изменить место появления (спавна)
					{
				        FracI[fracid][fPosSpawn][0] = PosCord[0];
				        FracI[fracid][fPosSpawn][1] = PosCord[1];
				        FracI[fracid][fPosSpawn][2] = PosCord[2];
				        FracI[fracid][fPosSpawn][3] = PosCord[3];

						update_float_mysql(T_FRAC, "fPosSpawnX", FracI[fracid][fPosSpawn][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSpawnY", FracI[fracid][fPosSpawn][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSpawnZ", FracI[fracid][fPosSpawn][2], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSpawnA", FracI[fracid][fPosSpawn][3], "fID", fracid);

						SCMInfo(playerid, "Новое место появления в организации установлено!");
						// SaveFrac(fracif);
					}
					case 1: // Изменить место раздевалки
					{
					    if(FracI[fracid][fID] != FRAC_VH)
					    {
							DestroyDynamicPickup(picFracSkin[fracid]);
							DestroyDynamic3DTextLabel(infoFracSkin[fracid]);

					        FracI[fracid][fPosSkin][0] = PosCord[0];
					        FracI[fracid][fPosSkin][1] = PosCord[1];
					        FracI[fracid][fPosSkin][2] = PosCord[2];

							picFracSkin[fracid] = CreateDynamicPic(1275, 23, FracI[fracid][fPosSkin][0], FracI[fracid][fPosSkin][1], FracI[fracid][fPosSkin][2], FracI[fracid][fID], FracI[fracid][fID]);
							infoFracSkin[fracid] = CreateDynamic3DTextLabel(""SERVER"Раздевалка\n{BBBBBB}Нажмите: Alt", cSERVER, FracI[fracid][fPosSkin][0], FracI[fracid][fPosSkin][1], FracI[fracid][fPosSkin][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

							update_float_mysql(T_FRAC, "fPosSkinX", FracI[fracid][fPosSkin][0], "fID", fracid);
							update_float_mysql(T_FRAC, "fPosSkinY", FracI[fracid][fPosSkin][1], "fID", fracid);
							update_float_mysql(T_FRAC, "fPosSkinZ", FracI[fracid][fPosSkin][2], "fID", fracid);

							SCMInfo(playerid, "Новое место раздевалки установлено!");
						}
					}
					case 2: // Изменить место склада
					{
					    DestroyDynamicPickup(picFracGun[fracid]);
					    DestroyDynamic3DTextLabel(infoFracGun[fracid]);

						FracI[fracid][fPosGun][0] = PosCord[0];
				        FracI[fracid][fPosGun][1] = PosCord[1];
				        FracI[fracid][fPosGun][2] = PosCord[2];

					   	// Оружейная в организации
						infoFracGun[fracid] = CreateDynamic3DTextLabel(""SERVER"Склад", cSERVER, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

						if(FracI[fracid][fID] == FRAC_SMP) picFracGun[fracid] = CreateDynamicPic(11738, 23, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2], FracI[fracid][fID], -1);
						else if(FracI[fracid][fID] == FRAC_SMI) picFracGun[fracid] = CreateDynamicPic(1253, 23, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2], FracI[fracid][fID], -1);
						else picFracGun[fracid] = CreateDynamicPic(353, 23, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2], FracI[fracid][fID], -1);

						update_float_mysql(T_FRAC, "fPosGunX", FracI[fracid][fPosGun][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosGunY", FracI[fracid][fPosGun][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosGunZ", FracI[fracid][fPosGun][2], "fID", fracid);

						SCMInfo(playerid, "Новое место оружейной установлено!");
					}
					case 3: // Изменить место информации
					{
						if(fracid == FRAC_OPGB || fracid == FRAC_OPGY || fracid == FRAC_MAFIAH || fracid == FRAC_MAFIAR)
							return SEM(playerid, "Данная функция для Вашей организации недоступна!"), callcmd::lmenu(playerid);
						{
							DestroyDynamicPickup(picFracInfo[fracid]);
							DestroyDynamic3DTextLabel(infoFracInfo[fracid]);

							FracI[fracid][fPosInfo][0] = PosCord[0];
							FracI[fracid][fPosInfo][1] = PosCord[1];
							FracI[fracid][fPosInfo][2] = PosCord[2];

							picFracInfo[fracid] = CreateDynamicPic(1239, 23, FracI[fracid][fPosInfo][0], FracI[fracid][fPosInfo][1], FracI[fracid][fPosInfo][2], FracI[fracid][fID], FracI[fracid][fID]);
							infoFracInfo[fracid] = CreateDynamic3DTextLabel(""SERVER"Информационный раздел\n{BBBBBB}Нажмите: Alt", cSERVER, FracI[fracid][fPosInfo][0], FracI[fracid][fPosInfo][1], FracI[fracid][fPosInfo][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

							update_float_mysql(T_FRAC, "fPosInfoX", FracI[fracid][fPosInfo][0], "fID", fracid);
							update_float_mysql(T_FRAC, "fPosInfoY", FracI[fracid][fPosInfo][1], "fID", fracid);
							update_float_mysql(T_FRAC, "fPosInfoZ", FracI[fracid][fPosInfo][2], "fID", fracid);

							SCMInfo(playerid, "Новое место информации установлено!");
						}
					}
					case 4: // Изменить место загрузки склада
					{
					    DestroyDynamic3DTextLabel(infoLoadGun[fracid]);

						FracI[fracid][fPosLoadGun][0] = PosCord[0];
				        FracI[fracid][fPosLoadGun][1] = PosCord[1];
				        FracI[fracid][fPosLoadGun][2] = PosCord[2];

						update_float_mysql(T_FRAC, "fPosLoadGunX", FracI[fracid][fPosLoadGun][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosLoadGunY", FracI[fracid][fPosLoadGun][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosLoadGunZ", FracI[fracid][fPosLoadGun][2], "fID", fracid);
						infoLoadGun[fracid] = CreateDynamic3DTextLabel(""SERVER"Загрузка материалов\n\n{BBBBBB}Нажмите: Гудок", -1, FracI[fracid][fPosLoadGun][0], FracI[fracid][fPosLoadGun][1], FracI[fracid][fPosLoadGun][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

						SCMInfo(playerid, "Новое место загрузки склада установлено!");
					}
					case 5: return callcmd::lmenu(playerid);
					case 6: // Автопарк организации
					{
						new stringCarsFrac[100];
						format(stringCarsFrac, sizeof(stringCarsFrac),"SELECT * FROM "T_CARFRAC" WHERE `fcFrac` = '%i'", GetFrac(playerid));
						mysql_tquery(mysql, stringCarsFrac, "LoadAvtoParkFrac", "ii", playerid, GetFrac(playerid));
					}
					case 7: // Заправить
					{
						if(FracI[GetFrac(playerid)][fBank] < 25000)return SEM(playerid, "В банке организации недостаточно средств!");
						{
			                FracI[GetFrac(playerid)][fBank] -= 25000;
			                FracI[FRAC_AO][fBank] += 25000;

							for(new i; i < TOTALCARFRAC; i++)
							{
								if(FC[i][fcPos][0] == 0 && FC[i][fcPos][1] == 0 && FC[i][fcPos][2] == 0) continue;
								if(FC[i][fcFrac] != GetFrac(playerid)) continue;
								if(!FC[i][fcModel]) continue;

								VehicleInfo[FCar[i]][vFuel] = VehStats[FCar[i]][vMaxFuel];
							}
							new str[124];
							format(str, sizeof(str), "[R] %s %s [%d] заправил транспорт организации!", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid), playerid);
							SCMFrac(GetFrac(playerid), cGREEN, str);

							SCM(playerid, cGREEN, "Вы успешно заправили транспорт!");
							callcmd::lmenu(playerid);
						}
					}
					case 8: // Зареспавнить
					{
						if(FracI[GetFrac(playerid)][fBank] < 15000)return SEM(playerid, "В банке организации недостаточно средств!");
						{

							static const ftm_str[] = "[R] %s %s [%d] заспавнил транспорт организации!";
							new str[sizeof(ftm_str) + 24 + 5 + 30];

							format(str, sizeof(str), ftm_str, GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid), playerid);
							SCMFrac(GetFrac(playerid), cGREEN, str);

			                FracI[GetFrac(playerid)][fBank] -= 15000;
			                FracI[FRAC_AO][fBank] += 15000;

	      					for(new i; i < TOTALCARFRAC; i++)
							{
								if(FC[i][fcPos][0] == 0 && FC[i][fcPos][1] == 0 && FC[i][fcPos][2] == 0) continue;
								if(FC[i][fcFrac] != GetFrac(playerid)) continue;
								if(!FC[i][fcModel]) continue;

								if(IsVehicleOccupied(FCar[i])) continue;

								SetVehicleToRespawn(FCar[i]);
								SetEngine(FCar[i], false);
							}
							SCM(playerid, cGREEN, "Вы успешно заспавнили транспорт!");
							SaveFrac(GetFrac(playerid));
							callcmd::lmenu(playerid);
						}
					}
				}
		    }
		}
		case dSettingCarFrac:
		{
		    new carid = ShowFracCar[playerid][listitem];
			if(!response) return callcmd::lmenu(playerid);
			{
				new str[250], string[1024];
				format(str, sizeof(str), ""SERVER"Управление транспортом {FFFFFF}- %i (%i)", FC[carid][fcModel], FCar[carid]); strcat(string, str);

				string[0] = EOS;
				strcat(string, "№. Наименование\n");
                strcat(string, ""SERVER"Информация о транспорте\n");
                strcat(string, ""SERVER"1. {FFFFFF}Сменить позицию\n");
                strcat(string, ""SERVER"2. {FFFFFF}Сменить доступность должности\n");
                strcat(string, ""SERVER"3. {FFFFFF}Найти транспорт\n");
                strcat(string, ""SERVER"4. {FFFFFF}Зареспавнить транспорт\n");
                strcat(string, ""SERVER"5. {FFFFFF}Заправить транспорт\n");
				SPD(playerid, dSetCarFrac, d_tlisth, str, string, "Выбрать", "<< Назад");
				SetPVarInt(playerid, "CarFracID", carid);
			}
		}
		case dSetCarFrac:
		{
			if(!response)
			{
				new str[512], string[2048], cars;
				string[0] = EOS;
				strcat(string, "№. Модель (ID)\tДоступен\tТопливо\n");
				for(new i; i < TOTALCARFRAC; i++)
				{
				    if(FC[i][fcPos][0] == 0 && FC[i][fcPos][1] == 0 && FC[i][fcPos][2] == 0) continue;
				    if(FC[i][fcFrac] != GetFrac(playerid)) continue;
				    if(!FC[i][fcModel]) continue;

					format(str, sizeof(str), ""SERVER"%i. {FFFFFF}[ %i ] %s (%i)\t"SERVER"%s [%i]\t"WHITE"%.0f л.\t\n",
					cars+1, FC[i][fcModel], VehStats[FC[i][fcModel]-400][vName], FCar[i], GetRangName[GetFrac(playerid)][VehicleInfo[FCar[i]][vFracRang]-1], VehicleInfo[FCar[i]][vFracRang], VehicleInfo[FCar[i]][vFuel]);
					strcat(string, str);

					ShowFracCar[playerid][i] = FCar[i];
					cars++;
				}
				return SPD(playerid, dSettingCarFrac, d_tlisth, ""SERVER"Список транспортом", string, "Выбрать", "<< Назад");
			}
			else
			{
            	new carid = GetPVarInt(playerid, "CarFracID");
				switch(listitem)
				{
					case 0: // Информация о транспорте
					{
						new str[156], string[1024];
						format(str, sizeof(str), "{FFFFFF}Модель: %i (ID: %i)\n\n", VehicleInfo[FCar[carid]][vModel], FCar[carid]); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Название: "SERVER"%s\n", VehStats[FC[carid][fcModel]-400][vName]); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Цвет: %i (доп. %i)\n", VehicleInfo[FCar[carid]][vColor1], VehicleInfo[FCar[carid]][vColor2]); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Двери: %s\n", (!VehicleInfo[FCar[carid]][vDoors])?(""SERVER"Закрыты"):(""GREEN"Открыты")); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Топливо: %.0f л.\n", VehicleInfo[FCar[carid]][vFuel]); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Состояние: %.0f%%\n", VehicleInfo[FCar[carid]][vHealth]); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Покраска: %i\n\n", FC[carid][fcPaintJob]); strcat(string, str);
						format(str, sizeof(str), "{FFFFFF}Спец.сигнал: %s\n", (FC[carid][fcSirena])?(""GREEN"Установлен"):(""WAR"Отсутсвует")); strcat(string, str);
						SPD(playerid, dNull, d_info, ""SERVER"Информация о транспорте", string, "Закрыть", "");
					}
					case 1: // Сменить позицию
					{
					    if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы не в транспорте!");
					    if(GetPlayerVehicleID(playerid) != FCar[carid]) return SEM(playerid, "Вы должны находиться в транспорте который выбрали ранее!");
						{
						    new Float: carPos[4];
							GetVehiclePos(FCar[carid], carPos[0], carPos[1], carPos[2]);
							GetVehicleZAngle(FCar[carid], carPos[3]);

							FC[carid][fcPos][0] = carPos[0];
							FC[carid][fcPos][1] = carPos[1];
							FC[carid][fcPos][2] = carPos[2];
							FC[carid][fcPos][3] = carPos[3];

							update_float_mysql(T_CARFRAC, "fcPosX", FC[carid][fcPos][0], "fcID", FC[carid][fcID]);
							update_float_mysql(T_CARFRAC, "fcPosY", FC[carid][fcPos][1], "fcID", FC[carid][fcID]);
							update_float_mysql(T_CARFRAC, "fcPosZ", FC[carid][fcPos][2], "fcID", FC[carid][fcID]);
							update_float_mysql(T_CARFRAC, "fcPosA", FC[carid][fcPos][3], "fcID", FC[carid][fcID]);

							SetVehiclePos(FCar[carid], FC[carid][fcPos][0], FC[carid][fcPos][1], FC[carid][fcPos][2]);
							SetVehicleZAngle(FCar[carid], FC[carid][fcPos][3]);
							FSCM(playerid, -1, "Новая позиция для транспорта "SERVER"%i (%i){FFFFFF} установлено!", FC[carid][fcModel], FCar[carid]);
					    }
					}
					case 2: // Сменить доступность должности
					{
					    new org[60], allorgs[1024];
					   	strcat(allorgs, "# Звание\n");
						for(new i; i < MAX_RANGS; i ++)
						{
						    format(org, 60, ""SERVER"%i. {FFFFFF}%s\n", i+1, GetRangName[GetFrac(playerid)][i]);
							strcat(allorgs, org);
						}
						SPD(playerid, dSettingCarFracRang, d_tlisth, ""SERVER"Организация - Лидер", allorgs, "Выбрать", "<< Назад");
					}
					case 3: // Найти транспорт
					{
					    new locname[54];
					    format(locname, sizeof(locname), "Транспорт: %i (%i)", FC[carid][fcModel], FCar[carid]);

						GetVehiclePos(FCar[carid], FC[carid][fcPos][0], FC[carid][fcPos][1], FC[carid][fcPos][2]);
						SetPlayerGPS(playerid, FC[carid][fcPos][0], FC[carid][fcPos][1], FC[carid][fcPos][2], locname);
					}
					case 4: // Зареспавнить транспорт
					{
						if(FracI[GetFrac(playerid)][fBank] < 1000) return SEM(playerid, "В банке организации недостаточно средств!");
						{
							if(!IsTrailerAttachedToVehicle(GetVehicleTrailer(FCar[carid])))
							if(!IsVehicleOccupied(FCar[carid]))
							{
								SetVehicleToRespawn(FCar[carid]);
								FSCM(playerid, -1, "Вы "GREEN"успешно{FFFFFF} зареспавнили транспорта "SERVER"%i (%i)", FC[carid][fcModel], FCar[carid]);
					    	}
				    	}
					}
					case 5: // Заправить транспорт
					{
						if(FracI[GetFrac(playerid)][fBank] < VehStats[FCar[carid]][vMaxFuel]*30) return SEM(playerid, "В банке организации недостаточно средств!");
						if(FC[carid][fcFuel] >= VehStats[FCar[carid]][vMaxFuel]) return SEM(playerid, "У данного транспорта уже полный бензобак!");
						{
						    VehicleInfo[FCar[carid]][vFuel] = VehStats[FCar[carid]][vMaxFuel];
							FSCM(playerid, -1, "Вы "GREEN"успешно{FFFFFF} заправили транспорта "SERVER"%i (%i)", FC[carid][fcModel], FCar[carid]);
							FracI[GetFrac(playerid)][fBank] -= VehStats[FCar[carid]][vMaxFuel]*30;
        		 		}
					}
				}
			}
		}
		case dSettingCarFracRang:
		{
            new carid = GetPVarInt(playerid, "CarFracID");
			if(!response)
			{
				new str[250], string[1024];
				format(str, sizeof(str), ""SERVER"Управление транспортом {FFFFFF}- %i (%i)", FC[carid][fcModel], FC[carid]); strcat(string, str);

				string[0] = EOS;
				strcat(string, "№. Наименование\n");
                strcat(string, ""SERVER"Информация о транспорте\n");
                strcat(string, ""SERVER"1. {FFFFFF}Сменить позицию\n");
                strcat(string, ""SERVER"2. {FFFFFF}Сменить доступность должности\n");
                strcat(string, ""SERVER"3. {FFFFFF}Найти транспорт\n");
                strcat(string, ""SERVER"4. {FFFFFF}Зареспавнить транспорт\n");
                strcat(string, ""SERVER"5. {FFFFFF}Заправить транспорт\n");
				SPD(playerid, dSetCarFrac, d_tlisth, str, string, "Выбрать", "<< Назад");
				return 1;
			}
			else
			{
			    FSCM(playerid, -1, "Вы сменили доступ к транспорту с "GREEN"%s {FFFFFF}на "SERVER"%s"WHITE".", GetRangName[GetFrac(playerid)][FC[carid][fcRang]-1], GetRangName[GetFrac(playerid)][listitem]);

			    FC[carid][fcRang] = listitem+1;
				VehicleInfo[FCar[carid]][vFracRang] = listitem+1;
			    update_int_mysql(T_CARFRAC, "fcRang", FC[carid][fcRang], "fcID", FC[carid][fcID]);
			}
		}
		//
		case dFracInfo: // Информация от организации
		{
			new fid = GetPVarInt(playerid, "FracID");
			if(!response) return DeletePVar(playerid, "FracID");
			{
				new string[1024], stringer[124];
				stringer_f(""WHITE"Информационное меню | "SERVER"%s", FracI[fid][fName]);
				switch(fid) // Меню
				{
					case FRAC_AO:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список чиновников\n");
					}
					case FRAC_PPS:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список преступников\n");
					}
					case FRAC_DPS:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список штрафников\n");
					}
					case FRAC_FSB:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список особо опасных\n");
					}
					case FRAC_VH:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список военнослужащих\n");
					}
					case FRAC_SMP:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список персонала больницы\n");
					}
					case FRAC_SMI:
					{
						strcat(string, ""SERVER"1. {FFFFFF}Список сотрудников\n");
						strcat(string, ""SERVER"2. {FFFFFF}Заказать рекламу\n");
					}
				}
				SPD(playerid, dFracInfoMenu, d_list, stringer, string, "Выбрать", "<< Назад");
			}
		}
		case dFracInfoMenu:
		{
			new fid = GetPVarInt(playerid, "FracID");
			if(!response) return DialogFracInfo(playerid, fid);
			{
				switch(fid)
				{
					case FRAC_AO:
					{
						switch(listitem)
						{
							case 0: // Список чиновников
							{
								new string[1024], str[124];
								strcat(string, "№. Имя_Фамилия\tДолжность [Ранг]\tСтатутс работы\n");
								foreach(new i: Player)
								{
									//
									if(GetFrac(i) != FRAC_AO)
									{
										SPD(playerid, dNull, dNull, ""SERVER"Список чиновников", "На данный момент сотрудников нет!", "Закрыть", "");
										continue;
									}
									format(str, 124, "%s\t%s [%i]\t%s\n", GetName(i), GetRangName[GetFrac(i)][PI[i][FracRang]-1], PI[i][FracRang], (!FracDuty[i][PI[i][Frac]])?("Не работает"):("Работает"));
									strcat(string, str);
									SPD(playerid, dNull, d_tlisth, ""WHITE"Админситрация области | "SERVER"Список чиновников", string, "Закрыть", "");
								}
							}
						}
					}
					case FRAC_PPS:
					{
						switch(listitem)
						{
							case 0: // Список преступников
							{

							}
						}
					}
					case FRAC_DPS:
					{
						switch(listitem)
						{
							case 0: // Список штрафников
							{

							}
						}
					}
					case FRAC_FSB:
					{
						switch(listitem)
						{
							case 0: //
							{

							}
						}
					}
					case FRAC_VH:
					{
						switch(listitem)
						{
							case 0: // Список военнослужащих
							{

							}
						}
					}
					case FRAC_SMP:
					{
						switch(listitem)
						{
							case 0: // Список персонала больницы
							{

							}
						}
					}
					case FRAC_SMI:
					{
						switch(listitem)
						{
							case 0: // Список сотрудников
							{

							}
							case 1: // Заказать / управление рекламой
							{
								new string[1024], str[124];
								for(new b = 1; b <= TOTALBILBORD; b++)
								{
									if(GetString(BI[b][bOwner], "The Stats"))
									{
										strcat(string, "Номер рекламного щита\tСтоимость аренды на 1 д.\tСтатус\n");
										foreach(new i: Player)
										{
											if(GetString(BI[b][bOwner], GetName(i))) continue;
											format(str, sizeof(str), "Рекламный щит "SERVER"№ %i\t%s рублей\t"GREEN"Свободен\n", BI[b][bID], ConvertCash(BI[b][bPrice])); strcat(string, str);
										}
										return SPD(playerid, dNull, d_tlisth, ""SERVER"Список рекламных щитов", string, "Закрыть", "");
									}
									else if(GetString(BI[b][bOwner], GetName(playerid)))
									{
										return SPD(playerid, dNull, d_info, ""SERVER"Управление рекламным щитом", "У Вас нет в аренде рекламного щита!", "Закрыть", "");
									}
								}
							}
						}
					}
				}
			}
		}
		case dFracGun: // Оружие для организации
		{
			if(!response) return 1;
			{
				switch(GetFrac(playerid))
				{
					case FRAC_AO: // AO
					{
						switch(listitem)
						{
							case 0:
							{
								new Float: arm;
								GetPlayerArmour(playerid, arm);
								if(arm > 65) SEM(playerid, "Вы не нуждаетесь в броне!");
								else SetPlayerArmour(playerid, 100);
								new string[256];
								string_f("[R] %s %s взял(-а) со склада Бронижелет", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
								MeAction(playerid, "взял(-а) со склада Бронижелет");
							}
							case 1: // Дубинка
							{
								GivePlayerWeapon(playerid, 3, 1);
								SetPVarInt(playerid, "TazerGun", 1);

								new string[256];
								string_f("[R] %s %s взял(-а) со склада Дубинку", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
								MeAction(playerid, "взял(-а) со склада Дубинку");
							}
							case 2: // Пистолет шокер - 15 пт.
							{
								GivePlayerWeapon(playerid, 23, 15);
								SetPVarInt(playerid, "TazerGun", 1);

								new string[256];
								string_f("[R] %s %s взял(-а) со склада Шокер (15 пт)", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
								MeAction(playerid, "взял(-а) со склада Шокер (15 пт)");
							}
						}
					}
					case FRAC_PPS..FRAC_VH: // ППС,ДПС,ФСБ,ВЧ
					{
						switch(listitem)
						{
							case 0:
							{
								new Float: arm;
								GetPlayerArmour(playerid, arm);
								if(arm > 65) SEM(playerid, "Вы не нуждаетесь в броне!");
								else SetPlayerArmour(playerid, 100);
								new string[256];
								string_f("[R] %s %s взял(-а) со склада Бронижелет", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
								MeAction(playerid, "взял(-а) со склада Бронижелет");
							}
							case 1: // Дубинка
							{
								GivePlayerWeapon(playerid, 3, 1);
								SetPVarInt(playerid, "TazerGun", 1);

								new string[256];
								string_f("[R] %s %s взял(-а) со склада Дубинку", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
								MeAction(playerid, "взял(-а) со склада Дубинку");
							}
							case 2:
							{
								if(GetFrac(playerid) != FRAC_FSB) // Пистолет шокер - 15 пт.
								{
									GivePlayerWeapon(playerid, 23, 15);
									SetPVarInt(playerid, "TazerGun", 1);

									new string[256];
									string_f("[R] %s %s взял(-а) со склада Шокер (15 пт)", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
									SCMFrac(GetFrac(playerid), cGREEN, string);
									MeAction(playerid, "взял(-а) со склада Шокер (15 пт)");
								}
								else // Пистолет Desert Eagle - 140 пт.
								{
									if(GetFrac(playerid) && PI[playerid][FracRang] < 2) return SEM(playerid, "Вам не доступно данное оружие!");
									GivePlayerWeapon(playerid, 24, 140);

									new string[256];
									string_f("[R] %s %s взял(-а) со склада Desert Eagle (140 пт)", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
									SCMFrac(GetFrac(playerid), cGREEN, string);
									MeAction(playerid, "взял(-а) со склада Desert Eagle (140 пт)");
								}
							}
							case 3:
							{
								if(GetFrac(playerid) != FRAC_FSB) //  МП5 - 270 пт.
								{
									if(GetFrac(playerid) && PI[playerid][FracRang] < 3) return SEM(playerid, "Вам не доступно данное оружие!");
									GivePlayerWeapon(playerid, 29, 270);

									new string[256];
									string_f("[R] %s %s взял(-а) со склада МП5 (270 пт)", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
									SCMFrac(GetFrac(playerid), cGREEN, string);
									MeAction(playerid, "взял(-а) со склада МП5 (270 пт)");
								}
								else // АК-47 - 350 пт.
								{
									if(GetFrac(playerid) && PI[playerid][FracRang] < 5) return SEM(playerid, "Вам не доступно данное оружие!");
									GivePlayerWeapon(playerid, 30, 350);

									new string[256];
									string_f("[R] %s %s взял(-а) со склада АК-47 (350 пт)", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
									SCMFrac(GetFrac(playerid), cGREEN, string);
									MeAction(playerid, "взял(-а) со склада АК-47 (350 пт)");
								}
							}
							case 4: // СВД - 15 пт.
							{
								if(GetFrac(playerid) && PI[playerid][FracRang] < 7) return SEM(playerid, "Вам не доступно данное оружие!");
								GivePlayerWeapon(playerid, 34, 15);

								new string[256];
								string_f("[R] %s %s взял(-а) со склада СВД (15 пт)", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
								SCMFrac(GetFrac(playerid), cGREEN, string);
								MeAction(playerid, "взял(-а) со склада СВД (15 пт)");
							}
						}
					}
					case FRAC_SMP: // СМП
					{
						switch(listitem)
						{
							case 0: // Взять
							{
								if(MedPland[playerid] >= 15) return SEM(playerid, "У Вас достаточно медикоментов!");
								{
									if(MedPland[playerid] <= 5) MedPland[playerid] = 15;
									MedPland[playerid] = 15;
									new string[64];
									string_f("[R] %s %s взял(-а) в орденаторской 15 медикоментов.", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
									SCMFrac(GetFrac(playerid), cGREEN, string);
									FSCM(playerid, -1, "Вы успешно взяли "SERVER"%i шт{FFFFFF} медикоментов.", MedPland[playerid]);
								}
							}
							case 1: // Положить
							{
								if(!MedPland[playerid]) return SEM(playerid, "У Вас нет медикоментов!");
								{
									new string[80];
									string_f("[R] %s %s положил(-а) в орденаторскую %i шт медикоментов.", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid), MedPland[playerid]);
									SCMFrac(GetFrac(playerid), cGREEN, string);
									FSCM(playerid, -1, "Вы успешно положили "SERVER"%i шт{FFFFFF} медикоментов.", MedPland[playerid]);
									MedPland[playerid] = 0;
								}
							}
						}
					}
				}
			}
		}
		case dLeaveFrac:
		{
		    if(!response) return 1;
		    else return FracLeave(playerid);
		}
		// Система мероприятий
		case dSettingMP:
		{
	        if(!response) return 1;
	        {
				switch(listitem)
			  	{
			  	    case 0:
			  	    {
						if(MP[mpCord][0] != 0.0 && MP[mpCord][1] != 0.0 && MP[mpCord][2] != 0.0 || MP[mpAdmin][0] != EOS)
						{
							if(!MP[mpStatsus])
							{
								MP[mpStatsus] = true;
								//
								for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
								SCMAll(cBLUE, "===================================================================================");
								foreach(new i: Player)
			  	        		{
									FSCM(i, cBLUE, "[ MP ] Начинаеться мероприятие %s. Приз: %s рублей ", MP[mpName], ConvertCash(MP[mpPrize]));
									SCMAll(cBLUE, "[ MP ] Для участия в мероприятии введите команду /gotomp.");
									SCMAll(cBLUE, " ");
									FSCM(i, cBLUE, "[ MP ] Проводит мероприятие %i.", MP[mpAdmin]);
								}
								SCMAll(cBLUE, "====================================================================================");
							}
							else
							{
							    if(!MP[mpPrize]) return SEM(playerid, "Приз для мероприятия не установлен!"), callcmd::setmp(playerid);
							    if(MP[mpWinName][0] == EOS) return SEM(playerid, "Имя победителя не указано!"), callcmd::setmp(playerid);
			  					{
		                            MP[mpStatsus] = false;
									//
									for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
									SCMAll(cBLUE, "===================================================================================");
									foreach(new i: Player)
				  	        		{
										FSCM(i, cBLUE, "[ MP ] Мероприятие %s завершено.", MP[mpName]);
										FSCM(i, cBLUE, "[ MP ] Приз: %s %s | Победитель: %s", ConvertCash(MP[mpPrize]), (!MP[mpTypePrize])?("рублей"):("R-Coins"), MP[mpWinName]);
										SCMAll(cBLUE, " ");
										FSCM(i, cBLUE, "[ MP ] Проводил-(а) мероприятие %s.", MP[mpAdmin]);
									}
									SCMAll(cBLUE, "====================================================================================");
									//
									if(!MP[mpTypePrize]) GiveMoney(GetPlayerID(MP[mpWinName]), MP[mpPrize]);
									else GiveDonat(GetPlayerID(MP[mpWinName]), MP[mpPrize]);
									FSCM(GetPlayerID(MP[mpWinName]), cYELLOW, "Вам был выдан приз %s %s как победителю за участие в МП ''%s''.", ConvertCash(MP[mpPrize]), (!MP[mpTypePrize])?("рублей"):("R-Coins"), MP[mpName]);
									return RemoveMP();
								}
							}
						}
					}
					case 1:
					{
	               		// if(MP[mpName][0] == EOS) return SEM(playerid, "Укажите название для мероприятия!"); callcmd::setmp(playerid);
			  	        // if(MP[mpAdmin][0] == EOS) return SEM(playerid, "Нет администратора проводящего мероприятие!"); callcmd::setmp(playerid);
			  	        if(MP[mpCord][0] == 0.0 && MP[mpCord][0] == 0.0 && MP[mpCord][0] == 0.0) return SEM(playerid, "Координаты не установлены!"); callcmd::setmp(playerid);
						// if(!MP[mpPrize]) return SEM(playerid, "Не установлен приз мероприятия!"); callcmd::setmp(playerid);
						{
						  	if(!MP[mpTP]) MP[mpTP] = true;
						  	else MP[mpTP] = false;
					  		new string[100];
					  		string_f("[A] %s [%d] %s телепорт на мероприятия.", GetName(playerid), playerid, (!MP[mpTP])?(""RED"закрыл(-в)"GREEN""):(""SERVER"открыл(-в)"GREEN""));
							SCMAdmin(cGREEN, string);
					  		FSCM(playerid, -1, "Вы %s телепорт на мероприятия!", (!MP[mpTP])?(""RED"закрыли{FFFFFF}"):(""GREEN"открыли{FFFFFF}"));
							return callcmd::menump(playerid);
						}
					}
			  	    case 2: return callcmd::setmp(playerid);
			  	    case 3..4: return callcmd::mnmp(playerid);
			  	}
		  	}
		}
		case dSetMP:
		{
	        if(!response) return callcmd::menump(playerid);
			switch(listitem)
		  	{
		  	    case 8: return callcmd::setmp(playerid);
		  	    case 0: // Название
		  	    {
					SPD(playerid, dMpName, d_input, "Названия для мероприятия", "{FFFFFF}Укажите название для мероприятия от 7 до 32 символов в поле ниже:", "Указать", "<< Назад");
				}
				case 1: // Кто Проводит
				{
					if(MP[mpAdmin][0] == EOS)
					{
					    SetString(MP[mpAdmin], GetName(playerid));
						return callcmd::setmp(playerid);
					}
				    else if(MP[mpAdmin][0] != EOS && !GetString(MP[mpAdmin], GetName(playerid)))
					{
						FSCM(playerid, cGREY, "Мероприятие проводит администратор %s", MP[mpAdmin]);
						return callcmd::setmp(playerid);
					}
    				else if(GetString(MP[mpAdmin], GetName(playerid)))
    				{
						SPD(playerid, dNull, d_info, " ", "{FFFFFF}Вы желаете отменить себя в качестве проводящего мероприятия?", "Да", "Нет");
					}
				}
		  	    case 2: // Позиция ТП
		  	    {
		  	        new Float: x, Float: y, Float: z, Float: fa, interior, worlds;
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, fa);
					interior = GetPlayerInterior(playerid);
					worlds = GetPlayerVirtualWorld(playerid);

					MP[mpCord][0] = x;
					MP[mpCord][1] = y;
					MP[mpCord][2] = z;
					MP[mpCord][3] = fa;

					MP[mpInt] = interior;
					MP[mpWorld] = worlds;
					SCMInfo(playerid, "координаты для мероприятия установлены!");

					return callcmd::setmp(playerid);
				}
		  	    case 3: // Команд
		  	    {
		  	        SPD(playerid, dMpComans, d_input, "Кол-во команд на мероприятия", "{FFFFFF}Укажите кол-во команд в поле ниже:", "Указать", "<< Назад");
				}
		  	    case 4: // Скин
		  	    {
		  	        if(MP[mpComands] == 2) SPD(playerid, dMpSkin, d_input, "Внешность команд на мероприятия", "{FFFFFF}Укажите номер команды и номер скина через запятую в поле ниже:\n\nПример: 2, 105", "Указать", "<< Назад");
		  	        else SPD(playerid, dMpSkin, d_input, "Внешность команд на мероприятия", "{FFFFFF}Укажите номер скина в поле ниже:\n\nПример: 105", "Указать", "<< Назад");
				}
		  	    case 5: // Здоровье
		  	    {
		  	        if(!MP[mpStatsus]) return SEM(playerid, "Мероприятие не запущено!"); callcmd::setmp(playerid);
		  	        {
			  	        foreach(new i: Player)
			  	        {
			  	            if(!PlayerLogin[i]) continue;
			  	            if(!MP[mpPlayerStatsus][i]) continue;
					        new Float: mpHP;
							GetPlayerHealth(i, mpHP);
							if(mpHP >= 100) continue;
							SetPlayerHealth(i, 100);
						}
						callcmd::setmp(playerid);
					}
				}
		  	    case 6: // Броня
		  	    {
		  	        if(!MP[mpStatsus]) return SEM(playerid, "Мероприятие не запущено!"); callcmd::setmp(playerid);
		  	        {
			  	        foreach(new i: Player)
			  	        {
			  	            if(!PlayerLogin[i]) continue;
			  	            if(!MP[mpPlayerStatsus][i]) continue;
					        new Float: mpARM;
							GetPlayerArmour(i, mpARM);
							if(mpARM >= 100) continue;

							SetPlayerArmour(i, 100);
						}
						callcmd::setmp(playerid);
					}
				}
		  	    case 7: // Оружие
		  	    {
		  	        if(!MP[mpStatsus]) return SEM(playerid, "Мероприятие не запущено!"); callcmd::setmp(playerid);
		  	        {
		  	        	SPD(playerid, dMpGun, d_input, "Оружие на мероприятия", "{FFFFFF}Укажите номер оружия и патроны через запятую в поле ниже:\n\nПример: 24, 200", "Указать", "<< Назад");
		  	        }
				}
				case 9: // Тип приза
				{
				    if(!MP[mpTypePrize]) MP[mpTypePrize] = 1;
				    else MP[mpTypePrize] = 0;
					return callcmd::setmp(playerid);
				}
		  	    case 10: // Приз
		  	    {
		  	        if(!MP[mpTypePrize])
		  	        {
						SPD(playerid, dMpPeize, d_input, "Приз мероприятия", "{FFFFFF}\
							Приз выдается в игровой валюте!\n\n\
							Укажите кол-во виртов для победителя!\n\n\
							Примечание: от 10.000 рублей до 5.000.000 рублей",
						"Указать", "<< Назад");
					}
					else
					{
						SPD(playerid, dMpPeize, d_input, "Приз мероприятия", "{FFFFFF}\
							Приз выдается в R-Coins валюте!\n\n\
							Укажите кол-во R-Coins для победителя!\n\n\
							Примечание: от 500 R-Coins до 3.000 R-Coins",
						"Указать", "<< Назад");
					}
				}
		  	    case 11: // Победитель
		  	    {
		  	        if(!MP[mpStatsus]) return SEM(playerid, "Мероприятие не запущено!"); callcmd::setmp(playerid);
		  	        {
                        SPD(playerid, dWinMp, d_input, "Победитель на мероприятии", "{FFFFFF}Укажите Имя игрока в поле ниже:", "Указать", "<< Назад");
		  	        }
				}
		  	}
		}
		case dMpName:
		{
			if(!response) return callcmd::setmp(playerid);
			{
				SetString(MP[mpName], inputtext);
				FSCM(playerid, cGREEN, "вы указали название %s для мероприятия", MP[mpName]);
				return callcmd::setmp(playerid);
			}
		}
		case dMpComans:
		{
		    new mpComand = strval(inputtext);
			if(!response) return callcmd::setmp(playerid);
			{
			    if(!(1 <= mpComand <= 2)) return SEM(playerid, "Вы указали неверное кол-во команд для мероприятия!"); callcmd::setmp(playerid);
				{
					MP[mpComands] = mpComand;
					FSCM(playerid, cGREEN, "Вы указали %i команда для мероприятия", MP[mpComands]);
					return callcmd::setmp(playerid);
				}
			}
		}
		case dMpSkin:
		{
			if(!response) return callcmd::setmp(playerid);
			{
				new Skins1 = strval(inputtext), Skins2 = strval(inputtext);
			    if(MP[mpComands] == 2)
			    {
					if(sscanf(inputtext, "p<,>dd", Skins1, Skins2))
					{
					    SPD(playerid, dMpSkin, d_input, "Внешность команд на мероприятия", "{FFFFFF}Укажите номер команды и номер скина через запятую в поле ниже:\n\n{FF9900}Пример: 2, 105", "Указать", "<< Назад");
						return callcmd::setmp(playerid);
					}
					else
					{
					    foreach(new i: Player)
			  	        {
							MP[mpSkin][0] = Skins1;
							MP[mpSkin][1] = Skins2;
			  	            if(!MP[mpPlayerStatsus][i]) continue;

							if(MP[mpComands][i] == 1) SetPlayerSkin(i, MP[mpSkin][0]);
							if(MP[mpComands][i] == 2) SetPlayerSkin(i, MP[mpSkin][1]);
							FSCM(playerid, cGREEN, "Вы выдали команде %i скин %i участникам на мероприятии", MP[mpSkin][0], MP[mpPlayerStatsus][i]);
						}
						return callcmd::setmp(playerid);
					}
				}
				else
				{
					if(sscanf(inputtext, "d", Skins1))
					{
						SPD(playerid, dMpSkin, d_input, "Внешность команд на мероприятия", "{FFFFFF}Укажите номер скина в поле ниже:\n\nПример: 105", "Указать", "<< Назад");
						return callcmd::setmp(playerid);
					}
					else
					{
						MP[mpSkin][0] = Skins1;
						foreach(new i: Player)
						{
							if(!MP[mpPlayerStatsus][i]) continue;
							SetPlayerSkin(i, MP[mpSkin][0]);
							FSCM(playerid, cGREEN, "Вы выдали %i скин %i участникам на мероприятии", MP[mpSkin][0], MP[mpPlayerStatsus][i]);
						}
						return callcmd::setmp(playerid);
					}
				}
			}
		}
		case dMpGun: // Оружие
		{
			if(!response) return callcmd::setmp(playerid);
			{
			    new mpGuns = strval(inputtext), mpGunAmmo = strval(inputtext);
				if(sscanf(inputtext, "p<,>dd", mpGuns, mpGunAmmo))
				{
				    SPD(playerid, dMpGun, d_input, "Оружие на мероприятия", "{FFFFFF}Укажите номер оружия и патроны через запятую в поле ниже:\n\n{FF9900}Пример: 24, 200", "Указать", "<< Назад");
					return callcmd::setmp(playerid);
				}
				else
				{
				    MP[mpGun] = mpGuns;
				    foreach(new i: Player)
		  	        {
		  	            if(!MP[mpPlayerStatsus][i]) continue;

				    	GivePlayerWeapon(i, MP[mpGun], mpGunAmmo);
						FSCM(playerid, cGREEN, "Вы выдали оружие %i [пт. %i] %i участникам на мероприятии", MP[mpGun], mpGunAmmo, MP[mpPlayerStatsus][i]);
					}
					return callcmd::setmp(playerid);
				}
			}
		}
		case dMpPeize: // Победитель
		{
		    new mpPriz = strval(inputtext);
			if(!response) return callcmd::setmp(playerid);
			{
			    if(!MP[mpTypePrize])
			    {
					if(!mpPriz || mpPriz < 10000 || mpPriz > 5000000)
					{
						return SPD(playerid, dMpPeize, d_input, "Приз мероприятия", "{FFFFFF}\
							Приз выдается в игровой валюте!\n\n\
							Укажите кол-во виртов для победителя!\n\n\
							{FF00FF} Примечание: от 10.000 рублей до 5.000.000 рублей",
						"Указать", "<< Назад");
					}
				}
				else
				{
					if(!mpPriz || mpPriz < 500 || mpPriz > 3000)
					{
						return SPD(playerid, dMpPeize, d_input, "Приз мероприятия", "{FFFFFF}\
							Приз выдается в R-Coins валюте!\n\n\
							Укажите кол-во R-Coins для победителя!\n\n\
							Примечание: от 500 R-Coins до 3.000 R-Coins",
						"Указать", "<< Назад");
					}
				}
				MP[mpPrize] = mpPriz;
				FSCM(playerid, cGREEN, "Приз мероприятия установлен: %s %s", ConvertCash(MP[mpPrize]), (!MP[mpTypePrize])?("рублей"):("R-Coins"));
				return callcmd::setmp(playerid);
			}
		}
		case dWinMp:
		{
		    new WinNames = strlen(inputtext);
			if(!response) return callcmd::setmp(playerid);
			{
			    if(!(5 <= WinNames <= 24))
			    {
					return SPD(playerid, dWinMp, d_input, "Победитель на мероприятии", "{FFFFFF}Укажите Имя игрока в поле ниже:", "Указать", "<< Назад");
				}
				for(new i; i < strlen(inputtext); i++)
				{
				    switch(inputtext[i])
				    {
				        case 'A'..'Z', '_', 'a'..'z': continue;
				        default:
				        {
				    		return SPD(playerid, dWinMp, d_input, "Победитель на мероприятии", "{FFFFFF}Укажите Имя игрока в поле ниже:", "Указать", "<< Назад");
				        }
				    }
				}
				//
				SetString(MP[mpWinName], inputtext);
				return callcmd::setmp(playerid);
			}
		}
		// Промо-код
		case dPromoInfo:
		{
		    if(!response) return 1;
		    {
		        new string[512], str[56], i = listitem+1;

				format(str, sizeof(str), "{FFFFFF}Название: \t\t\t"SERVER"[%i] %s \n", PrI[i][prID], PrI[i][prName]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Дата создания: \t\t"SERVER"%s\n", PrI[i][prCreateData]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Создан: \t\t\t"SERVER"%s\n", PrI[i][prCreateAdmin]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Число активаций: \t\t"SERVER"%i\n", PrI[i][prActive]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Уровень для активаций: \t"SERVER"[ с %i по %i ]\n\n", PrI[i][prLevelDown], PrI[i][prLevelMax]); strcat(string, str);
				strcat(string, ""SERVER"[ Содержит ]\n\n");
				format(str, sizeof(str), "{FFFFFF}Игровой опыт: \t\t\t"SERVER"%i\n", PrI[i][prPrizExp]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Игровой уровень: \t\t"SERVER"%i\n", PrI[i][prPrizLevel]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Игровые деньги: \t\t"SERVER"%i\n", PrI[i][prPrizMoney]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Донат: \t\t\t\t"SERVER"%i\n", PrI[i][prPrizDonat]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Транспорт: \t\t\t"SERVER"%i\n", PrI[i][prPrizCar]); strcat(string, str);
				format(str, sizeof(str), "{FFFFFF}Дом: \t\t\t\t"SERVER"%i\n\n", PrI[i][prPrizHouse]); strcat(string, str);
				SPD(playerid, dNull, d_info, ""SERVER"Информаци о Промо Коде", string, "Закрыть", "");
		    }
		}
		case dInfoFamily:
		{
			if(!response)return 1;
			{
				new stringer[1024], str[512], allfam[1024];
	            switch(listitem)
	            {
	                case 0: // Список семей
	                {
	                    // strcat(allfam, "№\tНазвание\n");
						if(!TOTALFAM)
						{
							return SEM(playerid, "Еще нет ни одной семьи!"),
							SPD(playerid, dInfoFamily, d_list, "Информация", "\
								"SERVER"1. {FFFFFF}Список семей\n\
								"SERVER"2. {FFFFFF}Создать семью\n",
							"Выбрать", "Заакрыть");
						}
						else
						{
							for(new i = 1; i <= TOTALFAM; i++)
							{
								format(str, sizeof(str), "{%i - %s - %s\n", FamI[i][famID], FamI[i][famName], FamI[i][famCreator]);
								strcat(allfam, str);
							}
							SPD(playerid, dListFamily, d_list, "{ffffff}Список семей | "SERVER"№ - Название - Создатель", allfam, "Выбрать", "<< Назад");
						}
	                }
	                case 1: // Создать семью
	                {
						format(str, sizeof(str), "{FFFFFF}Здравствуйте уважаем%s %s{FFFFFF}! Вы желаете создать семью?\n\n", (PI[playerid][Sex]==1)?("ый"):("ая"), GetName(playerid)); strcat(stringer, str);
						format(str, sizeof(str), "Если да, то помните что в Нашей области уже зарегистрировано "SERVER"%d семей{FFFFFF}.\n\n", TOTALFAM); strcat(stringer, str);
						strcat(str, "Для создание семьи Вам потребуються некоторые документы и гос пошлина в размере "SERVER"1.200.000 рублей{FFFFFF}, список ниже:\n\n");
						format(str, sizeof(str), ""SERVER"1. {FFFFFF}Паспорт: %s\n", (!PI[playerid][Pasport])?("{FF0000}Нет"):("{63BD4E}Есть")); strcat(stringer, str);
						format(str, sizeof(str), ""SERVER"2. {FFFFFF}Проживание в области более "SERVER"25 лет{FFFFFF}: %s\n", (PI[playerid][Level]<25)?("{FF0000}Нет"):("{63BD4E}Есть")); strcat(stringer, str);
						format(str, sizeof(str), ""SERVER"3. {FFFFFF}Сумма гос пошлины"SERVER"1.200.000 рублей{FFFFFF}: %s\n", ConvertCash((GetMoney(playerid)<1199999))?("{FF0000}Нет"):("{63BD4E}Есть")); strcat(stringer, str);
						return SPD(playerid, dCreateFamily, d_input, "Создание семьи", stringer, "Создатть", "Отмена");
	                }
				}
			}
		}
		// Меню семьи
		/*

		1. Информация о семье
		2. Покинуть семью
		3. Изменить цвет рации семьи
		4. Смена названия семьи
		5. Общак семьи
		6. Автопарк семьи
		7. Весь состав семьи
		8. Члены семьи онлайн

		*/
		case dFamMenu:
		{
	        if(!response) return 1;
	        {
				new string[1024], family = PI[playerid][Family];
				switch(listitem)
		        {
					case 0: // Информация о семье
					{
						new zam_text[64], str[1024], famonline = 0;
						if(GetString(FamI[family][famZam], "The Stats")) zam_text = "Отсутствует";
						else format(zam_text,sizeof(zam_text), "%s", FamI[family][famZam]);
						foreach(new i: Player)
						{
							if(family == PI[i][Family]) famonline++;
						}
						string[0] = EOS;
						format(str, sizeof(str), "{FFFFFF}Название семьи: "SERVER"%s - (№%i)\n{FFFFFF}", FamI[family][famName], FamI[family][famID]); strcat(string, str);
						format(str, sizeof(str), "Дата основания: "SERVER"%s{FFFFFF}\n\n", FamI[family][famData]); strcat(string, str);
						format(str, sizeof(str), "Основатель семьи: "SERVER"%s{FFFFFF}\n", FamI[family][famCreator]); strcat(string, str);
						format(str, sizeof(str), "Заместитель семьи: "SERVER"%s{FFFFFF}\n\n", zam_text); strcat(string, str);
						format(str, sizeof(str), "Общий состав семьи: ("SERVER"%d ч.{FFFFFF} / {FF7F50}%d online{FFFFFF})\n\n", FamI[family][famMembers], famonline); strcat(string, str);
						// strcat(string, "--- "SERVER"Улучшения семьи{FFFFFF} ---\n\n");
						// format(str, sizeof(str), "Прием в семью до "SERVER"%s{FFFFFF} человек\n\n", (FamI[family][famUpdate][0] == 1)?("45"):(FamI[family][famUpdate][0] == 2)?("60"):(FamI[family][famUpdate][0] == 3)?("75"):("30")); strcat(string, str);
						// strcat(string, "-----------------------------------\n\n");
						if(GetString(GetName(playerid), FamI[family][famCreator]) || GetString(GetName(playerid), FamI[family][famZam]))
						{
							format(str, sizeof(str), "Кол-во денег: "GREEN"%s рублей{FFFFFF}\n\n", ConvertCash(FamI[family][famBank])); strcat(string, str);
						}
						SPD(playerid, dNull, d_info, "Информация о семье", string, "Назад", "");
					}
					case 1: // Покинуть семью
					{
						if(GetString(GetName(playerid), FamI[family][famCreator]) || GetString(GetName(playerid), FamI[family][famZam])) return SEM(playerid, "Вы не можете покинуть семью самостотельно!"), callcmd::fmenu(playerid);
						{
							string[0] = EOS;
							string_f("[%s] {FFFFFF}%s [%d] покинул(-а) семью по собственному желанию",
							FamI[family][famName], GetName(playerid), playerid);
							SCMFamily(family, string);

							string[0] = EOS;
							string_f("Вы покинули семью '%s' по собственному желанию.", FamI[family][famName]);
							SCM(playerid, cWAR, string);

							PI[playerid][Family] = 0;
							FamI[family][famMembers] -= 1;
							update_int_mysql(T_PLAYER, "Family", 0, "ID", PI[playerid][ID]);
							update_int_mysql(T_FAMILY, "famMembers", FamI[family][famMembers], "famID", FamI[family][famID]);
						}
					}
					case 2: // Смена названия семьи
					{
						if(!GetString(GetName(playerid), FamI[family][famCreator])) return SEM(playerid, "Название семьи может сменить только Основатель семьи!"), callcmd::fmenu(playerid);
						{
							SPD(playerid, dNull, d_input, "Название семьи", "{FFFFFF}Введите новое название семьи:","Далее >>", "Закрыть");
						}
					}
					case 3: // Общак семьи
					{
	          		 	if(!FamI[family][famHouse]) return SEM(playerid, "У Вашей семьи нет дома!"), callcmd::fmenu(playerid);
						{
					        string[0] = EOS;
							string_f("\
								Положить деньги. (На складе: %d рублей)\n\
								Взять деньги. (На складе: %d рублей)",
					        FamI[family][famBank], FamI[family][famBank]);
					    	SPD(playerid, dNull, d_list, "Общак семьи", string, "Далее", "Закрыть");
						}
					}
					case 4: // Автопарк семьи
					{
	          		 	if(!GetString(GetName(playerid), FamI[family][famCreator])) return SEM(playerid, "Данный раздел доступен только Основателю!"), callcmd::fmenu(playerid);
				        if(!FamI[family][famHouse]) return SEM(playerid, "У Вашей семьи нет дома!"), callcmd::fmenu(playerid);
				        {
				        	SPD(playerid, dNull, d_list, ""SERVER"Управление автомобилями семьи", "\
								"SERVER"1. {FFFFFF}Респавн транспорта\n\
								"SERVER"2. {FFFFFF}Сменить место спавна автомобиля\n\
								"SERVER"3. {FFFFFF}Изменить модель автомобиля\n\
								"SERVER"4. {FFFFFF}Купить автомобиль",
							"Выбрать","Назад");
				    	}
					}
					case 5: // Весь состав семьи
					{
						if(!GetString(GetName(playerid), FamI[family][famCreator])) return SEM(playerid, "Данный раздел доступен только Основателю!"), callcmd::fmenu(playerid);
				        {
							string[0] = EOS;
							string_f("SELECT `LastData`, `SimCard`, `Level`, `Name` FROM "T_PLAYER" WHERE `Family` = '%d'", family);
							mysql_tquery(mysql, string, "CheckOffMembersFamily", "i", playerid);
						}
					}
					case 6: // Члены семьи онлайн
					{
						return callcmd::fmenu(playerid);
					}
				}
			}
		}
		case dListFamily:
		{
			if(!response)
			{
				return SPD(playerid, dInfoFamily, d_list, "Информация", "\
					"SERVER"Информация для создания семьи\n\
					"SERVER"1. {FFFFFF}Список семей\n\
					"SERVER"2. {FFFFFF}Создать семью",
				"Выбрать", "Закрыть");
			}
			new string[150], strings[30];
			format(strings, 30, "{FFFFFF}Семья %s{FFFFFF}", FamI[listitem][famName]);
			string_f("{FFFFFF}\
				Основатель семьи: %s{FFFFFF}\n\
				Дата основания: %s{FFFFFF}",
			FamI[listitem][famCreator], FamI[listitem][famData]);
			SPD(playerid, dListFamilyOff, d_info, strings, string, "<< Назад", "Закрыть");
		}
		case dListFamilyOff:
		{
			if(!response) return 1;
			{
				new str[60], allfam[1024];
                // strcat(allfam, "№\tНазвание\n");
				for(new i = 1; i <= TOTALFAM; i++)
				{
				    format(str, 60, "%i - %s\n", FamI[i][famID], FamI[i][famName]);
					strcat(allfam, str);
				}
				SPD(playerid, dListFamily, d_list, "{ffffff}Список семей | "SERVER"№ - Название - Создатель", allfam, "Выбрать", "<< Назад");
			}
		}
		case dCreateFamily:
  		{
			if(!response)return 1;
			{
		       	new stringer[1024], str[512], name[50];
				if(!PI[playerid][Pasport]) return SEM(playerid, "У Вас нет паспорта!");
				if(PI[playerid][Level]<25) return SEM(playerid, "Для проживание в семье Вы должны прожить 25 лет в Области!");
				if(GetMoney(playerid) < 1200000) return SEM(playerid, "У Вас недостаточно средств для основания семьи!");
				if(PI[playerid][Family]) return SEM(playerid, "Вы уже состоите в семье!");
		   		if(sscanf(inputtext,"s[50]",name) || strlen(name) < 1 || strlen(name) > 50)
	  		    {
					format(str, sizeof(str), "{FFFFFF}Здравствуйте уважаем%s %s{FFFFFF}! Вы желаете создать семью?\n\n", (PI[playerid][Sex]==1)?("ый"):("ая"), GetName(playerid)); strcat(stringer, str);
					format(str, sizeof(str), "Если да, то помните что в Нашей области уже зарегистрировано "SERVER"%d семей{FFFFFF}.\n\n", TOTALFAM); strcat(stringer, str);
					strcat(stringer, "Для создание семьи Вам потребуються некоторые документы и гос пошлина в размере "SERVER"1.200.000 рублей{FFFFFF}, список ниже:\n\n");
					format(str, sizeof(str), ""SERVER"1. {FFFFFF}Паспорт: %s\n", (!PI[playerid][Pasport])?("{FF0000}-"):("{63BD4E}+"));	strcat(stringer, str);
					format(str, sizeof(str), ""SERVER"2. {FFFFFF}Прописка в области от "SERVER"25 лет{FFFFFF}: %s\n", (PI[playerid][Level]<25)?("{FF0000}-"):("{63BD4E}+")); strcat(stringer, str);
					format(str, sizeof(str), ""SERVER"3. {FFFFFF}Сумма гос пошлины"SERVER"1.200.000 рублей{FFFFFF}: %s\n", ConvertCash((GetMoney(playerid)>=1200000))?("{63BD4E}Есть"):("{FF0000}Нет")); strcat(stringer, str);
					SPD(playerid, dCreateFamily, d_input, "Создание семьи", stringer, "Создатть", "Отмена");
					return 1;
				}
				// Проверка на совпадение имени семьи
				new string[128];
	            string_f("SELECT * FROM "T_FAMILY" WHERE `famName` = '%s' LIMIT 1", name);
				mysql_tquery(mysql, string, "CheckFamilyName", "is", playerid, inputtext);
				//
			}
		}
		// Оформление паспорта
		case dDocPas:
		{
		    if(!response) return 1;
		    {
				if(!PI[playerid][Poshlina])
				{
					 SEM(playerid, "Вы не заплатили Государственную пошлину в размере 500 рублей!");// проверка на оплату госс пошлины!
					 SCM(playerid, cSERVER, "Оплатить пошлину можно в любом Банке нашей области!");
					 return 1;
				}
				SPD(playerid, dDocPasGod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
				Здравствуйте, Вы начали процедуру оформления паспорта:\n\
				Для этого пожайлуста укажите Вашу дату рождения в формате дд.мм.гггг! "SERVER"(01.01.2000)",
				"Дальше >>", "<< Назад");
			}
		}
		case dDocPasGod:
		{
		    new d,m,g;
		    getdate(year_s, month_s, day_s);
		    if(!response) return SPD(playerid, dDocPasGod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
   			Здравствуйте, Вы начали процедуру оформления паспорта:\n\
				Для этого пожайлуста укажите Вашу дату рождения в формате дд.мм.гггг! "SERVER"(01.01.2000)",
			"Дальше >>", "<< Назад");
			if(sscanf(inputtext, "p<.>iii", d,m,g))
			{
				SPD(playerid, dDocPasGod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
	   				Здравствуйте, Вы начали процедуру оформления паспорта:\n\
					Для этого пожайлуста укажите Вашу дату рождения в формате дд.мм.гггг! "SERVER"(01.01.2000)\n\n\
					{FF0000}Ошибка{FFFFFF} Вы указали неверный формат Даты рождения! Укажите дату Вашего рождения в формате: "SERVER"дд.мм.гггг - "SERVER"(01.01.2000)",
				"Дальше >>", "<< Назад");
				return 1;
			}
			SetString(PsI[playerid][pasDataRojdenia], inputtext);
			PI[playerid][Age]=year_s-=g;

			SPD(playerid, dDocPasGorod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
			Дальше Вам необходимо указать Город в котором Вы родились!\n\n\
			\tПример: "SERVER"Южный",
			"Дальше >>", "<< Назад");
		}
		case dDocPasGorod:
		{
		    new Gorods[32];
		    if(!response)
			{
				SPD(playerid, dDocPasGod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
	   				Здравствуйте, Вы начали процедуру оформления паспорта:\n\
					Для этого пожайлуста укажите Вашу дату рождения в формате дд.мм.гггг! "SERVER"(01.01.2000)",
				"Дальше >>", "<< Назад");
				return 1;
			}
			if(sscanf(inputtext, "s[32]", Gorods))
		    {
		    	SPD(playerid, dDocPasGorod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
	   			Дальше Вам необходимо указать Город в котором Вы родились!\n\n\
				\tПример: "SERVER"Южный\n\n\
				{FF0000}Ошибка{FFFFFF} Вы не указали Город!",
				"Дальше >>", "<< Назад");
				return 1;
		    }
			SetString(PsI[playerid][pasGorod], Gorods);

			SPD(playerid, dDocPasPoluchenie, d_info, ""SERVER"Оформление паспорта", "{FFFFFF}\
			Вы действительно хотите получить паспорт?",
			"Получить", "Отмена");
		}
		case dDocPasPoluchenie:
		{
		    new string[512], d[15];
		    getdate(year_s, month_s, day_s);
		    if(!response)
		    {
				SPD(playerid, dDocPasGorod, d_input, ""SERVER"Оформление паспорта", "{FFFFFF}\
					Дальше Вам необходимо указать Город в котором Вы родились!\n\n\
					\tПример: Южный",
				"Дальше >>", "<< Назад");
				return 1;
		    }
	  		format(d, sizeof(d), "%02d.%02d.%04d", day_s, month_s, year_s);
		    SetString(PsI[playerid][pasName], GetName(playerid));
		    SetString(PsI[playerid][pasData], d);

			PsI[playerid][pasSex] = PI[playerid][Sex];

		    PsI[playerid][pasSeria] = 1000 + random(8999);
		    PsI[playerid][pasNumber] = 100000 + random(899999);

            string_f("INSERT INTO "T_PASPORT" (`pasName`, `pasSeria`, `pasNumber`, `pasSex`, `pasData`, `pasGorod`, `pasDataRojdenia`) VALUES ('%s', %d, %d, %d, '%s', '%s', '%s')",
			PsI[playerid][pasName], PsI[playerid][pasSeria], PsI[playerid][pasNumber], PsI[playerid][pasSex], PsI[playerid][pasData], PsI[playerid][pasGorod], PsI[playerid][pasDataRojdenia]);
			mysql_query(mysql, string);

			PI[playerid][Pasport] = 1;
			update_int_mysql(T_PLAYER, "Pasport", PI[playerid][Pasport], "ID", PI[playerid][ID]);
			PI[playerid][Poshlina] = false;

			SCM(playerid, cWHITE, "Вы успешно получили паспорт! Используйте: "SERVER"/showpass [ ID Игрока ]{FFFFFF} чтобы показать паспорт.");
			SavePasport(playerid);
		}
		// Работа шахтера
		case dJobMineSelect: // Быбор
		{
			if(!response) return 1;
            {
				switch(listitem)
				{
					case 0: //
					{
						if(!JobMine[playerid])
						{
							JobMine[playerid] = true;
							if(PI[playerid][Sex]==1) SetPlayerSkin(playerid, 16);
							else SetPlayerSkin(playerid, 151);
							for(new i; i != 9; i++) PlayerTextDrawShow(playerid, Scahta_PTD[playerid][i]);
							if(!SI[sStatusVagon])
							{
								SetPVarInt(playerid, "StatusMine", 1);
								new rand_coord = random(sizeof(ScahtaCP));
								SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.078222, 0.0000, 0.110844, 298.897308, 264.126861, 193.350555, 1.000000, 1.000000, 1.000000);
								SahtaPosCH[rand_coord] = SetPlayerCheckpoint(playerid, ScahtaCP[rand_coord][0], ScahtaCP[rand_coord][1], ScahtaCP[rand_coord][2], 1.5);
							}
							else
							{
								SetPVarInt(playerid, "StatusMine", 3);
								switch(random(4))
								{
									case 0: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1808.5459, 3427.2888, 2.5);
									case 1: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1804.5459, 3427.2888, 2.5);
									case 2: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1800.5459, 3427.2888, 2.5);
									case 3: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1796.5459, 3427.2888, 2.5);
								}
							}
							SCM(playerid, 0xFCFF00FF,"Если Вы отдалитель от шахты на 100 мертов, то Вы будете уволены и Ваша зарплата будет анулирована!");
							SCM(playerid, 0xFCFF00FF,"Отправляйтесь к красному чекпоинту на вашем радаре");
						}
						return 1;
					}
					case 1: //
					{
						if(!JobMineDrive[playerid])
						{
							if(PI[playerid][Level] < 3) return SEM(playerid, "Доступно с 3 уровня!");
							if(!PI[playerid][Lic][3]) return SEM(playerid, "У Вас нет лицензии 'D'!");
							{
								JobMineDrive[playerid] = true;
								if(PI[playerid][Sex]==1) SetPlayerSkin(playerid, 260);
								else SetPlayerSkin(playerid, 151);
								SCMInfo(playerid, "Подойдите на парковку и взьмите рабочий транспорт!");
							}
						}
					}
				}
			}
		}
		case dJobMine: // Работа Шахтера
		{
			if(!response) return 1;
            {
				if(JobMine[playerid])
				{
					DisablePlayerCheckpoint(playerid);
					DeletePVar(playerid,"StatusMine");
					RemovePlayerAttachedObject(playerid, 3); // Кирка
					RemovePlayerAttachedObject(playerid, 4); // Руда

					for(new i; i != 9; i++) PlayerTextDrawHide(playerid, Scahta_PTD[playerid][i]);

					SCM(playerid,cWHITE,"Вы успешно уволились с работы шахтёра.");
					FSCM(playerid,cWHITE,"{FFFFFF}Вы добыли "SERVER"%s кг{FFFFFF} руды и заработали "SERVER"%s рублей", ConvertCash(AllPlayerMineral[playerid]), (SI[sX_JobPay])?(ConvertCash(AllPlayerMineral[playerid]*EI[eiScahtaPay]*SI[sX_JobPay])):(ConvertCash(AllPlayerMineral[playerid]*EI[eiScahtaPay])));

					SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);
					GiveMoney(playerid, AllPlayerMineral[playerid]*EI[eiScahtaPay]);
					AllPlayerMineral[playerid] = 0;
					PlayerMineral[playerid] = 0;
					JobMine[playerid] = false;
					return 1;
				}
            }
		}
		case dJobMineDrive: // Доставка
		{
			if(!response) return 1;
            {
				if(JobMineDrive[playerid])
				{
					FSCM(playerid,cWHITE,"Вы доставили "SERVER"%s кг{FFFFFF} руды и заработали "GREEN"%s рублей", ConvertCash(AllPlayerMineral[playerid]), (SI[sX_JobPay])?(ConvertCash(AllPlayerMineral[playerid]*EI[eiDriveMineralsPay]*SI[sX_JobPay])):(ConvertCash(AllPlayerMineral[playerid]*EI[eiDriveMineralsPay])));

					SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);
					GiveMoney(playerid, AllPlayerMineral[playerid]*EI[eiDriveMineralsPay]);
					AllPlayerMineral[playerid] = 0;
					PlayerMineral[playerid] = 0;
					JobMineDrive[playerid] = false;

					if(PlayerRent[playerid] == -1) return 1;
					{
						VehicleInfo[PlayerRent[playerid]][vRentID] = INVALID_PLAYER_ID;
						SetVehicleToRespawn(PlayerRent[playerid]);
						PlayerRent[playerid] = -1;
					}
				}
			}
		}
		//
		// Работа Лесоповал
		case dJobLesorub: //
		{
			if(!response) return 1;
	        {
				if(!JobLesorub[playerid]) // Устроиться
				{
					JobLesorub[playerid] = true;
					if(PI[playerid][Sex]==1) SetPlayerSkin(playerid, 260);
					else SetPlayerSkin(playerid, 151);
					SCMInfo(playerid, "Вы успешно устроились на работу Лесоповал.");
					SCM(playerid, -1, "Подойдите на слад, чтобы взять инструмент для работы!");
				}
				else // Уволиться
				{
					if(LesorubInstrument[playerid]) return SEM(playerid, "Вы не можете завершить работу не сдав инструмент на склад!");
					{
						JobLesorub[playerid] = false;
						RemovePlayerAttachedObject(playerid, 0);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);
						FSCM(playerid, -1, "Общее кол-во поваленных Вами деревьев: "SERVER"%s шт.", ConvertCash(AllPlayerDerevo[playerid]));
						GiveMoney(playerid, AllPlayerDerevo[playerid]*EI[eiDrovosekPay]);
						SCMInfo(playerid, "Вы успешно уволились с работы Лесоповал.");
						AllPlayerDerevo[playerid] = 0;

					}
				}
			}
		}
		//
		// Аренда велосипеда
		case dArendaVelik:
		{
			if(!response) return 1;
	        {
				if(GetMoney(playerid) < 500)return SEM(playerid, "У Вас не хватает денег!"), ExitCar(playerid);
			    if(PlayerRent[playerid] != -1) return SEM(playerid, "Вы уже арендуете транспорт! Введите:"SERVER"/unrend"WHITE" для завершения аренды.");
			    {
					switch(GetPVarInt(playerid, "ArendaVelic"))
					{
						// 462 - Скутер
						case 1: PlayerRent[playerid] = AddStaticVehicleRent(510, 500, 1778.6919, 1334.7588, 9.5267, 180.0, -1, -1, 1200, 1000, 0), SetPlayerGPS(playerid, 1778.6919, 1334.7588, 9.5267, "Велосипед");
						case 2: PlayerRent[playerid] = AddStaticVehicleRent(510, 500, 2516.8613, -2120.8745, 21.6593, -90.0, -1, -1, 1200, 1000, 0), SetPlayerGPS(playerid, 2516.8613, -2120.8745, 21.6593, "Велосипед");
					}
					// PutPlayerInVehicle(playerid, PlayerRent[playerid], 0);
					VehicleInfo[PlayerRent[playerid]][vRentID] = playerid;
					VehicleInfo[PlayerRent[playerid]][vRentTime] = 2*60;
					GiveMoney(playerid, -500);
					SCMInfo(playerid, "Вы успешно арендовали транспорт. Чтобы завершить арента досрочно: Введите "SERVER"/unrend");
					return DeletePVar(playerid, "ArendaVelic");
				}
			}
		}
		case dRendCar:
		{
			if(!response) return ExitCar(playerid);
			{
				new carid = GetPlayerVehicleID(playerid);
				if(GetMoney(playerid) < VehicleInfo[carid][vRentPay]) return SEM(playerid, "У Вас не хватает денег!"), ExitCar(playerid);
				{
					PlayerRent[playerid] = carid;
					VehicleInfo[carid][vRentID] = playerid;
					VehicleInfo[PlayerRent[playerid]][vRentTime] = 2*60;
					GiveMoney(playerid, -VehicleInfo[carid][vRentPay]);
					SCM(playerid, cSERVER, "Вы успешно арендовали транспорт. Чтобы закрыть его используйте: /lock 2");

					if(JobMineDrive[playerid] && GetVehicleModel(carid) == 406)
					{
						SCMInfo(playerid, "Езжайте на склад для загрузки руды!");
						SCMInfo(playerid, "Введите: "SERVER"/load {FFFFFF}- для загрузки руды в транспорт.");
						CarLoadMine[PlayerRent[playerid]] = CreateDynamic3DTextLabel("Загружено руды: "SERVER"0{FFFFFF} кг.", cWHITE, 0.0, 0.0, 2.5, 15.0, INVALID_PLAYER_ID, PlayerRent[playerid], 0, 0);
						// Attach3DTextLabelToVehicle(CarLoadMine[PlayerRent[playerid]], PlayerRent[playerid], 0.0, 0.0, 2.5);
					}
				}
			}
		}
		case dArendaCarOff:
		{
			if(!response) return 1;
	        {
	            if(PlayerRent[playerid] == -1) return SEM(playerid, "У Вас нет транспорта в аренде!");
	            {
					if(PlayerRent[playerid] >= carMine[0] && PlayerRent[playerid] <= carMine[14])
					{
						if(!MineralsDrive[PlayerRent[playerid]]) MineralsDrive[PlayerRent[playerid]] = 0;
						DestroyDynamic3DTextLabel(CarLoadMine[PlayerRent[playerid]]);
						SetVehicleToRespawn(PlayerRent[playerid]);
					}
					else DestroyVehicle(PlayerRent[playerid]);

					PlayerRent[playerid] = -1;
					VehicleInfo[PlayerRent[playerid]][vRentID] = INVALID_PLAYER_ID;
					SCMInfo(playerid, "Вы успешно завершили аренду транспорта");
   				}
			}
		}
		//
		case dSelectCarBuy:
		{
			if(!response) return 1;
	        {
				switch(listitem)
				{
					case 0: SelectCarKlass[playerid] = 1; // Низкий класс
					case 1: SelectCarKlass[playerid] = 2; // Средний класс
					case 2: SelectCarKlass[playerid] = 3; // Высокий класс
				}
				if(SelectCarKlass[playerid] == 1) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarA[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
				if(SelectCarKlass[playerid] == 2) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarB[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
				if(SelectCarKlass[playerid] == 3) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarC[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);

				SetPlayerVirtualWorld(playerid, playerid+3);
				TogglePlayerControllable(playerid, true);
				SetPlayerCameraPos(playerid, 2651.2170, -1919.3042, 2330.3555);
				SetPlayerCameraLookAt(playerid, 2650.2305, -1919.3379, 2329.7659);

				for(new i; i < 21; i++) PlayerTextDrawShow(playerid, BuyCars_PTD[playerid][i]);
				SelectTextDraw(playerid, cSERVER);

				new string[32], stringer[32];
				if(SelectCarKlass[playerid] == 1) { string_f("%s рублей", ConvertCash(BuyCarA[KlassCarID[playerid]][1])); stringer_f("%s", VehStats[BuyCarC[KlassCarID[playerid]][0]-400][vName]); }
				if(SelectCarKlass[playerid] == 2) { string_f("%s рублей", ConvertCash(BuyCarB[KlassCarID[playerid]][1])); stringer_f("%s", VehStats[BuyCarB[KlassCarID[playerid]][0]-400][vName]); }
				if(SelectCarKlass[playerid] == 3) { string_f("%s рублей", ConvertCash(BuyCarC[KlassCarID[playerid]][1])); stringer_f("%s", VehStats[BuyCarC[KlassCarID[playerid]][0]-400][vName]); }
				PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][13], stringer);
				PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][14], string);
			}
		}
		//
		case dMenuServer:
		{
			if(!response) return 1;
	        {
		        switch(listitem)
				{
				    case 0: return ShowPlayerMenu(playerid); // Информация о персонаже
				    case 1: return DialogCommandServer(playerid); // Команды сервера
				    case 2: return DialogMenuSettings(playerid); // Настройки аккаунта
				    case 3: return DialogTextAdmin(playerid); // Связь с администрацией
				    case 4: return DialogReferalList(playerid); // Список рефералов
				    case 5: return DialogPromoCode(playerid); // Использовать промокод
				    case 6: return callcmd::donat(playerid); // Донат
				}
			}
		}
		case dMenuStats: // Информация о персонаже
		{
			if(!response) return DialogPlayerMenu(playerid);
			{
	            switch(listitem)
				{
				    case 0: // Статистика персонажа
					{
						return DialogPlayerStats(playerid, playerid);
					}
				    case 1: // Навыки владения оружием
					{
						return 1;
					}
				    case 2: // Навыки работ
					{
						new string[3];
						string_f("%i", playerid);
						return callcmd::showjob(playerid, string);
					}
				    case 3: // Трудовая книжка
					{
						return callcmd::mytk(playerid);
					}
				    case 4: // Улучшения персонажа
					{
						return 1;
					}
				    case 5: // Сменить место появления
					{
						return 1;
					}
					case 6: // История наказаний
					{
						return callcmd::myhistory(playerid);
					}
				    case 7: // Настройки игры
					{
						return 1;
					}
				}
			}
		}
		case dSetLeader:
		{
		    if(!response) return InviteLeader[playerid] = -1;
		    {
				new id = InviteLeader[playerid];
			    if(GetString(FracI[listitem+1][fLeader], "The Stats"))
		        {
					if(PI[id][Job] != 0) PI[id][Job] = 0;
		            if(PI[id][FracLeader])
		            {
						SetString(FracI[id][fLeader], "The Stats");
		            }
		            PI[id][FracLeader] = listitem+1;
		            GetFrac(id) = listitem+1;
		            PI[id][FracRang] = 10;
		            PI[id][Spawn] = 3;
		            if(PI[id][Job]) PI[id][Job] = 0;
					FracI[PI[playerid][Frac]][fMembers]++;

		            if(!FracDuty[id][GetFrac(id)]) FracDuty[id][GetFrac(id)]=true;
	                if(GetFrac(id) && FracDuty[id][GetFrac(id)]) SetPlayerSkin(id, GetFracSkin(id)), SetPlayerColor(id, FracColor[GetFrac(id)]);
					else if(GetFrac(id) && !FracDuty[id][GetFrac(id)]) SetPlayerSkin(id, PI[id][Skin]), SetPlayerColor(id, cNone);
					else SetPlayerSkin(id, PI[id][Skin]), SetPlayerColor(id, cNone);

					SetString(FracI[PI[id][FracLeader]][fLeader], GetName(id));

		            update_int_mysql(T_PLAYER, "Frac", PI[id][Frac], "ID", PI[id][ID]);
		            update_int_mysql(T_PLAYER, "FracLeader", PI[id][FracLeader], "ID", PI[id][ID]);
		            update_int_mysql(T_PLAYER, "FracRang", PI[id][FracRang], "ID", PI[id][ID]);
		            update_str_mysql(T_FRAC, "fLeader", GetName(id), "fID", GetFrac(id));
		            update_int_mysql(T_FRAC, "fMembers", FracI[id][fMembers], "fID", FracI[id][fID]);

		            FSCM(id, cBLUE, "[A] %s [%i] назначил(-а) Вас лидером организации %s.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], FracI[GetFrac(id)][fName]);
		            new string[256];
		            string_f("[A] %s [%d] назначил(-а) %s [%d] лидером организации %s!", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(id), id, FracI[GetFrac(id)][fName]);
		            SCMAdmin(cGREEN, string);
					SaveFrac(GetFrac(id));
					InviteLeader[playerid] = -1;
		        }
				else
				{
					new string[124];
					SetPVarInt(playerid, "FracIDs", listitem+1);
					SetPVarString(playerid, "NameLeaderUval", FracI[listitem+1][fLeader]);
					string_f("{FFFFFF}У данной организации уже есть лидер!\n\n\
						Вы желаете снять лидера "BLUE"%s{FFFFFF} с организации "SERVER"%s{FFFFFF}?", FracI[listitem+1][fLeader], FracI[listitem+1][fName]);
					SPD(playerid, dSetLeaderUval, d_info, ""SERVER"Снять лидера с поста?", string, "Да!", "Нет!");

				}
 			}
		}
		case dSetLeaderUval:
		{
		    if(!response) return 1;
			{
				new NameLeader[24];
				GetPVarString(playerid, "NameLeaderUval", NameLeader, sizeof(NameLeader));
				new fIDs = GetPVarInt(playerid, "FracIDs");
				new IDs = GetPlayerID(NameLeader);

				update_int_mysql(T_PLAYER, "Frac", 0, "ID", PI[IDs][ID]);
				update_int_mysql(T_PLAYER, "FracLeader", 0, "ID", PI[IDs][ID]);
				update_int_mysql(T_PLAYER, "FracRang", 0, "ID", PI[IDs][ID]);

				if(PI[fIDs][FracLeader])
				{
					FracI[fIDs][fMembers] --;
					SetString(FracI[fIDs][fLeader], "The Stats");
				}
				update_str_mysql(T_FRAC, "fLeader", FracI[fIDs][fLeader], "fID", fIDs);
				update_int_mysql(T_FRAC, "fMembers", FracI[fIDs][fMembers], "fID", fIDs);
				FSCM(playerid, cGREEN, "Лидер %s снят с поста организации %s", NameLeader, FracI[fIDs][fName]);
				return DeletePVar(playerid, "FracIDs"), DeletePVar(playerid, "NameLeaderUval");

			}
		}
		case dAdminFracInvite:
		{
		    new string[250];
		    if(!response) return DeletePVar(playerid, "a_invite_frac");
		    {
				new id = GetPVarInt(playerid, "a_invite_frac");
				if(PI[id][Job] != 0) PI[id][Job] = 0;

	            GetFrac(id) = listitem+1;
	            PI[id][FracRang] = 1;
	            PI[id][Spawn] = 3;
				FracI[PI[id][Frac]][fMembers]++;

				string[0] = EOS;
				string_f("Принят(-а) на должность - %s", GetRangName[GetFrac(id)][PI[id][FracRang]-1]);
				SetTK(id, string);

				FSCM(id, cBLUE, "%s [%d] успешно назначил(-а) Вас в организацию %s на должность %s.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], FracI[GetFrac(id)][fName], GetRangName[GetFrac(id)][PI[id][FracRang]-1]);

				string[0] = EOS;
				string_f("[A] %s [%d] тихо назначил(-а) %s [%i] в организацию %s на должность %s.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(id), id, FracI[GetFrac(id)][fName], GetRangName[GetFrac(id)][PI[id][FracRang]-1]);
                SCMAdmin(-1, string);

				if(GetFrac(id))
				{
					if(FracDuty[id][GetFrac(id)])
					{
						SetPlayerSkin(id, GetFracSkin(id));
						SetPlayerColor(id, FracColor[GetFrac(id)]);
					}
					else SetPlayerSkin(id, PI[id][Skin]), SetPlayerColor(id, cNone);
				}

				return DeletePVar(playerid, "a_invite_frac");
			}
		}
		case dAdminFracRang:
		{
		    new i = GetPVarInt(playerid, "a_frac_rang");
		    if(!response) return 1;
		    {
				if(PI[i][FracRang] == 10)
				{
					PI[i][FracLeader] = GetFrac(i);
					SetString(FracI[GetFrac(i)][fLeader], GetName(i));
	            	// SaveFrac(GetFrac(i));
				}
				else if(PI[i][FracLeader])
				{
					PI[i][FracLeader] = 0;
					SetString(FracI[GetFrac(i)][fLeader], "The Stats");
	            	// SaveFrac(GetFrac(i));
				}
				if(i != playerid)
				{
					FSCM(playerid, cBLUE, "Вы успешно сменили должность игроку %s [%d] c %s на %s.", GetName(i), i, GetRangName[GetFrac(i)][PI[i][FracRang]-1], GetRangName[GetFrac(i)][listitem]);
                    FSCM(i, cBLUE, "Администратор %s сменил Вам должность c %s на %s.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetRangName[GetFrac(i)][PI[i][FracRang]-1], GetRangName[GetFrac(i)][listitem]);
				}
				else FSCM(playerid, cBLUE, "Вы успешно сменили себе должность c %s на %s.", GetRangName[GetFrac(i)][PI[i][FracRang]-1], GetRangName[GetFrac(i)][listitem]);

				new string[124];
				string_f("%s%s на должность - %s", (PI[i][FracRang] > listitem+1)?("Понижен"):("Повышен"), (PI[playerid][Sex]==1)?(""):("а"), GetRangName[GetFrac(playerid)][listitem]);
				SetTK(playerid, string);
		    	PI[i][FracRang] = listitem+1;

		        if(FracDuty[i][GetFrac(i)]) SetPlayerSkin(i, GetFracSkin(i));
	            return DeletePVar(playerid, "a_frac_rang");
		    }
		}
		// Панель администратора
    	case dAdminPanel:
		{
			if(!response) return 1;
			{
			    switch(listitem)
			    {
					case 0: // [2] Игроки с VIP статусом
					{
						foreach(new i: Player)
						{
							if(!PlayerLogin[i]) continue;
							if(!PI[i][Vip]) SEM(playerid, "Игроков с VIP не найдено!");
							else
							{
								SCM(playerid, cBLUE, "VIP игроки:");
								FSCM(playerid, cWHITE, "- "SERVER"%s [%i]{FFFFFF} с "BLUE"%s{FFFFFF} до: "SERVER"%s{FFFFFF}", PV[i][pvName], i, PV[playerid][pvData], PV[playerid][pvDataClose]);
							}
						}
						return callcmd::ap(playerid);
					}
					case 1: // [2] Игроки с Мутом
					{
						foreach(new i: Player)
						{
							if(!PlayerLogin[i]) continue;
							if(!PI[i][Mute]) SEM(playerid, "Игроков с Мутом не найдено!");
							else
							{
								SCM(playerid, cBLUE, "Игроки с Мутом:");
								FSCM(playerid, cWHITE, "- "SERVER"%s [%i]{FFFFFF} молчать еще: "WAR"%s{FFFFFF}", GetName(i), i, ConvertTime(PI[i][MuteTime]));
							}
						}
						return callcmd::ap(playerid);
					}
					case 2: // [2] Игроки в КПЗ
					{
						foreach(new i: Player)
						{
							if(!PlayerLogin[i]) continue;
							if(PI[i][Spawn] != 5) SEM(playerid, "Игроков в КПЗ не найдено!");
							else
							{
								SCM(playerid, cBLUE, "Игроки в КПЗ:");
								FSCM(playerid, cWHITE, "- "SERVER"%s [%i]{FFFFFF} осталось сидеть: "SERVER"%s{FFFFFF}", GetName(i), i, ConvertTime(PI[i][JailTime]));
							}
						}
						return callcmd::ap(playerid);
					}
					case 3: // [2] Игроки в Тюрьме
					{
						foreach(new i: Player)
						{
							if(!PlayerLogin[i]) continue;
							if(PI[i][Spawn] != 6) SEM(playerid, "Игроков в Тюрьме не найдено!");
							else
							{
								SCM(playerid, cBLUE, "Игроки в Тюрьме:");
								FSCM(playerid, cWHITE, "- "SERVER"%s [%i]{FFFFFF} осталось сидеть: "SERVER"%s{FFFFFF}\n", GetName(i), i, ConvertTime(PI[i][JailTime]));
							}
						}
						return callcmd::ap(playerid);
					}
					case 4: // [2] Игроки в Деморгане
					{
						foreach(new i: Player)
						{
							if(!PlayerLogin[i]) continue;
							if(PI[i][Spawn] !=7) SEM(playerid, "Игроков в Деморгане не найдено!");
							else
							{
								SCM(playerid, cBLUE, "Игроки в Деморгане:");
								FSCM(playerid, cWHITE, "- "SERVER"%s [%i]{FFFFFF} сталось сидеть: "SERVER"%s{FFFFFF}\n", GetName(i), i, ConvertTime(PI[i][JailTime]));
							}
						}
						return callcmd::ap(playerid);
					}
					case 5: // [2] Администраторы в сети
					{
						return callcmd::admins(playerid);
					}
					case 6: // [2] Команды для адинистраторов
					{
						return callcmd::ah(playerid);
					}
					case 7: // [4] Настройки администратора
					{
						return callcmd::aset(playerid);
					}
					case 8: // [4] Список всех администраторов
					{
						mysql_tquery(mysql, "SELECT * FROM "T_ADMIN"", "CheckListAdmins", "i", playerid); /* WHERE Level > 0 AND Level < 11 */
					}
					case 9: // [7] Настройки организаций
					{
						new num=1, string[1024];
						strcat(string, "№. Организация\tСотрудников\tБанк\n");
						for(new i = 1; i <= TOTALFRAC; i ++)
						{
							string_f("%s"SERVER"%d. {FFFFFF}%s\t%i чел\t"GREEN"%s рублей\n", string, num, FracI[i][fName], FracI[i][fMembers], ConvertCash(FracI[i][fBank]));
							num++;
						}
						SPD(playerid, dSettingFrac, d_tlisth, "Управление организациями", string, "Выбрать", "<< Назад");
					}
					case 10: // [8] Рестарт сервер
					{
						return callcmd::gmx(playerid);
					}
					case 11: // [12] Панель разработчика - Настройки сервера
					{
						return callcmd::ss(playerid);
					}
				}
			}
		}
    	case dAdminPanelOff:
		{
			if(!response) return callcmd::ap(playerid);
			{
				new list = SetPVarInt(playerid, "ListOffAdminID", listitem);
				new string[50];
				string_f("%s: %s [%s]", Admin_Name[GetAdmin(list)-1], GetName(list), (!IsPlayerConnected(list))?(""RED"offline"):(""GREEN"online"));
				SPD(playerid, dNull, d_list, string, "\
					"SERVER"1. {FFFFFF}Статистика\n\
					"SERVER"2. {FFFFFF}История \n\
					"SERVER"3. {FFFFFF}Статистика\n\
					"SERVER"4. {FFFFFF}Статистика\n\
					"SERVER"5. {FFFFFF}Статистика\n\
					"SERVER"6. {FFFFFF}Статистика\n",
				"Ок", "<< Назад");
			}
		}
		//
		case dSettingFrac:
		{
			if(!response) return callcmd::ap(playerid);
			{
			    new stringer[2048], leader[24], str[1024];
			    if(GetString(FracI[listitem+1][fLeader], "The Stats")) leader = "Отсутсвует";
			    else format(leader, 24, "%s", FracI[listitem+1][fLeader]);

			    format(str,sizeof(str),"{FFFFFF}Организация: "SERVER"%s\n\n", FracI[listitem+1][fName]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}Лидер: "SERVER"%s\n", leader); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}Банк: "SERVER"%s рублей\n", ConvertCash(FracI[listitem+1][fBank])); strcat(stringer, str);
				strcat(stringer, "Название рангов:\n\n");
				format(str,sizeof(str),"{FFFFFF}1 ранг - "SERVER"%s\n", GetRangName[listitem+1][0]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}2 ранг - "SERVER"%s\n", GetRangName[listitem+1][1]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}3 ранг - "SERVER"%s\n", GetRangName[listitem+1][2]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}4 ранг - "SERVER"%s\n", GetRangName[listitem+1][3]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}5 ранг - "SERVER"%s\n", GetRangName[listitem+1][4]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}6 ранг - "SERVER"%s\n", GetRangName[listitem+1][5]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}7 ранг - "SERVER"%s\n", GetRangName[listitem+1][6]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}8 ранг - "SERVER"%s\n", GetRangName[listitem+1][7]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}9 ранг - "SERVER"%s\n", GetRangName[listitem+1][8]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}10 ранг - "SERVER"%s\n", GetRangName[listitem+1][9]); strcat(stringer, str);
				SPD(playerid, dSettingFracMenu, 0, " ", stringer, "Управление", "<< Назад");
				SetPVarInt(playerid, "fracsid", listitem+1);
			}
		}
		case dSettingFracMenu:
		{
		    if(!response)
		    {
                new num=1, string[1024];
				for(new i = 1; i <= TOTALFRAC; i ++)
				{
				    string_f("%s"SERVER"%d. {FFFFFF}%s\n", string, num, FracI[i][fName]);
				    num++;
				}
				return SPD(playerid, dSettingFrac, d_list, "Управление организациями", string, "Выбрать", "<< Назад");
			}
			else
		    {
				new stringer[1024];
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап входа в организации [->]\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап выхода в организации [<-]\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап информации в организации [!]\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап оружейной в организации\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап раздевалки в организации\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить место спавна в организации\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить место загрузки материалов для организации\n");
				strcat(stringer, ""GREEN"- Пополнить банк организации\n");
				return SPD(playerid, dSettingFracSelect, d_list, "Управление", stringer, "Далее >>", "<< Назад");
			}
		}
		case dSettingFracSelect:
		{
			if(!response)
			{
				new stringer[2048], leader[24], str[1024];
			    if(GetString(FracI[listitem+1][fLeader], "The Stats")) leader = "Отсутсвует";
			    else format(leader, 24, "%s", FracI[listitem+1][fLeader]);

			    format(str,sizeof(str),"{FFFFFF}Организация: "SERVER"%s\n\n", FracI[listitem+1][fName]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}Лидер: "SERVER"%s\n", leader); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}Банк: "SERVER"%s рублей\n", ConvertCash(FracI[listitem+1][fBank])); strcat(stringer, str);
				strcat(stringer, "Название рангов:\n\n");
				format(str,sizeof(str),"{FFFFFF}1 ранг - "SERVER"%s\n", GetRangName[listitem+1][0]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}2 ранг - "SERVER"%s\n", GetRangName[listitem+1][1]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}3 ранг - "SERVER"%s\n", GetRangName[listitem+1][2]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}4 ранг - "SERVER"%s\n", GetRangName[listitem+1][3]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}5 ранг - "SERVER"%s\n", GetRangName[listitem+1][4]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}6 ранг - "SERVER"%s\n", GetRangName[listitem+1][5]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}7 ранг - "SERVER"%s\n", GetRangName[listitem+1][6]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}8 ранг - "SERVER"%s\n", GetRangName[listitem+1][7]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}9 ранг - "SERVER"%s\n", GetRangName[listitem+1][8]); strcat(stringer, str);
				format(str,sizeof(str),"{FFFFFF}10 ранг - "SERVER"%s\n", GetRangName[listitem+1][9]); strcat(stringer, str);
				return SPD(playerid, dSettingFracMenu, 0, " ", stringer, "Управление", "<< Назад");
			}
			else
			{
				new fracid = GetPVarInt(playerid, "fracsid"), Float: gPos[4];
			    switch(listitem)
			    {
					case 0: // Сменить пикап входа в организации [->]
					{
						GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
						GetPlayerFacingAngle(playerid, gPos[3]);

						FracI[fracid][fPosExit][0] = gPos[0];
						FracI[fracid][fPosExit][1] = gPos[1];
						FracI[fracid][fPosExit][2] = gPos[2];
						FracI[fracid][fPosExit][3] = gPos[3]+180;

						DestroyDynamicPickup(picFracEnter[fracid]);
					    DestroyDynamic3DTextLabel(infoFracEnter[fracid]);

						picFracEnter[fracid] = CreateDynamicPic(1318, 23, FracI[fracid][fPosExit][0], FracI[fracid][fPosExit][1], FracI[fracid][fPosExit][2], 0, 0);
						new string[124];
						string_f("%s\n\n{BBBBBB}Нажмите: Alt", FracI[fracid][fName]);
						infoFracEnter[fracid] = CreateDynamic3DTextLabel(string, cSERVER, FracI[fracid][fPosExit][0], FracI[fracid][fPosExit][1], FracI[fracid][fPosExit][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

						update_float_mysql(T_FRAC, "fPosExitX", FracI[fracid][fPosExit][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosExitY", FracI[fracid][fPosExit][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosExitZ", FracI[fracid][fPosExit][2], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosExitA", FracI[fracid][fPosExit][3], "fID", fracid);

						SaveFrac(fracid);
						FSCM(playerid, -1, "Пикап входа для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
					}
					case 1: // Сменить пикап выхода из организации [<-]
					{
						GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
						GetPlayerFacingAngle(playerid, gPos[3]);

						FracI[fracid][fPosEnter][0] = gPos[0];
						FracI[fracid][fPosEnter][1] = gPos[1];
						FracI[fracid][fPosEnter][2] = gPos[2];
						FracI[fracid][fPosEnter][3] = gPos[3]+180;

						DestroyDynamicPickup(picFracExit[fracid]);
					    DestroyDynamic3DTextLabel(infoFracExit[fracid]);

						picFracExit[fracid] = CreateDynamicPic(1318, 23, FracI[fracid][fPosEnter][0], FracI[fracid][fPosEnter][1], FracI[fracid][fPosEnter][2], FracI[fracid][fID], FracI[fracid][fID]);
						infoFracExit[fracid] = CreateDynamic3DTextLabel(""SERVER"Выход\n\n{BBBBBB}Нажмите: Alt", -1, FracI[fracid][fPosEnter][0], FracI[fracid][fPosEnter][1], FracI[fracid][fPosEnter][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

						update_float_mysql(T_FRAC, "fPosEnterX", FracI[fracid][fPosEnter][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosEnterY", FracI[fracid][fPosEnter][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosEnterZ", FracI[fracid][fPosEnter][2], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosEnterA", FracI[fracid][fPosEnter][3], "fID", fracid);

						SaveFrac(fracid);
						FSCM(playerid, -1, "Пикап выхода для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
					}
					case 2: // Сменить пикап информации в организации [!]
					{
						if(fracid == FRAC_OPGB || fracid == FRAC_OPGY || fracid == FRAC_MAFIAH || fracid == FRAC_MAFIAR)
							return SEM(playerid, "Данная функция для этой организации недоступна!");
						{
							GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);

							FracI[fracid][fPosInfo][0] = gPos[0];
							FracI[fracid][fPosInfo][1] = gPos[1];
							FracI[fracid][fPosInfo][2] = gPos[2];

							DestroyDynamicPickup(picFracInfo[fracid]);
							DestroyDynamic3DTextLabel(infoFracInfo[fracid]);

							picFracInfo[fracid] = CreateDynamicPic(1239, 23, FracI[fracid][fPosInfo][0], FracI[fracid][fPosInfo][1], FracI[fracid][fPosInfo][2], FracI[fracid][fID], FracI[fracid][fID]);
							infoFracInfo[fracid] = CreateDynamic3DTextLabel(""SERVER"Информационный отдел\n\n{BBBBBB}Нажмите: Alt", -1, FracI[fracid][fPosInfo][0], FracI[fracid][fPosInfo][1], FracI[fracid][fPosInfo][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

							update_float_mysql(T_FRAC, "fPosInfoX", FracI[fracid][fPosInfo][0], "fID", fracid);
							update_float_mysql(T_FRAC, "fPosInfoY", FracI[fracid][fPosInfo][1], "fID", fracid);
							update_float_mysql(T_FRAC, "fPosInfoZ", FracI[fracid][fPosInfo][2], "fID", fracid);

							SaveFrac(fracid);
							FSCM(playerid, -1, "Пикап информации для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
						}
					}
					case 3: // Сменить место оружейной в организации
					{
						GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);

						FracI[fracid][fPosGun][0] = gPos[0];
						FracI[fracid][fPosGun][1] = gPos[1];
						FracI[fracid][fPosGun][2] = gPos[2];

						DestroyDynamicPickup(picFracGun[fracid]);
					    DestroyDynamic3DTextLabel(infoFracGun[fracid]);

						if(FracI[fracid][fID] == FRAC_SMP) picFracGun[fracid] = CreateDynamicPic(11738, 23, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2], FracI[fracid][fID], FracI[fracid][fID]);
						else if(FracI[fracid][fID] == FRAC_SMI) picFracGun[fracid] = CreateDynamicPic(1253, 23, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2], FracI[fracid][fID], FracI[fracid][fID]);
						else picFracGun[fracid] = CreateDynamicPic(353, 23, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2], FracI[fracid][fID], FracI[fracid][fID]);

						// Оружейная в организации
						infoFracGun[fracid] = CreateDynamic3DTextLabel(""SERVER"Склад", cSERVER, FracI[fracid][fPosGun][0], FracI[fracid][fPosGun][1], FracI[fracid][fPosGun][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

						update_float_mysql(T_FRAC, "fPosGunX", FracI[fracid][fPosGun][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosGunY", FracI[fracid][fPosGun][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosGunZ", FracI[fracid][fPosGun][2], "fID", fracid);

						SaveFrac(fracid);
						FSCM(playerid, -1, "Пикап оружия для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
					}
					case 4: // Сменить пикап раздевалки в организации
					{
						GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);

						FracI[fracid][fPosSkin][0] = gPos[0];
						FracI[fracid][fPosSkin][1] = gPos[1];
						FracI[fracid][fPosSkin][2] = gPos[2];

						DestroyDynamicPickup(picFracSkin[fracid]);
					    DestroyDynamic3DTextLabel(infoFracSkin[fracid]);

						picFracSkin[fracid] = CreateDynamicPic(1275, 23, FracI[fracid][fPosSkin][0], FracI[fracid][fPosSkin][1], FracI[fracid][fPosSkin][2], FracI[fracid][fID], FracI[fracid][fID]);
						infoFracSkin[fracid] = CreateDynamic3DTextLabel(""SERVER"Раздевалка\n{BBBBBB}Нажмите: Alt", -1, FracI[fracid][fPosSkin][0], FracI[fracid][fPosSkin][1], FracI[fracid][fPosSkin][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[fracid][fID]);

						update_float_mysql(T_FRAC, "fPosSkinX", FracI[fracid][fPosSkin][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSkinY", FracI[fracid][fPosSkin][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSkinZ", FracI[fracid][fPosSkin][2], "fID", fracid);

						SaveFrac(fracid);
						FSCM(playerid, -1, "Пикап раздевалки для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
					}
					case 5: // Сменить место спавна в организации
					{
						GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
						GetPlayerFacingAngle(playerid, gPos[3]);

						FracI[fracid][fPosSpawn][0] = gPos[0];
						FracI[fracid][fPosSpawn][1] = gPos[1];
						FracI[fracid][fPosSpawn][2] = gPos[2];
						FracI[fracid][fPosSpawn][3] = gPos[3];

						update_float_mysql(T_FRAC, "fPosSpawnX", FracI[fracid][fPosSpawn][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSpawnY", FracI[fracid][fPosSpawn][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSpawnZ", FracI[fracid][fPosSpawn][2], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosSpawnA", FracI[fracid][fPosSpawn][3], "fID", fracid);

						SaveFrac(fracid);
						FSCM(playerid, -1, "Место спавна для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
					}
					case 6: // Сменить место загрузки материалов для организации
					{
						DestroyDynamic3DTextLabel(infoLoadGun[fracid]);

						GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);

						FracI[fracid][fPosLoadGun][0] = gPos[0];
						FracI[fracid][fPosLoadGun][1] = gPos[1];
						FracI[fracid][fPosLoadGun][2] = gPos[2];

						// Загрузка материалов
						infoLoadGun[fracid] = CreateDynamic3DTextLabel(""SERVER"Загрузка материалов\n\n{BBBBBB}Нажмите: Гудок", -1, FracI[fracid][fPosLoadGun][0], FracI[fracid][fPosLoadGun][1], FracI[fracid][fPosLoadGun][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

						update_float_mysql(T_FRAC, "fPosLoadGunX", FracI[fracid][fPosLoadGun][0], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosLoadGunY", FracI[fracid][fPosLoadGun][1], "fID", fracid);
						update_float_mysql(T_FRAC, "fPosLoadGunZ", FracI[fracid][fPosLoadGun][2], "fID", fracid);

						SaveFrac(fracid);
						FSCM(playerid, -1, "Место загрузки материалов для "SERVER"%s"WHITE" успешно изменён!", FracI[fracid][fName]);
					}
					case 7: // Пополнить банк организации
					{
						new string[254];
						string_f("{FFFFFF}Вы желаете пополнить банк организации: "SERVER"%s{FFFFFF}?\n\
							Сумма пополнения должна быть не больше: "SERVER"25.000.000 рублей{FFFFFF}!\n\n\
							На данный момнет банк организации: "GREEN"%s рублей", FracI[fracid][fName], ConvertCash(FracI[fracid][fBank]));
						SPD(playerid, dSettingFracBank, d_input, ""SERVER"Пополнить банк организации", string, "Пополнить", "<< Назад");
					}
				}
			}
		}
		case dSettingFracBank:
		{
			if(!response)
			{
				new stringer[1024];
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап входа в организации [->]\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап выхода в организации [<-]\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап информации в организации [!]\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап оружейной в организации\\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить пикап раздевалки в организации\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить место спавна в организации\n");
				strcat(stringer, ""SERVER"- {FFFFFF}Сменить место загрузки материалов для организации\n");
				strcat(stringer, ""GREEN"- Пополнить банк организации\n");
				return SPD(playerid, dSettingFracSelect, d_list, "Управление", stringer, "Далее >>", "<< Назад");
			}
			else
			{
				new string[254], fracid = GetPVarInt(playerid, "fracsid"), money = strval(inputtext);
				if(!money)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					string_f("{FFFFFF}Вы желаете пополнить банк организации: "SERVER"%s{FFFFFF}?\n\
						Сумма пополнения должна быть не больше: "SERVER"25.000.000 рублей{FFFFFF}!\n\n\
						На данный момнет банк организации: "GREEN"%s рублей\n\
						"RED"[Ошибка] {FFFFFF} Укажите сумму пополнения!", FracI[fracid][fName], FracI[fracid][fBank]);
					return SPD(playerid, dSettingFracBank, d_input, ""SERVER"Пополнить банк организации", string, "Пополнить", "<< Назад");
				}
				if(money > 25000000)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					string_f("{FFFFFF}Вы желаете пополнить банк организации: "SERVER"%s{FFFFFF}?\n\
						Сумма пополнения должна быть не больше: "SERVER"25.000.000 рублей{FFFFFF}!\n\n\
						На данный момнет банк организации: "GREEN"%s рублей\n\
						"RED"[Ошибка] {FFFFFF} Сумма пополнения не должна быть более 25.000.000 рублей!", FracI[fracid][fName], ConvertCash(FracI[fracid][fBank]));
					return SPD(playerid, dSettingFracBank, d_input, ""SERVER"Пополнить банк организации", string, "Пополнить", "<< Назад");
				}
				FracI[fracid][fBank] += money;
				update_int_mysql(T_FRAC, "fBank", FracI[fracid][fBank], "fID", fracid);
				string[0] = EOS;
				string_f("[A] %s [#%i] пополнил(-а) банк организации %s на %s рублей - [Общий банк: %s рублей]", AdminName(playerid), AI[playerid][aNumber], FracI[fracid][fName], ConvertCash(money), ConvertCash(FracI[fracid][fBank]));
				SCMAdmin(cGREEN, string);
				FSCM(playerid, cGREEN, "Вы успешно пополнили банк организации %s на %s рублей - [Общий банк: %s рублей]", FracI[fracid][fName], ConvertCash(money), ConvertCash(FracI[fracid][fBank]));
			}
		}
		// Настройки администратора
		case dAdminSettings:
		{
			if(!response) return callcmd::ap(playerid);
			{
			    switch(listitem)
			    {
			        case 0..8:
			        {
						if(!AI[playerid][aSetting][listitem]) AI[playerid][aSetting][listitem] = true;
					    else AI[playerid][aSetting][listitem]=false;
						new string[156];
					    string_f("UPDATE "T_ADMIN" SET `aSetting` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i' WHERE `aID` = '%d' LIMIT 1",
						AI[playerid][aSetting][0], AI[playerid][aSetting][1], AI[playerid][aSetting][2], AI[playerid][aSetting][3], AI[playerid][aSetting][4],
						AI[playerid][aSetting][5], AI[playerid][aSetting][6], AI[playerid][aSetting][7], AI[playerid][aSetting][8], AI[playerid][aSetting][9],
						AI[playerid][aSetting][10], AI[playerid][aSetting][11], AI[playerid][aID]);
						mysql_tquery(mysql, string);
						return callcmd::aset(playerid);
					}
    				case 9: return callcmd::aset(playerid);
					case 10:
					{
						SPD(playerid, dAdminSmenaPass, d_info, ""SERVER"Смена пароля администратора", "{FFFFFF}\n\
							Для смены пароля, Вам необходимо указать текущий пароль, после указать новый.\n\
							После ввода нового пароля, Вам необходимо его подтвердить одноразовым паролем через "BLUE"VK{FFFFFF} или "SERVER"Почту{FFFFFF}!",
						"Сменить", "<< Назад");
					}
				}
			}
		}
		case dAdminSmenaPass: // Смена пароля администратора
		{
			if(!response) return callcmd::aset(playerid);
			{
			    SPD(playerid, dAdminSmenaPassCode, d_pass, ""WHITE"Смена пароля администратора | "SERVER"Старый пароль", "{FFFFFF}\n\
					Для смены пароля Вам необходимо укзать Ваш текущий пароль, чтобы понять что Вы его не забыли!\n\n\
					"SERVER"После ввода пароля Вам в VK или на Почту придет одноразовый код для подтверждения что Вы владелец аккаунта!\n\n\
					"GREY"Введите пароль в поле ниже:",
				"Указать", "<< Назад");
			}
		}
		case dAdminSmenaPassCode: // Отправка кода подтверждения
		{
			if(!response) return callcmd::aset(playerid);
			{
			    new pass = strlen(inputtext), string[512];

			    if(!(6 <= pass <= 32) || !pass)
			    {
			        string[0] = EOS;
			        strcat(string, "{FFFFFF}Для смены пароля Вам необходимо укзать Ваш текущий пароль, чтобы понять что Вы его не забыли!\n\n");
			        strcat(string, ""SERVER"После ввода правельного пароля Вам в VK или на Почту придет одноразовый код для подтверждения что Вы владелец аккаунта!\n\n");
			        strcat(string, ""WAR"Укажите пароль от 6 до 32 символов\n");
			        strcat(string, ""GREY"Введите пароль в поле ниже:");
					return SPD(playerid, dAdminSmenaPassCode, d_pass, ""WHITE"Смена пароля администратора | "SERVER"Старый пароль", string,	"Указать", "<< Назад");
				}
				for(new i; i < pass; i++)
				{
				    switch(inputtext[i])
				    {
				        case '0'..'9', 'A'..'Z', 'a'..'z': continue;
				        default:
				        {
					        string[0] = EOS;
					        strcat(string, "{FFFFFF}Для смены пароля Вам необходимо укзать Ваш текущий пароль, чтобы понять что Вы его не забыли!\n\n");
					        strcat(string, ""SERVER"После ввода правельного пароля Вам в VK или на Почту придет одноразовый код для подтверждения что Вы владелец аккаунта!\n\n");
					        strcat(string, ""WAR"Пароль может содержать только латинские/кириллические символы и цыфры (Aa-Zz, 0-9)\n");
					        strcat(string, ""GREY"Введите пароль в поле ниже:");
							return SPD(playerid, dAdminSmenaPassCode, d_pass, ""WHITE"Смена пароля администратора | "SERVER"Старый пароль", string,	"Указать", "<< Назад");
				        }
				    }
				}

				new stringPass[254];
				format(stringPass, sizeof(stringPass), "SELECT * FROM "T_ADMIN" WHERE `aName` = '%s' AND `aPassword` = md5('%s')", AI[playerid][aName], inputtext);
				mysql_tquery(mysql, stringPass, "CheckAdminPass", "d", playerid);
			}
		}
		case dAdminSmenaPassCode1:
		{
		    if(!response)
			{

			}
			else
			{

			}
		}
		case dCommandServer: // Команды сервера
		{
			if(!response) return DialogPlayerMenu(playerid);
			{
			    switch(listitem)
			    {
			        case 0: DialogCommandOsnovnoe(playerid);	// Команды Основные
			        case 1: DialogCommandObchenie(playerid); 	// Команды для Общения
			        case 2: DialogCommandFrac(playerid); 		// Команды для Огранизаций
			        case 3: DialogCommandJob(playerid); 		// Команды для Работ
					case 4: DialogCommandFamily(playerid); 		// Команды для Семьи
					case 5: DialogCommandCar(playerid); 		// Команды для Транспорта
					case 6: DialogCommandTK(playerid); 			// Команды для Транспортной компании
				}
			}
		}
        case dCommandOsnovnoe: // Команды сервера - Основные
		{
			if(response) return DialogCommandServer(playerid);
			else return 1;
		}
    	case dCommandObchenie: // Команды сервера - Общение
		{
			if(response) return DialogCommandServer(playerid);
			else return 1;
		}
		case dCommandFrac: // Команды сервера - Организация
		{
			new stringer[1024];
			if(!response) return DialogCommandServer(playerid);
	     	{
	     	    stringer[0] = EOS;
			    switch(listitem)
			    {
			        case 0: // Администрация области
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию\n");
						strcat(stringer, ""SERVER"/uninvite [ ID Игрока ] [ Причина ] {FFFFFF} - Уволить сотрудника из организации\n");
						strcat(stringer, ""SERVER"/rang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"Администрация области", stringer, "<< Назад", "Закрыть");
			        }
			        case 1: // ППС
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию.\n");
						strcat(stringer, ""SERVER"/frang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику.\n");
						strcat(stringer, ""SERVER"/fskin [ ID Игрока ]{FFFFFF} - Выдать форму сотруднику.\n");
						strcat(stringer, ""SERVER"/su [ ID Игрока ] [ Причина ]{FFFFFF} - Объявить игрока в розыск\n");
						strcat(stringer, ""SERVER"/cuff [ ID Игрока ]{FFFFFF} - Надеть наручники\n");
						strcat(stringer, ""SERVER"/uncuff [ ID Игрока ]{FFFFFF} - Снять наручники\n");
						strcat(stringer, ""SERVER"/m(egaphone) [ ID Игрока ]{FFFFFF} - Громкоговоритель\n");
						strcat(stringer, ""SERVER"/arrest [ ID Игрока ]{FFFFFF} - арестовать игрока\n");
						strcat(stringer, ""SERVER"/ticket [ ID Игрока ] [ Сумма штрафа ] [ Причина штрафа ]{FFFFFF} - Выписать штраф\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"ППС", stringer, "<< Назад", "Закрыть");
			        }
			        case 2: // ДПС
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию.\n");
						strcat(stringer, ""SERVER"/frang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику.\n");
						strcat(stringer, ""SERVER"/cuff [ ID Игрока ]{FFFFFF} - Надеть наручники\n");
						strcat(stringer, ""SERVER"/uncuff [ ID Игрока ]{FFFFFF} - Снять наручники\n");
						strcat(stringer, ""SERVER"/m(egaphone) [ ID Игрока ]{FFFFFF} - Громкоговоритель\n");
						strcat(stringer, ""SERVER"/arrest [ ID Игрока ]{FFFFFF} - арестовать игрока\n");
						strcat(stringer, ""SERVER"/ticket [ ID Игрока ] [ Сумма штрафа ] [ Причина штрафа ]{FFFFFF} - Выписать штраф\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"ДПС", stringer, "<< Назад", "Закрыть");
			        }
			        case 3: // ФСБ
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию.\n");
						strcat(stringer, ""SERVER"/frang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику.\n");
						strcat(stringer, ""SERVER"/su [ ID Игрока ] [ Причина ]{FFFFFF} - Объявить игрока в розыск\n");
						strcat(stringer, ""SERVER"/cuff [ ID Игрока ]{FFFFFF} - Надеть наручники\n");
						strcat(stringer, ""SERVER"/uncuff [ ID Игрока ]{FFFFFF} - Снять наручники\n");
						strcat(stringer, ""SERVER"/m(egaphone) [ ID Игрока ]{FFFFFF} - Громкоговоритель\n");
						strcat(stringer, ""SERVER"/arrest [ ID Игрока ]{FFFFFF} - арестовать игрока\n");
						strcat(stringer, ""SERVER"/ticket [ ID Игрока ] [ Сумма штрафа ] [ Причина штрафа ]{FFFFFF} - Выписать штраф\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"ФСБ", stringer, "<< Назад", "Закрыть");
			        }
			        case 4: // Вооруженные силы
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию.\n");
						strcat(stringer, ""SERVER"/frang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику.\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"Вооруженные силы", stringer, "<< Назад", "Закрыть");
			        }
			        case 5: // Областная больница
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию.\n");
						strcat(stringer, ""SERVER"/rang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику.\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"Областная больница", stringer, "<< Назад", "Закрыть");
			        }
			        case 6: // ТРК Ритм
			        {
						strcat(stringer, ""SERVER"/showud{FFFFFF} - Показать служебное удостоверение\n");
						strcat(stringer, ""SERVER"/r{FFFFFF} - Рация организации\n");
						strcat(stringer, ""SERVER"/rb{FFFFFF} - (OOC) Рация оргаизации\n");
						strcat(stringer, ""SERVER"/d{FFFFFF} - Депортамент области\n");
						strcat(stringer, ""SERVER"/db{FFFFFF} - (OOC) Депортамент области\n");
						strcat(stringer, ""SERVER"/invite [ ID Игрока ]{FFFFFF} - Принять игрока в организацию.\n");
						strcat(stringer, ""SERVER"/rang [ ID Игрока ]{FFFFFF} - Выдать ранг сотруднику.\n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"ТРК Ритм", stringer, "<< Назад", "Закрыть");
			        }
			        case 7: // ОПГ Барыги
			        {
						strcat(stringer, ""SERVER"/{FFFFFF} - \n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"ОПГ Барыги", stringer, "<< Назад", "Закрыть");
					}
			        case 8: // ОПГ Южная
			        {
						strcat(stringer, ""SERVER"/{FFFFFF} - \n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"ОПГ Южная", stringer, "<< Назад", "Закрыть");
					}
			        case 9: // Чеченская мафия
			        {
						strcat(stringer, ""SERVER"/{FFFFFF} - \n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"Чеченская мафия", stringer, "<< Назад", "Закрыть");
					}
			        case 10: // Русская мафия
			        {
						strcat(stringer, ""SERVER"/{FFFFFF} - \n");
						SPD(playerid, dCommandFracs, d_info, "{FFFFFF}Команды сервера | Организации | "SERVER"Русская мафия", stringer, "<< Назад", "Закрыть");
					}
				}
			}
		}
		case dCommandFracs:
		{
		    if(!response) return 1;
			else if(response) return DialogCommandFrac(playerid);
		}
		case dCommandJob: // Команды сервера - Работы
		{
			if(!response) return DialogCommandServer(playerid);
			{
			    switch(listitem)
			    {
			        case 0: // Механик
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Механик", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
					case 1: // Таксист
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Таксист", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
					case 2: // Пилот
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Пилот", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
					case 3: // Дальнобойщик
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Дальнобойщик", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
					case 4: // Мусорщик
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Мусорщик", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
					case 5: // Инкасатор
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Инкасатор", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
					case 6: // Электрик
					{
						SPD(playerid, dCommandJobOff, d_info, "{FFFFFF}Команды сервера | Работы | "SERVER"Электрик", ""SERVER"\
						"SERVER"/{FFFFFF} - \n",
						"<< Назад", "Закрыть");
					}
			    }
			}
		}
		case dCommandJobOff:
		{
			if(response) return DialogCommandServer(playerid);
			else return 1;
		}
		case dCommandFamily: // Команды сервера - Семья
		{
			if(response) return DialogCommandServer(playerid);
			else return 1;
		}
		case dCommandCar:
		{
		    if(!response) return 1;
			else if(response) return DialogCommandServer(playerid);
		}
		case dCommandTK:
		{
		    if(!response) return 1;
			else if(response) return DialogCommandServer(playerid);
		}
		case dMenuSetting: // Меню настроек
		{
			if(!response) return DialogPlayerMenu(playerid);
			{
				switch(listitem)
				{
					case 0: // Настройки безопасности
					{
						new string[512], str[156];
						strcat(string, "№. Нименование\tСтатус\n");
						strcat(string, ""SERVER"1.{FFFFFF} Изменить пароль\n");
						format(str, sizeof(str), ""SERVER"2.{ffffff} Графический "SERVER"PIN"WHITE" код\t%s\n", (!AcI[playerid][acPinCode]) ? ("{F04245}Не установлен") : ("{63BD4E}Установлен")); strcat(string, str);
						format(str, sizeof(str), ""SERVER"3.{ffffff} Привязка "BLUE"ВКонтакте"WHITE"\t%s\n", AcI[playerid][acVkID]); strcat(string, str);
						format(str, sizeof(str), ""SERVER"4.{ffffff} Google Authenticator\t%s\n", (!AcI[playerid][acStatusGoogle]) ? ("{F04245}Отключена") : ("{63BD4E}Включена")); strcat(string, str);
						strcat(string, ""SERVER"4.{FFFFFF} Сменить почту\n");
						SPD(playerid, dMenuSettingUser, d_tlisth, ""WHITE"Настройки | "SERVER"Настройки безопасности", string, "Выбрать", "<< Назад");
						return 1;
					}
				}
			}
		}
		case dMenuSettingUser: // Настройки безопасности
		{
			if(!response) return DialogMenuSettings(playerid);
			{
				switch(listitem)
				{
					case 0: // Изменить пароль
					{
						if(!GetString(AcI[playerid][acVkID], "NULL"))
						{
							SPD(playerid, dSmenaPass, d_input, ""SERVER"Смена пароля", "{FFFFFF}\
								Для смены пароля Вам необходимо подтвердить, что Вы являетесь владелцем аккаунта!\n\
								На Вашу страничку ВК отправлен код подтверждения, введите в поле его ниже:",
							"Ввести", "Отмена");
							new VK_Cod = 100000+random(899999); // Генерируем 4-х значное число
							SetPVarInt(playerid, "code_vk", VK_Cod); // сохраняем сгенирированное число в pvar. Зачем? Чтобы сравнить потом на правильность

							new stringVK[254];
							format(stringVK, sizeof(stringVK), "\
								Здравствуйте уважаем%s %s!\n\n\
								Ваш код подтверждения:\n%i\n\
								Он нужен для смены пароля на сервере от аккаунта!",
							(PI[playerid][Sex])?("ый"):("ая"), GetName(playerid), VK_Cod);
							SCMVk(AcI[playerid][acVkID], stringVK);
							return 1;
						}
						return 1;
					}
					case 1: // Графический PIN код
					{
						if(!AcI[playerid][acPinCode]) SPD(playerid, dCreatePinCone, d_input, ""SERVER"Установка графического PIN кода", ""WHITE"\
							Введите Ваш новый PIN код в поле ниже:\n\n\
							Примечание: PIN код должен быть 4-ёх значный и не начинаться на 0!",
							"Указать", "<< Назад");
						else SPD(playerid, dSettingPinCone, d_list, ""SERVER"Управление графическим PIN кодом", ""WHITE"\
							"SERVER"1.{FFFFFF} Сменить PIN код\n\
							"SERVER"2.{FFFFFF} Удалить PIN код\n\
							"SERVER"3.{FFFFFF} Запрашивать PIN код: \n",
							"Выбрать", "<< Назад");
					}
					case 2: // Привязка ВКонтакте
					{
						if(!GetString(AcI[playerid][acVkID], "NULL"))
						{
							SPD(playerid, dMenuSettingVK, d_list, "Управление привязкой странички ВК", "\n\
								"SERVER"1.{FFFFFF} Отвязать\n\
								"SERVER"2.{FFFFFF} Изменить",
							"Выбрать", "Закрыть");
						}
						else
						{
			 				SPD(playerid, dSettingVK_ID, d_input, ""SERVER"Привязка ВКонтакте", "{FFFFFF}\
							 	Для привязки странички VK Вам необходимо указать ее ID!\n\n\
							 	Например: vk.com/id1234567890 или vk.com/ivan_ivanov\n\n\
							 	В: Как найти ID странички VK?\n\
							 	О: Перейти в Настройки > Адрес страницы",
					 		"Указать", "Отмена");
						}
					}
					case 3: // Защита Google Authenticator
					{
						if(!AcI[playerid][acStatusGoogle] && GetString(AcI[playerid][acGoogleCode], "NULL"))
						{
							SPD(playerid, dSettingGoogle, d_info,"Защита Google Authenticator", "Вы действительно хотите поставить защиту от Google Authenticator?", "Да", "Нет");
							return 1;
						}
						else
					    {
						    SPD(playerid, dSettingGooglOff, d_info, "Требуеться подтверждение", "{FFFFFF}\
								Отключение двухэтапной авторизации может привести к {FF0000}утрате{FFFFFF}\n\
								Вашего акаунта и потере игрового процесса\n\n\
								Вы действительно хотите отключить двухэтапную авторизация?",
							"Да", "Отмена");
						}
					}
					case 4: // Сменить почту
					{
						return 1;
					}
				}
			}
		}
		case dSmenaPass:
		{
			if(!response) return DeletePVar(playerid, "code_vk");
			{
				new NewPass = strlen(inputtext);
				if(GetPVarInt(playerid, "code_vk") == strval(inputtext))
				{
					if(!NewPass) // Поле для ввода пустое
					{
						PlayerPlaySound(playerid, 1150,0,0,0);
						SEM(playerid, "Вы не указали пароль!");

						SPD(playerid, dSmenaPass, d_input, ""SERVER"Смена пароля", "{FFFFFF}\
								Для смены пароля Вам необходимо подтвердить, что Вы являетесь владелцем аккаунта!\n\
								На Вашу страничку ВК отправлен код подтверждения, введите в поле его ниже:",
							"Ввести", "Отмена");
						new VK_Cod = 100000+random(899999); // Генерируем 4-х значное число
						SetPVarInt(playerid, "code_vk", VK_Cod); // сохраняем сгенирированное число в pvar. Зачем? Чтобы сравнить потом на правильность

						new stringVK[254];
						format(stringVK, sizeof(stringVK), "\
							Здравствуйте уважаем%s %s!\n\n\
							Ваш код подтверждения:\n%i\n\
							Он нужен для смены пароля на сервере от аккаунта!",
						(PI[playerid][Sex])?("ый"):("ая"), GetName(playerid), VK_Cod);
						SCMVk(AcI[playerid][acVkID], stringVK);
						return DeletePVar(playerid, "code_vk");
					}
					if(!(6 <= NewPass <= 32)) // Колличество символов малое или большое!
					{
						PlayerPlaySound(playerid, 1150,0,0,0);
						SEM(playerid, "Указанный Вами пароль меньше 6-ти или больше 32-ух символов!");

						SPD(playerid, dSmenaPass, d_input, ""SERVER"Смена пароля", "{FFFFFF}\
								Для смены пароля Вам необходимо подтвердить, что Вы являетесь владелцем аккаунта!\n\
								На Вашу страничку ВК отправлен код подтверждения, введите в поле его ниже:",
							"Ввести", "Отмена");
						new VK_Cod = 100000+random(899999); // Генерируем 4-х значное число
						SetPVarInt(playerid, "code_vk", VK_Cod); // сохраняем сгенирированное число в pvar. Зачем? Чтобы сравнить потом на правильность

						new stringVK[254];
						format(stringVK, sizeof(stringVK), "\
							Здравствуйте уважаем%s %s!\n\n\
							Ваш код подтверждения:\n%i\n\
							Он нужен для смены пароля на сервере от аккаунта!",
						(PI[playerid][Sex])?("ый"):("ая"), GetName(playerid), VK_Cod);
						SCMVk(AcI[playerid][acVkID], stringVK);
						return DeletePVar(playerid, "code_vk");
					}
					for(new i = NewPass; i != 0; --i) // Проверка на регистер ввода!
					{
						switch(inputtext[i]) // проверка на русскую раскладку
						{
							case 'А'..'Я', 'а'..'я', ' ', '=':
							{
								PlayerPlaySound(playerid, 1150,0,0,0);
								SEM(playerid, "Вы указали пароль на киррилице, укажите пароль на латинице!");

								SPD(playerid, dSmenaPass, d_input, ""SERVER"Смена пароля", "{FFFFFF}\
										Для смены пароля Вам необходимо подтвердить, что Вы являетесь владелцем аккаунта!\n\
										На Вашу страничку ВК отправлен код подтверждения, введите в поле его ниже:",
									"Ввести", "Отмена");
								new VK_Cod = 100000+random(899999); // Генерируем 4-х значное число
								SetPVarInt(playerid, "code_vk", VK_Cod); // сохраняем сгенирированное число в pvar. Зачем? Чтобы сравнить потом на правильность

								new stringVK[254];
								format(stringVK, sizeof(stringVK), "\
									Здравствуйте уважаем%s %s!\n\n\
									Ваш код подтверждения:\n%i\n\
									Он нужен для смены пароля на сервере от аккаунта!",
								(PI[playerid][Sex])?("ый"):("ая"), GetName(playerid), VK_Cod);
								SCMVk(AcI[playerid][acVkID], stringVK);
								return DeletePVar(playerid, "code_vk");
							}
						}
					}
					strmid(AcI[playerid][acPassword], inputtext, 0, NewPass, 40);

					SPD(playerid, dNull, d_input, ""SERVER"Укажите новый пароль", "{ffffff}\
						Укажите ",
					"Ввести", "Закрыть");
				}
				return DeletePVar(playerid, "code_vk");
			}
		}
		case dCreatePinCone:
		{
			if(!response) return 1;
			{
				if(!strlen(inputtext))
				{
					return SPD(playerid, dCreatePinCone, d_input, ""SERVER"Установка графического PIN кода", ""WHITE"\
						Введите Ваш новый PIN код в поле ниже:\n\n\
						Примечание: PIN код должен быть 4-ёх значный и не начинаться на 0!\n\n\
						"WAR"[Ошибка]{FFFFFF} Вы не указали PIN код!",
					"Указать", "<< Назад");
				}
				new regex:pin_check = regex_new("^[1-9]{1}[0-9]{3}$");
				if(regex_check(inputtext, pin_check))
				{
					AcI[playerid][acPinCode] = strval(inputtext);
					update_int_mysql(T_ACC_S, "acPinCode", AcI[playerid][acPinCode], "acID", AcI[playerid][acID]);
					FSCM(playerid, -1, "Вы успешно установили новый PIN код: "SERVER"%i"WHITE".", AcI[playerid][acPinCode]);
					SCMInfo(playerid, "Рекомендуем сделать скриншот экрана кнопкой: "BLUE"F8"WHITE" и записать его!");
				}
				else
				{
					regex_delete(pin_check);
					return SPD(playerid, dCreatePinCone, d_input, ""SERVER"Установка графического PIN кода", ""WHITE"\
						Введите Ваш новый PIN код в поле ниже:\n\n\
						Примечание: PIN код должен быть 4-ёх значный и не начинаться на 0!\n\n\
						"WAR"[Ошибка]{FFFFFF} Введите корректно PIN код!",
					"Указать", "<< Назад");
				}
				regex_delete(pin_check);
			}
		}
		case dSettingPinCone: // 
		{
			if(!response) return 1;
			{
				switch(listitem)
				{
					case 0: // Сменить PIN код
					{
						SPD(playerid, dSettingPinUpdate, d_input, "\
							Смена графического PIN кода", "{FFFFFF}Укажите свой текущий "SERVER"графический PIN код{FFFFFF} для его смены.", "Указать", "< Назад");
					}
					case 1: // Удалить PIN код
					{
						SPD(playerid, dSettingPinDelete, d_input, "\
							Удаление графического PIN кода", "{FFFFFF}Укажите свой текущий "SERVER"графический PIN код{FFFFFF} для его удаления.", "Указать", "< Назад");
					}
				}
			}
		}		
		case dSettingPinUpdate: // Сменить PIN код
		{
			if(!response) 
			{
				return SPD(playerid, dSettingPinCone, d_list, ""SERVER"Управление графическим PIN кодом", ""WHITE"\
					"SERVER"1.{FFFFFF} Сменить PIN код\n\
					"SERVER"2.{FFFFFF} Удалить PIN код\n\
					"SERVER"3.{FFFFFF} Запрашивать PIN код: \n",
				"Выбрать", "<< Назад");
			}
			else 
			{
				new string[254], pin = strval(inputtext), PINError = SetPVarInt(playerid, "PINError", 3);
				if(pin != AcI[playerid][acPinCode]) 
				{
					PINError --;
				
					string_f("{FFFFFF}Укажите свой текущий "SERVER"графический PIN код{FFFFFF} для его смены.\n\n\
						{FF0000}[Ошибка] {FFFFFF}Вы указали неверный графический PIN код!\n\
						"SERVER"Попыток осталось: %i из 3.", PINError); 
					return SPD(playerid, dSettingPinUpdate, d_input, "Смена графического PIN кода", string, "Указать", "< Назад");
				}
				DeletePVar(playerid, "PINError");
				SPD(playerid, dSettingPinUpdateNew, d_input, "Смена графического PIN кода", "", "Указать", "< Назад");
			}
		} 
		case dSettingPinUpdateNew: // Указать новый графический PIN код
		{
			if(!response) 
			{
				// 
				return 1;
			}
			else
			{

			}
		}
		case dSettingPinDelete: // Удалить PIN код
		{ 
			if(!response) 
			{
				return SPD(playerid, dSettingPinCone, d_list, ""SERVER"Управление графическим PIN кодом", ""WHITE"\
					"SERVER"1.{FFFFFF} Сменить PIN код\n\
					"SERVER"2.{FFFFFF} Удалить PIN код\n\
					"SERVER"3.{FFFFFF} Запрашивать PIN код: \n",
				"Выбрать", "<< Назад");
			}
			else 
			{
				new pin = strval(inputtext);
				if(pin != AcI[playerid][acPinCode]) 
				{

				}
			}
		}
		case dMenuSettingVK: // 
		{
			if(!response) return 1;
			{

			}
		}
		case dSettingVK_ID: //
		{
			new vkid = strlen(inputtext);
			if(!response) return 1;
			{
			    if(!vkid) // Поле для ввода пустое
				{
					SEM(playerid, "Вы не указали адрес страницы!");
					return SPD(playerid, dSettingVK_ID, d_input, ""SERVER"Привязка Vkontakte", "{FFFFFF}\
					 	Для привязки странички VK Вам необходимо указать ее ID!\n\n\
					 	Например: vk.com/id1234567890\n\n\
					 	В: Как найти ID странички VK?\n\
					 	О: Перейти в Настройки > Адрес страницы",
			 		"Указать", "Отмена");
	   			}
	   			if(!(6 <= vkid <= 32)) // Колличество символов малое или большое!
				{
					SEM(playerid, "Указанный Вами адрес страницы меньше 6-ти или больше 32-ух символов!");
					return SPD(playerid, dSettingVK_ID, d_input, ""SERVER"Привязка Vkontakte", "{FFFFFF}\
					 	Для привязки странички VK Вам необходимо указать ее ID!\n\n\
					 	Например: vk.com/id1234567890\n\n\
					 	В: Как найти ID странички VK?\n\
					 	О: Перейти в Настройки > Адрес страницы",
			 		"Указать", "Отмена");
				}
				for(new i = vkid; i != 0; --i) // Проверка на регистер ввода!
				{
				    switch(inputtext[i]) // проверка на русскую раскладку
				    {
				        case 'А'..'Я', 'а'..'я', ' ', '=':
				        {
							SEM(playerid, "Вы указали адрес страницы на киррилице, укажите адрес страницы на латинице!");
							return SPD(playerid, dSettingVK_ID, d_input, ""SERVER"Привязка Vkontakte", "{FFFFFF}\
							 	Для привязки странички VK Вам необходимо указать ее ID!\n\n\
							 	Например: vk.com/id1234567890\n\n\
							 	В: Как найти ID странички VK?\n\
							 	О: Перейти в Настройки > Адрес страницы",
					 		"Указать", "Отмена");
				        }
					}
				}
				SetPVarString(playerid, "id_vk", inputtext); // Записываем то что ввел пользователь в переменную
	            new code = 100000+random(899999); // Генерируем 4-х значное число
	            SetPVarInt(playerid, "code_vk", code); // сохраняем сгенирированное число в pvar. Зачем? Чтобы сравнить потом на правильность

	            new string[256];
	            string_f("\
					Здравствуйте уважаем%s %s!\n\n\
					Ваш код подтверждения %i для привязки стрницы VK на сервере.",
				(PI[playerid][Sex])?("ый"):("ая"), GetName(playerid), code);
				SCMVk(inputtext, string);
	            return SPD(playerid, dSettingVK_Code, DIALOG_STYLE_INPUT, "Подтверждение ВК", "Мы отправили вам код\nВведите его ниже", "Далее", "Отмена");
			}
		}
		case dSettingVK_Code:
		{
			if(!response) { DeletePVar(playerid, "code_vk"), DeletePVar(playerid, "id_vk"); return 1; }
			{
				if(strval(inputtext) == GetPVarInt(playerid, "code_vk"))
				{
				    new vkID[32];
			    	GetPVarString(playerid, "id_vk", vkID, sizeof(vkID));
					SetString(AcI[playerid][acVkID], vkID);
					update_str_mysql(T_ACC_S, "acVkID", AcI[playerid][acVkID], "acID", AcI[playerid][acID]);
			        SCMInfo(playerid, "Ваша страничка VK успешно подтверждена!");
			        DeletePVar(playerid, "code_vk");
			        DeletePVar(playerid, "id_vk");
			        // код верный
				}
				else
				{
					SEM(playerid, "Код указан неверно!");
					return SPD(playerid, dSettingVK_Code, DIALOG_STYLE_INPUT, "Подтверждение ВК", "Мы отправили вам код\nВведите его ниже", "Далее", "Отмена");
					// нет
				}
			}
		}
		case dSettingGoogle:
		{
			if(!response) return callcmd::menu(playerid);
			else return DialogPlayerGoogle(playerid);
		}
		case dSettingGoogleOn:
		{
			if(!response) return 1;
			{
			    new codegoogle = GoogleAuthenticatorCode(google_code, gettime()); // получаем код от гугл (из цифр)
			    if(strval(inputtext) != codegoogle) // ввел неверно код
				{
					SEM(playerid, "Код не верный!");
				    return DialogPlayerGoogle(playerid);
				}
				else
				{
					AcI[playerid][acStatusGoogle] = 1;
					SetString(AcI[playerid][acGoogleCode], google_code);
					update_int_mysql(T_ACC_S, "acStatusGoogle", AcI[playerid][acStatusGoogle], "acID", AcI[playerid][acID]);
					update_str_mysql(T_ACC_S, "acGoogleCode", AcI[playerid][acGoogleCode], "acID", AcI[playerid][acID]);
					return SCMInfo(playerid, "Вы успешно подключили защиту по Google Authenticator.");
				}
			}
		}
		case dSettingGooglOff:
		{
			if(!response) return 1;
			{
				SPD(playerid, dSettingGooglOff_1, d_input, "Подтверждение Google Authenticator", "{FFFFFF}\
				Чтобы окончательно подтвердить отключение двухэтапной авторизации\n\
				введите Ваш код безопасности", "Отключить", "Отмена");
			}
		}
		case dSettingGooglOff_1:
		{
			if(!response) return 1;
			{
			    new codegoogle = GoogleAuthenticatorCode(AcI[playerid][acGoogleCode], gettime()); // получаем код от гугл (из цифр)
			    if(strval(inputtext) != codegoogle)// ввел неверно код, баним IPшник
				{
					SPD(playerid, dSettingGooglOff, d_input, "Подтверждение Google Authenticator", "{FFFFFF}\
					Чтобы окончательно подтвердить отключение двухэтапной авторизации\n\
					введите Ваш код безопасности{FF0000} Код указан неверно!", "Отключить", "Отмена");
					return 1;
				}
			    SCMInfo(playerid, "Двухэтапная авторизация была успешно отключена"); // если все норм
			    AcI[playerid][acStatusGoogle] = 0;
			    SetString(AcI[playerid][acGoogleCode], "NULL");
			    update_int_mysql(T_ACC_S, "acStatusGoogle", 0, "acID", AcI[playerid][acID]);
			    update_str_mysql(T_ACC_S, "acGoogleCode", "NULL", "acID", AcI[playerid][acID]);
		    }
		}
		// Репорт
		case dReport:
		{
    		new stringer[1024];
			if(!response) return callcmd::menu(playerid);
			switch(listitem)
			{
			    case 0: // Задать вопрос
			    {
			        if(GetPVarInt(playerid,"AntiFloodRep") > gettime() && !PI[playerid][Vip]) return SEM(playerid, "Отправить вопрос раз в 90 секунд");
			        else if(GetPVarInt(playerid,"AntiFloodRep") > gettime() && PI[playerid][Vip]) return SEM(playerid, "Отправить вопрос раз в 45 секунд");
					{
					    stringer[0] = EOS;
						strcat(stringer, "{FFFFFF}Здравствуйте, здесь Вы можете задать свой вопрос администрции сервера!\n");
						strcat(stringer, "Вопрос можно задать один раз в 90 секунд. Сделано для того что бы не было спама.\n\n");
						strcat(stringer, "\t\t\t"SERVER"Правила для вопроса!\n");
						strcat(stringer, "\t"SERVER"1{FFFFFF} - Запрещено задавать один и тот же вопрос несколько раз! [Оффтоп]\n");
						strcat(stringer, "\t"SERVER"2{FFFFFF} - Задавать вопрос не по существу, Ваш вопрос должен быть четким и ясным.\n");
						strcat(stringer, "\t"SERVER"3{FFFFFF} - Запрещено задавать вопрос CAPS LOCK! [CAPS]\n\n");
						strcat(stringer, "\t"SERVER"4{FFFFFF} - Запрещено использовать ненармотивную лексику в вопросе. [Мат]\n");
						strcat(stringer, "\t"SERVER"5{FFFFFF} - Запрещено посить у администрации ресурсы [Деньги, Донат, Уровень, Здоровье, ТП к себе и т.д.].\n");
						strcat(stringer, "Соблюдайте правила, во избижания наказания!");
					    SPD(playerid, dReport1, d_input, "Задать вопрос", stringer, "Отправить", "<< Назад");
					}
				}
				case 1: // Подать жалобу
			    {
			        if(GetPVarInt(playerid,"AntiFloodRep2") > gettime() && !PI[playerid][Vip]) return SEM(playerid, "Отправить вопрос раз в 90 секунд");
			        else if(GetPVarInt(playerid,"AntiFloodRep2") > gettime() && PI[playerid][Vip]) return SEM(playerid, "Отправить вопрос раз в 45 секунд");
			        {
					    stringer[0] = EOS;
						strcat(stringer, "{FFFFFF}Здравствуйте, здесь Вы можете подать жалобу на игрока!\n");
						strcat(stringer, "Жалобу можно подавать один раз в 90 секунд, для VIP игроков время сокращено до 45 секунд! Сделано для того что бы не было спама.\n\n");
						strcat(stringer, "\t\t\t"SERVER"Правила для жалоб!\n");
						strcat(stringer, "\t"SERVER"1{FFFFFF} - Запрещенно подавать одну и тоже жалобу несколько раз! [Оффтоп]\n");
						strcat(stringer, "\t"SERVER"2{FFFFFF} - Подавать жалобу не по существу, Ваша жалоба должена быть четко и ясно подана.\n");
						strcat(stringer, "\t"SERVER"3{FFFFFF} - Запрещенно подавать жалобу в CAPS LOCK! [CAPS]\n");
						strcat(stringer, "\t"SERVER"4{FFFFFF} - Запрещено использовать ненармотивную лексику в жалобе. [Мат]\n");
						strcat(stringer, "Соблюдайте правила, во избижания наказания!\n\n");
						strcat(stringer, "Пример подачи жалобы: ID, Текст нарушения. (Указывать через запятую!)");
					    SPD(playerid, dReport2, d_input, "Подать жалобу", stringer, "Отправить", "<< Назад");
					}
				}
			}
		}
		case dReport1:
		{
		    if(!response) return callcmd::menu(playerid);
		    {
    			new stringer[1024];
				if(!strlen(inputtext))
				{
					stringer[0] = EOS;
					strcat(stringer, "{FFFFFF}Здравствуйте, здесь Вы можете задать свой вопрос администрции сервера!\n");
					strcat(stringer, "Вопрос можно задать один раз в 90 секунд. Сделано для того что бы не было спама.\n\n");
					strcat(stringer, "\t\t\t"SERVER"Правила для вопроса!\n");
					strcat(stringer, "\t"SERVER"1{FFFFFF} - Запрещено задавать один и тот же вопрос несколько раз! [Оффтоп]\n");
					strcat(stringer, "\t"SERVER"2{FFFFFF} - Задавать вопрос не по существу, Ваш вопрос должен быть четким и ясным.\n");
					strcat(stringer, "\t"SERVER"3{FFFFFF} - Запрещено задавать вопрос CAPS LOCK! [CAPS]\n\n");
					strcat(stringer, "\t"SERVER"4{FFFFFF} - Запрещено использовать ненармотивную лексику в вопросе. [Мат]\n");
					strcat(stringer, "\t"SERVER"5{FFFFFF} - Запрещено посить у администрации ресурсы [Деньги, Донат, Уровень, Здоровье, ТП к себе и т.д.].\n");
					strcat(stringer, "Соблюдайте правила, во избижания наказания!");
					SPD(playerid, dReport1, d_input, "Задать вопрос", stringer, "Отправить", "<< Назад");
					return 1;
				}
				if(strlen(inputtext) > 90)
				{
					stringer[0] = EOS;
					strcat(stringer, "{FFFFFF}Здравствуйте, здесь Вы можете задать свой вопрос администрции сервера!\n");
					strcat(stringer, "Вопрос можно задать один раз в 90 секунд. Сделано для того что бы не было спама.\n\n");
					strcat(stringer, "\t\t\t"SERVER"Правила для вопроса!\n");
					strcat(stringer, "\t"SERVER"1{FFFFFF} - Запрещено задавать один и тот же вопрос несколько раз! [Оффтоп]\n");
					strcat(stringer, "\t"SERVER"2{FFFFFF} - Задавать вопрос не по существу, Ваш вопрос должен быть четким и ясным.\n");
					strcat(stringer, "\t"SERVER"3{FFFFFF} - Запрещено задавать вопрос CAPS LOCK! [CAPS]\n\n");
					strcat(stringer, "\t"SERVER"4{FFFFFF} - Запрещено использовать ненармотивную лексику в вопросе. [Мат]\n");
					strcat(stringer, "\t"SERVER"5{FFFFFF} - Запрещено посить у администрации ресурсы [Деньги, Донат, Уровень, Здоровье, ТП к себе и т.д.].\n");
					strcat(stringer, "Соблюдайте правила, во избижания наказания!");
					SPD(playerid, dReport1, d_input, "Задать вопрос", stringer, "Отправить", "<< Назад");
					return 1;
				}
				SCMInfo(playerid, "Вы успешно задали свой вопрос, ожидайте ответа!");
				if(PI[playerid][Vip]) SetPVarInt(playerid, "AntiFloodRep", gettime() + 45);
				else SetPVarInt(playerid, "AntiFloodRep", gettime() + 90);

	            new string[128];
	            if(GetAdmin(playerid)) string_f(""SERVER"[A] "GREEN"Вопрос от %s [%d]:{FF9900} %s", GetName(playerid), playerid, inputtext);
				else string_f("[A] Вопрос от %s [%d]:{FF9900} %s", GetName(playerid), playerid, inputtext);
				SCMAdmin(cBLUE, string);

				SetPVarString(playerid, "RepText", inputtext);
				foreach(new i: Player) { if(GetAdmin(i) && AdminLogin[i]) return GameTextForPlayer(i,"~g~Вопрос ++", 3000, 1); }
			}
		}
		case dReport2:
		{
		    if(!response) return callcmd::menu(playerid);
		    {
    			new stringer[1024];
		        new id = strval(inputtext);
		        if(sscanf(inputtext, "p<,>ds[32]", id, inputtext))
		        {
					if(id == INVALID_PLAYER_ID)
					{
					    stringer[0] = EOS;
						strcat(stringer, "{FFFFFF}Здравствуйте, здесь Вы можете подать жалобу на игрока!\n");
						strcat(stringer, "Жалобу можно подавать один раз в 90 секунд, для VIP игроков время сокращено до 45 секунд! Сделано для того что бы не было спама.\n\n");
						strcat(stringer, "\t\t\t"SERVER"Правила для жалоб!\n");
						strcat(stringer, "\t"SERVER"1{FFFFFF} - Запрещенно подавать одну и тоже жалобу несколько раз! [Оффтоп]\n");
						strcat(stringer, "\t"SERVER"2{FFFFFF} - Подавать жалобу не по существу, Ваша жалоба должена быть четко и ясно подана.\n");
						strcat(stringer, "\t"SERVER"3{FFFFFF} - Запрещенно подавать жалобу в CAPS LOCK! [CAPS]\n");
						strcat(stringer, "\t"SERVER"4{FFFFFF} - Запрещено использовать ненармотивную лексику в жалобе. [Мат]\n");
						strcat(stringer, "Соблюдайте правила, во избижания наказания!\n\n");
						strcat(stringer, "Пример подачи жалобы: ID, Текст нарушения. (Указывать через запятую!)");
					    SPD(playerid, dReport2, d_input, "Подать жалобу", stringer, "Отправить", "<< Назад");
						return 1;
					}
					if(!strlen(inputtext) || strlen(inputtext) > 32)
					{
					    stringer[0] = EOS;
						strcat(stringer, "{FFFFFF}Здравствуйте, здесь Вы можете подать жалобу на игрока!\n");
						strcat(stringer, "Жалобу можно подавать один раз в 90 секунд, для VIP игроков время сокращено до 45 секунд! Сделано для того что бы не было спама.\n\n");
						strcat(stringer, "\t\t\t"SERVER"Правила для жалоб!\n");
						strcat(stringer, "\t"SERVER"1{FFFFFF} - Запрещенно подавать одну и тоже жалобу несколько раз! [Оффтоп]\n");
						strcat(stringer, "\t"SERVER"2{FFFFFF} - Подавать жалобу не по существу, Ваша жалоба должена быть четко и ясно подана.\n");
						strcat(stringer, "\t"SERVER"3{FFFFFF} - Запрещенно подавать жалобу в CAPS LOCK! [CAPS]\n");
						strcat(stringer, "\t"SERVER"4{FFFFFF} - Запрещено использовать ненармотивную лексику в жалобе. [Мат]\n");
						strcat(stringer, "Соблюдайте правила, во избижания наказания!\n\n");
						strcat(stringer, "Пример подачи жалобы: ID, Текст нарушения. (Указывать через запятую!)");
					    SPD(playerid, dReport2, d_input, "Подать жалобу", stringer, "Отправить", "<< Назад");
						return 1;
					}
					SCM(playerid, cGREEN, "[ Информация ] {FFFFFF}Вы успешно подали жалобу, ожидайте ответа!");
					if(PI[playerid][Vip]) SetPVarInt(playerid, "AntiFloodRep2", gettime() + 45);
					else SetPVarInt(playerid, "AntiFloodRep2", gettime() + 90);
					SetPVarString(playerid, "RepText", inputtext);

		            new string[144];
					if(GetAdmin(playerid)) string_f(""SERVER"[A] "GREEN"Жалоба от {FF9900}%s [%d]:", GetName(playerid), playerid);
					else string_f("[A] Жалоба от {FF9900}%s [%d]:", GetName(playerid), playerid);
					SCMAdmin(cWAR, string);
					string_f("\t\t[A] ID нарушителя: {FF9900}%d | "GREEN"Нарушение: {FF9900} %s", id, inputtext); SCMAdmin(cGREEN, string);
					foreach(new i: Player) { if(GetAdmin(i) >= 1 && AdminLogin[i]) return GameTextForPlayer(i,"~g~Жалоба ++",3000,1); }
				}
			}
		}
		case dRepAdmin:
		{
            if(!response) return 1;
			else SPD(playerid, dAdminRep, d_list, "Оставьте отзыв о администраторе!", "{63BD4E}Хороший ответ!\n{FF0000}Плохой ответ!", "Выбрать", "Отмена");
		}
		case dAdminRep:
		{
		    new Admin = GetPVarInt(playerid, "RepAdmin");
		    if(!response) return 1;
			{
				switch(listitem)
				{
					case 0: { AI[Admin][aReputacion] ++; GameTextForPlayer(Admin,"~g~Reputacion: ++",3000,1); }
					case 1: { AI[Admin][aReputacion] --; GameTextForPlayer(Admin,"~r~Reputacion: --",3000,1); }
				}
				SCM(playerid, cGREEN, "[Инофрмация]{FFFFFF} Спасибо за Ваш отзыв!");

				SaveAdmin(Admin);
				DeletePVar(playerid, "RepAdmin");
				DeletePVar(playerid, "RepText");
			}
		}
		//
		case dReferalList: // Список рефералов
		{
			if(!response) return FirstOpenCMD[playerid] = false;
			{
				if(!strcmp(inputtext, "{24c697}Далее >>", false) || !strcmp(inputtext, "{afafaf}<< Назад", false))
				{
					if(!strcmp(inputtext, "{afafaf}<< Назад", false)) TotalPlayers[playerid] -= (15 + LastPlayers[playerid]);
					return DialogReferalList(playerid);
				}
				else FirstOpenCMD[playerid] = false;
			}
		}
		// Донат меню
		case dDonatInfo:
		{
			if(!response) return 1;
			else return DialogDonatMenu(playerid);
		}
		case dDonatMenu:
		{
			if(!response) return 1;
			{
				new string[1024];
				string[0] = EOS;
				switch(listitem)
				{
					case 0: // Проверь баланс
				    {
				        string_f("{FFFFFF}Баланс вашего донат счета: "SERVER"%s R-Coins.", ConvertCash(PI[playerid][Donat]));
						SPD(playerid, dNull, d_info, "Баланс доната", string, "Закрыть", "");
						return 1;
				    }
				    case 1: // Перевод доната в вирты
				    {
				        string_f("{FFFFFF}Введите количество, которые хотите перевести в игровые деньги\n\
			        	Курс обмена: 1 R-Coins = %i.000 Виртуальным рублям\n\n\
						{FFFFFF}Состояние счёта:\t\t{FFFF00}%s {FFFFFF}R-Coins\n\n", SI[sX_Donat], ConvertCash(PI[playerid][Donat]));
					    SPD(playerid, dDonatConvert, d_input, ""SERVER"Перевод доната в вирты", string, "Принять", "<< Назад");
					}
					case 2: // Сменить имя (30. кр.)
					{
						if(PI[playerid][Donat] < 30) return SEM(playerid, "Недостаточно R-Coins!");
					    if(GetAdmin(playerid)) return SEM(playerid, "Администраторам нельзя менять ники!");
						SPD(playerid, dNull, 1, "Смена ника", "Введите желаемый ник в поле ниже:", "Сменить", "Отмена");
					}
					case 3: // Снять одно предупреждения (50. кр.)
					{
						if(!PI[playerid][Warn]) return SEM(playerid, "На Вашем аккаунте нет предупреждений");
						if(PI[playerid][Donat] < 50) return SEM(playerid, "Недостаточно R-Coins!");
						{
							PI[playerid][Donat] -= 50;
							if(PI[playerid][Warn] > 1) PI[playerid][Warn]--;
							else PI[playerid][Warn] = 0;
							update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);
							update_int_mysql(T_PLAYER, "Warn", PI[playerid][Warn], "ID", PI[playerid][ID]);
							SCM(playerid, cLIME, "Вы успешно сняли одно предупреждение!");
							DialogDonatMenu(playerid);
						}
					}
					case 4: // Снять розыск (35 кр.)
					{
						if(PI[playerid][Wanted] == 0) return SEM(playerid, "Вы не находитесь в розыске!");
						if(PI[playerid][Donat] < 35) return SEM(playerid, "Недостаточно R-Coins!");
						{
							PI[playerid][Donat] -= 35;
							PI[playerid][Wanted] = 0;
							update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);
							update_int_mysql(T_PLAYER, "Wanted", PI[playerid][Wanted], "ID", PI[playerid][ID]);
							SetPlayerWantedLevel(playerid, PI[playerid][Wanted]);
							SCM(playerid, cLIME, "Вы успешно сняли с себя розыск!");
							DialogDonatMenu(playerid);
						}
					}
					case 5: // Военный билет (100. кр.)
					{
						if(PI[playerid][Donat] < 100) return SEM(playerid, "Недостаточно R-Coins!");
						if(PI[playerid][Voenik] == 1) return SEM(playerid, "У Вас уже есть военный билет!");
						{
					        PI[playerid][Donat] -= 100;
					        PI[playerid][Voenik] = 1;
							update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);
							update_int_mysql(T_PLAYER, "Voenik", PI[playerid][Voenik], "ID", PI[playerid][ID]);
							SCM(playerid, cBLUE, "Вы приобрели: "SERVER"\"Военный билет\" за 100 R-Coins");
							DialogDonatMenu(playerid);
						}
					}
					case 6: // +1 EXP (10 кр.)
					{
						if(PI[playerid][Donat] < 10) return SEM(playerid, "Недостаточно R-Coins!");
						{
				        	PI[playerid][Donat] -= 10;
							GiveExp(playerid, 1);
							update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);
							update_int_mysql(T_PLAYER, "Exp", PI[playerid][Exp], "ID", PI[playerid][ID]);
							SCM(playerid, cGREEN, "Вы приобрели: "SERVER"\"1 EXP\" за 10 R-Coins");
							DialogDonatMenu(playerid);
						}
					}
					case 7: // +1 LvL (50 кр.)
					{
						if(PI[playerid][Donat] < 50) return SEM(playerid, "Недостаточно R-Coins!");
						{
					        PI[playerid][Donat] -= 50;
						    PI[playerid][Level] += 1;
						    SetPlayerScore(playerid, PI[playerid][Level]);
							update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);
							update_int_mysql(T_PLAYER, "Level", PI[playerid][Level], "ID", PI[playerid][ID]);
						    FSCM(playerid, cGREEN, "Вы купили %d Level за 50 R-Coins", PI[playerid][Level]);
							DialogDonatMenu(playerid);
						}
					}
					case 8: // Сменить название семьи
					{
					    /*if(!PI[playerid][Family]) return SEM(playerid, "Вы не состоите в семье!");
                        if(!GetString(FamI[PI[playerid][Family]][famCreater], GetName(playerid))) return SEM(playerid, "Сменять название семьи может только Лидер семьи!");
						if(PI[playerid][Donat] < 100) return SEM(playerid, "Недостаточно R-Coins!");
						{
						    SPD(playerid, dDonatSmenaNameFamily, d_input, ""SERVER"Смена названия семьи", "{FFFFFF}\n\
								Укажитеновое название для Вашей семьи.\n\
								Помните, название для семьи должно быть "SERVER"уникальным{FFFFFF}!\n\
								Название семьи не должно содержать "SERVER"цензуры{FFFFFF}.\n\
								Название семьи должно быть от "SERVER"4-х{FFFFFF} до "SERVER"12-ти{FFFFFF} символов.\n\n\
								Стоимость смены название для семьи: "SERVER"100 R-Coins",
							"Сменить", "<< Назад");
						}*/
					}
					case 9:
			        {
					    if(!response) return DialogDonatMenu(playerid);
						{
						    new stringer[1024];
						    strcat(stringer, "№. Кол-во дней\tСтоимость\n");
						    strcat(stringer, ""SERVER"1. {FFFFFF}VIP на 1 день\t"SERVER"15 R-Coins\n");
						    strcat(stringer, ""SERVER"2. {FFFFFF}VIP на 7 дней\t"SERVER"105 R-Coins\n");
						    strcat(stringer, ""SERVER"3. {FFFFFF}VIP на 14 дней\t"SERVER"210 R-Coins\n");
						    strcat(stringer, ""SERVER"4. {FFFFFF}VIP на 21 день\t"SERVER"315 R-Coins\n");
						    strcat(stringer, ""SERVER"5. {FFFFFF}VIP на 30 дней (1 мес)\t"SERVER"450 R-Coins\n");
						    strcat(stringer, ""SERVER"6. {FFFFFF}VIP на 60 дней (2 мес)\t"SERVER"900 R-Coins\n");
						    strcat(stringer, ""SERVER"7. {FFFFFF}VIP на 90 дней (3 мес)\t"SERVER"1.350 R-Coins\n");
						    strcat(stringer, ""SERVER"8. {FFFFFF}VIP на 120 дней (4 мес)\t"SERVER"1.800 R-Coins\n");
						    strcat(stringer, ""SERVER"9. {FFFFFF}VIP на 365 дней (12 мес)\t"SERVER"5.475 R-Coins\n");
							SPD(playerid, dDonatVip, d_tlisth, ""SERVER"Купить VIP Статус", stringer, "Купить", "<< Назад");
						}
					}
				}
			}
		}
		case dDonatConvert:
		{
			if(!response) return callcmd::donat(playerid);
			new cash = strval(inputtext);
		    if(strval(inputtext) < 1) return SCM(playerid, cGREY, "Неверное количество R-Coins!");
			if(PI[playerid][Donat] < strval(inputtext)) return SEM(playerid, "Недостаточно R-Coins!");
			{
				new summa = 1000;

				PI[playerid][Donat] -= cash;
				update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);

				if(SI[sX_Donat]) GiveMoney(playerid, cash*summa*SI[sX_Donat]);
				else GiveMoney(playerid, cash*summa);

				FSCM(playerid, cYELLOW, "Вы получили {FFFFFF}%s рублей{ffff00} за {FFFFFF}%s{ffff00} R-Coins", (SI[sX_Donat])?(ConvertCash(cash*summa*SI[sX_Donat])):(ConvertCash(cash*summa)), ConvertCash(cash));
				FSCM(playerid, cYELLOW, "Остаток: %s R-Coins", ConvertCash(PI[playerid][Donat]));
	 			PlayerPlaySound(playerid, 43001,0,0,0);
 			}
		}
		case dDonatVip:
		{
			if(!response) return callcmd::donat(playerid);
			{
				new VipPrice = 15, VipDay = 0;
				switch(listitem)
				{
					case 0: VipDay = 1; // 15 R-Coins
					case 1: VipDay = 7; // 105 R-Coins
					case 2: VipDay = 14; // 210 R-Coins
					case 3: VipDay = 21; // 315 R-Coins
					case 4: VipDay = 30; // 450 R-Coins
					case 5: VipDay = 60; // 900 R-Coins
					case 6: VipDay = 90; // 1.350 R-Coins
					case 7: VipDay = 120; // 1.800 R-Coins
					case 8: VipDay = 365; // 5.475 R-Coins
				}
				if(PI[playerid][Donat] < VipPrice*VipDay)
				{
				    VipDay = 0;
					return SEM(playerid, "У Вас недостаточно R-Coins!");
				}
				if(PI[playerid][Vip])
				{
					new string[124];
				    string_f("DELETE FROM "T_VIP" WHERE `Name` = '%s'", GetName(playerid));
					mysql_query(mysql, string);
				}
				PI[playerid][Donat] -= VipPrice*VipDay;

				new string[250];
				format(string,sizeof(string),"INSERT INTO "T_VIP" (`pvName`, `pvData`, `pvDataClose`) VALUES ('%s', NOW(), NOW() + INTERVAL %d DAY)", GetName(playerid), VipDay);
				mysql_query(mysql, string);

				if(PI[playerid][Vip])
				{
				    new stringVip[150];
				    format(stringVip, sizeof(stringVip), "SELECT * FROM "T_VIP" WHERE `pvName` = '%s' AND `pvDataClose` > NOW()", GetName(playerid));
				    mysql_tquery(mysql, stringVip, "LoadPlayerVip", "i", playerid);
				}

				if(!PI[playerid][Vip]) PI[playerid][Vip] = 1;
				FSCM(playerid, -1, "Вы успешно приобрели "SERVER"VIP{FFFFFF} статус на "SERVER"%i{FFFFFF} д.", VipDay);
			}
		}
		//
		// Трудовая книжка
		case dMyTK:
		{
            if(!response) return 1;
            {
                new stringer[512];
                stringer[0] = EOS;
				for(new i = 1; i < MAX_FRAC; i++) format(stringer, 512, "%s"SERVER"%i. {FFFFFF}%s\n", stringer, i, FracI[i][fName]);
				SPD(playerid, dMyTKlist, d_list, ""SERVER"Выберите организацию", stringer, "Выбрать", "<< Назад");
            }
		}
		case dMyTKlist:
		{
			if(!response) return callcmd::mytk(playerid);
			{
				SetPVarInt(playerid, "InfoFrac", listitem+1);
	 			new fractionid = GetPVarInt(playerid, "InfoFrac");
				switch(listitem+1)
				{
				    case 1..MAX_FRAC:
					{
					    new string[128];
						format(string, sizeof string, "SELECT * FROM "T_TRUDIVAI" WHERE `Name` = '%s' AND `Frac` = %d", GetName(playerid), fractionid);
						mysql_tquery(mysql, string, "CheckPlayerTK", "i", playerid);
					}
				}
			}
		}
		case dTkOff:
		{
			if(!response) return 1;
			{
				new stringer[512];
                stringer[0] = EOS;
				for(new i = 1; i < MAX_FRAC; i++) format(stringer, 512, "%s"SERVER"%i. {FFFFFF}%s\n", stringer, i, FracI[i][fName]);
				SPD(playerid, dMyTKlist, d_list, ""SERVER"Выберите организацию", stringer, "Выбрать", "<< Назад");
			}
		}
		//
		case dGiveLic:
		{
		    new i = GetPVarInt(playerid, "SetLic");
			if(!response) return DeletePVar(playerid, "SetLic");
			{
	            switch(listitem)
	            {
	                case 0: // Категория 'A'
	                {
	                    if(PI[i][Lic][0] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][0] = 1;
						// if(PI[i][Settings][2]) { FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'A'", GetName(playerid)); }
	                }
	                case 1: // Категория 'B'
	                {
	                    if(PI[i][Lic][1] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][1] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'B'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'B'", GetName(playerid));
					}
	                case 2: // Категория 'C'
	                {
	                    if(PI[i][Lic][2] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][2] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'C'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'C'", GetName(playerid));
					}
	                case 3: // Категория 'D'
	                {
	                    if(PI[i][Lic][3] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][3] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'D'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'D'", GetName(playerid));
					}
	                case 4: // Категория 'Водный'
	                {
	                    if(PI[i][Lic][4] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][4] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'Водный'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'Водный'", GetName(playerid));
					}
					case 5: // Категория 'Воздушный'
	                {
	                    if(PI[i][Lic][5] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][5] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'Воздушный'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'Воздушный'", GetName(playerid));
	                }
	                case 6: // Категория 'Оружие'
	                {
	                    if(PI[i][Lic][6] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][6] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'Оружие'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'Оружие'", GetName(playerid));
					}
	                case 7: // Категория 'Бизнес'
	                {
	                    if(PI[i][Lic][7] == 1) return SEM(playerid, "У игрока и так есть данная лицензия!");
						PI[i][Lic][7] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензию категории 'Бизнес'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензию категории 'Бизнес'", GetName(playerid));
	                }
	                case 8: // Категория 'Все'
	                {
	                    if(PI[i][Lic][0] && PI[i][Lic][1] && PI[i][Lic][2] && PI[i][Lic][3] && PI[i][Lic][4] && PI[i][Lic][5] && PI[i][Lic][6] && PI[i][Lic][7] == 1)
							return SEM(playerid, "У игрока и так есть все лицензии!");
						PI[i][Lic][0] = PI[i][Lic][1] = PI[i][Lic][2] = PI[i][Lic][3] = PI[i][Lic][4] = PI[i][Lic][5] = PI[i][Lic][6] = PI[i][Lic][7] = 1;
						FSCM(playerid, cSERVER, "Вы успешно выдали игроку %s [%d] лицензии всех категорий", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cSERVER, "Администратор %s выдал Вам лицензии всех катикорий", GetName(playerid));
	                }
	            }
	            new lic[54];
				format(lic, sizeof lic, "SELECT `Lic` = '%i,%i,%i,%i,%i,%i,%i,%i' FROM "T_PLAYER" WHERE `ID` = %d", PI[i][Lic][0], PI[i][Lic][1], PI[i][Lic][2], PI[i][Lic][3],
				PI[i][Lic][4], PI[i][Lic][5], PI[i][Lic][6], PI[i][Lic][7], PI[i][ID]);
				mysql_query(mysql, lic);
            }
            return DeletePVar(playerid, "SetLic");
		}
		case dTakeLic:
		{
			new i = GetPVarInt(playerid, "TakeLic");
			if(!response) return DeletePVar(playerid, "TakeLic");
			{
	            switch(listitem)
	            {
	                case 0: // Категория 'A'
	                {
	                    if(!PI[i][Lic][0]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][0] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'A'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'A'", GetName(playerid));
	                }
	                case 1: // Категория 'B'
	                {
	                    if(!PI[i][Lic][1]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][1] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'B'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'B'", GetName(playerid));
					}
	                case 2: // Категория 'C'
	                {
	                    if(!PI[i][Lic][2]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][2] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'C'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'C'", GetName(playerid));
	                }
	                case 3: // Категория 'D'
	                {
	                    if(!PI[i][Lic][3]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][3] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'D'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'D'", GetName(playerid));
	                }
	                case 4: // Категория 'Водный'
	                {
	                    if(!PI[i][Lic][4]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][4] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'Водный'", GetName(i), i);
						// if(PI[i][Settings][2]) if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'Водный'", GetName(playerid));
	                }
					case 5: // Категория 'Воздушный'
	                {
	                    if(!PI[i][Lic][5]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][5] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'Воздушный'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'Воздушный'", GetName(playerid));
	                }
	                case 6: // Категория 'Оружие'
	                {
	                    if(!PI[i][Lic][6]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][6] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'Оружие'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'Оружие'", GetName(playerid));
	                }
	                case 7: // Категория 'Бизнес'
	                {
	                    if(!PI[i][Lic][7]) return SEM(playerid, "У игрока и так нет данной лицензии!");
						PI[i][Lic][7] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензию категории 'Бизнес'", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензию категории 'Бизнес'", GetName(playerid));
	                }
	                case 8: // Категория 'Все'
	                {
	                    if(!PI[i][Lic][0] && !PI[i][Lic][1] && !PI[i][Lic][2] && !PI[i][Lic][3] && !PI[i][Lic][4] && !PI[i][Lic][5] && !PI[i][Lic][6] && !PI[i][Lic][7])
							return SEM(playerid, "У игрока и так нет всех лицензий!");
						PI[i][Lic][0] = PI[i][Lic][1] = PI[i][Lic][2] = PI[i][Lic][3] = PI[i][Lic][4] = PI[i][Lic][5] = PI[i][Lic][6] = PI[i][Lic][7] = 0;
						FSCM(playerid, cRED, "Вы успешно забрали у игрока %s [%d] лицензии всех категорий", GetName(i), i);
						// if(PI[i][Settings][2]) FSCM(i, cRED, "Администратор %s забрал у Вас лицензии всех категорий", GetName(playerid));
	                }
	            }
	            new lic[24];
				format(lic, sizeof lic, "SELECT `Lic` = '%i,%i,%i,%i,%i,%i,%i,%i' FROM "T_PLAYER" WHERE `ID` = %d", PI[i][Lic][0], PI[i][Lic][1], PI[i][Lic][2], PI[i][Lic][3],
				PI[i][Lic][4], PI[i][Lic][5], PI[i][Lic][6], PI[i][Lic][7], PI[i][ID]);
				mysql_query(mysql, lic);
			}
            return DeletePVar(playerid, "TakeLic");
		}
		// GPS
		case dGPS:
		{
			if(!response) return 1;
			{
				new string[1024], str[512], Float: pos[3], GpsPos[11];
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

				strcat(string, "№. Пункт назначения\tРасстояние\n");
				switch(listitem)
				{
				    case 0: // Общественные места
				    {
					    GpsPos[0] = DistancePointToPoint(pos[0], pos[1], pos[2], 1842.6074, 1434.6095, 9.8477);
	                    GpsPos[1] = DistancePointToPoint(pos[0], pos[1], pos[2], 183.8753, 1496.6787, 12.3120);
				    	GpsPos[2] = DistancePointToPoint(pos[0], pos[1], pos[2], 2436.5420, -1903.8353, 22.0043);

					    format(str, sizeof(str), ""SERVER"1. {FFFFFF}Автовокзал д. Роговичи\t"SERVER"%s м.\n", ConvertCash(GpsPos[0])); strcat(string, str);
					    format(str, sizeof(str), ""SERVER"2. {FFFFFF}Автошкола г. Арзамас\t"SERVER"%s м.\n", ConvertCash(GpsPos[1])); strcat(string, str);
				    	format(str, sizeof(str), ""SERVER"3. {FFFFFF}Паспортный стол\t"SERVER"%s м.\n", ConvertCash(GpsPos[2])); strcat(string, str);
						SPD(playerid, dGPS1, d_tlisth, "{FFFFFF}GPS-Навигатор |"SERVER" Общественные места", string, "Выбрать", "<< Назад");
					}
					case 1: // Подработки
					{
					    GpsPos[0] = DistancePointToPoint(pos[0], pos[1], pos[2], 1796.7456, 2291.8760, 15.7065);
	                    GpsPos[1] = DistancePointToPoint(pos[0], pos[1], pos[2], 2354.9417, -261.3372, 2.7895);

					    format(str, sizeof(str), ""SERVER"1. {FFFFFF}Шахта пгт. Батырево\t"SERVER"%s м.\n", ConvertCash(GpsPos[0])); strcat(string, str);
					    format(str, sizeof(str), ""SERVER"2. {FFFFFF}Грузчик д. Гарель\t"SERVER"%s м.\n", ConvertCash(GpsPos[1])); strcat(string, str);
						SPD(playerid, dGPS2, d_tlisth, "{FFFFFF}GPS-Навигатор |"SERVER" Подработки", string, "Выбрать", "<< Назад");
					}
					case 2: // Организации
					{
						for(new i = 1; i <= TOTALFRAC; i ++)
						{
						    GpsPos[i-1] = DistancePointToPoint(pos[0], pos[1], pos[2], FracI[i][fPosExit][0], FracI[i][fPosExit][1], FracI[i][fPosExit][2]);
							format(str, sizeof(str), ""SERVER"%i. {FFFFFF}%s\t"SERVER"%s м.\n", i, FracI[i][fName], ConvertCash(GpsPos[i-1])); strcat(string, str);
						}
						SPD(playerid, dGPSFrac, d_tlisth, "{FFFFFF}GPS-Навигатор |"SERVER" Органицазции", string, "Выбрать", "<< Назад");
					}
				}
			}
		}
		case dGPS1: // Основные места
		{
			if(!response) return callcmd::gps(playerid);
	     	new locname[32], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
			    case 0: X = 1842.6074, Y = 1434.6095, Z = 9.8477, locname = "Автовокзал д. Роговичи";
			    case 1: X = 183.8753, Y = 1496.6787, Z = 12.3120, locname = "Автошкола г. Арзамас";
		   	 	case 2: X = 2436.5420, Y = -1903.8353, Z = 22.0043, locname = "Паспортный стол"; // Паспортный стол
			}
			SetPlayerGPS(playerid, X,Y,Z, locname);
		}
		case dGPS2:
		{
			if(!response) return callcmd::gps(playerid);
	     	new locname[32], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
			    case 0: X = 1796.7456, Y = 2291.8760, Z = 15.7065, locname = "Шахта пгт. Батырево";
			    case 1: X = 2354.9417, Y = -261.3372, Z = 2.7895, locname = "Грузчики д. Гарель";
			}
			SetPlayerGPS(playerid, X,Y,Z, locname);
		}
		case dGPSFrac:
		{
			if(!response) return callcmd::gps(playerid);
			{
				switch(listitem)
				{
				    case 0: SetPlayerGPS(playerid, FracI[FRAC_AO][fPosExit][0], FracI[FRAC_AO][fPosExit][1], FracI[FRAC_AO][fPosExit][2], FracI[FRAC_AO][fName]);
				    case 1: SetPlayerGPS(playerid, FracI[FRAC_PPS][fPosExit][0], FracI[FRAC_PPS][fPosExit][1], FracI[FRAC_PPS][fPosExit][2], FracI[FRAC_PPS][fName]);
				    case 2: SetPlayerGPS(playerid, FracI[FRAC_DPS][fPosExit][0], FracI[FRAC_DPS][fPosExit][1], FracI[FRAC_DPS][fPosExit][2], FracI[FRAC_DPS][fName]);
				    case 3: SetPlayerGPS(playerid, FracI[FRAC_FSB][fPosExit][0], FracI[FRAC_FSB][fPosExit][1], FracI[FRAC_FSB][fPosExit][2], FracI[FRAC_FSB][fName]);
				    case 4: SetPlayerGPS(playerid, FracI[FRAC_VH][fPosExit][0], FracI[FRAC_VH][fPosExit][1], FracI[FRAC_VH][fPosExit][2], FracI[FRAC_VH][fName]);
				    case 5: SetPlayerGPS(playerid, FracI[FRAC_SMP][fPosExit][0], FracI[FRAC_SMP][fPosExit][1], FracI[FRAC_SMP][fPosExit][2], FracI[FRAC_SMP][fName]);
				    case 6: SetPlayerGPS(playerid, FracI[FRAC_SMI][fPosExit][0], FracI[FRAC_SMI][fPosExit][1], FracI[FRAC_SMI][fPosExit][2], FracI[FRAC_SMI][fName]);
				    case 7: SetPlayerGPS(playerid, FracI[FRAC_OPGB][fPosExit][0], FracI[FRAC_OPGB][fPosExit][1], FracI[FRAC_OPGB][fPosExit][2], FracI[FRAC_OPGB][fName]);
				    case 8: SetPlayerGPS(playerid, FracI[FRAC_OPGY][fPosExit][0], FracI[FRAC_OPGY][fPosExit][1], FracI[FRAC_OPGY][fPosExit][2], FracI[FRAC_OPGY][fName]);
				    case 9: SetPlayerGPS(playerid, FracI[FRAC_MAFIAH][fPosExit][0], FracI[FRAC_MAFIAH][fPosExit][1], FracI[FRAC_MAFIAH][fPosExit][2], FracI[FRAC_MAFIAH][fName]);
				    case 10: SetPlayerGPS(playerid, FracI[FRAC_MAFIAR][fPosExit][0], FracI[FRAC_MAFIAR][fPosExit][1], FracI[FRAC_MAFIAR][fPosExit][2], FracI[FRAC_MAFIAR][fName]);
				}
			}
		}
 		//
		case dSettingATM:
		{
			if(!response) return 1;
			{
				SetPVarInt(playerid, "aSetATM_ID", ATMInfo[listitem+1][aID]);

				new string[64], stringer[512];
				string_f(""WHITE"Настройки банкомата: "SERVER"№ %i", ATMInfo[listitem+1][aID]);
				// strcat(stringer, ""GREEN"Информация о банкомате\n");
				strcat(stringer, ""SERVER"1. "WHITE"Переместить к себе\n");
				strcat(stringer, ""SERVER"2. "WHITE"Телепортироваться к банкомату\n");
				strcat(stringer, ""SERVER"3. "WHITE"Пополнить банкомат\n");
				strcat(stringer, ""SERVER"4. "WHITE"Сменить владельца банкомата\n");
				strcat(stringer, ""SERVER"5. "WHITE"Отметить банкомат на карте\n");
				strcat(stringer, " \n");
				strcat(stringer, ""RED"Удалить банкомат");
				SPD(playerid, dSettingATM_Menu, d_list, string, stringer, "Закрыть", "");
			}
		}
		case dSettingATM_Menu:
		{
			if(!response) return callcmd::setatm(playerid);
			{
				new atmID = GetPVarInt(playerid, "aSetATM_ID");
				switch(listitem)
				{
					case 0: // Переместить к себе
					{
						return callcmd::setatm(playerid);
					}
					case 1: // Телепортироваться к банкомату
					{
						return callcmd::setatm(playerid);
					}
					case 2: // Пополнить банкомат
					{
						return callcmd::setatm(playerid);
					}
					case 3: // Сменить владельца банкомата
					{
						return callcmd::setatm(playerid);
					}
					case 4: // Отметить банкомат на карте
					{
						new stringATM[124];
						format(stringATM,sizeof(stringATM), "Банкомат: ID: %i", atmID);
						SetPlayerGPS(playerid, ATMInfo[atmID][aPos][0], ATMInfo[atmID][aPos][1], ATMInfo[atmID][aPos][2], stringATM);
					}
					case 5:
					{
						new string[64], stringer[512];
						string_f(""WHITE"Настройки банкомата: "SERVER"№ %i", atmID);
						// strcat(stringer, ""GREEN"Информация о банкомате\n");
						strcat(stringer, ""SERVER"1. "WHITE"Переместить к себе\n");
						strcat(stringer, ""SERVER"2. "WHITE"Телепортироваться к банкомату\n");
						strcat(stringer, ""SERVER"3. "WHITE"Пополнить банкомат\n");
						strcat(stringer, ""SERVER"4. "WHITE"Сменить владельца банкомата\n");
						strcat(stringer, ""SERVER"5. "WHITE"Отметить банкомат на карте\n");
						strcat(stringer, " \n");
						strcat(stringer, ""RED"Удалить банкомат");
						return SPD(playerid, dSettingATM_Menu, d_list, string, stringer, "Закрыть", "");
					}
					case 6: // Удалить банкомат
					{
						TOTALATM--;
						DestroyDynamic3DTextLabel(ATMText[atmID]);
						DestroyDynamicObject(ATMObject[atmID]);
						DestroyDynamicMapIcon(ATMIcon[atmID]);

						new stringATM[124];
						format(stringATM,sizeof(stringATM), "DELETE FROM "T_ATM" WHERE `aID` = %i", atmID);
						mysql_query(mysql, stringATM);

						stringATM[0] = EOS;
						format(stringATM,sizeof(stringATM), "%s [ %i ] удалил(-а) банкомат [ ID: %i ] с сервера!", AdminName(playerid), AI[playerid][aNumber], atmID);
						SCMAdmin(cYELLOW, stringATM);

						SCMInfo(playerid, "Банкомат успешно удален!");
						return DeletePVar(playerid, "aSetATM_ID");
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetAdmin(playerid))
	{
		if(GetAdmin(playerid) >= 6 && AdminLogin[playerid])
		{
			if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			{
				SetPlayerGPS(playerid, fX, fY, fZ, "Точка назначения!");
			}
			if(fX != 0.0 && fY != 0.0 && fZ != 0.0)
			{
				MapPos[playerid][0] = fX;
				MapPos[playerid][1] = fY;
				MapPos[playerid][2] = fZ+2.0;

				StatusMapTP[playerid] = true;
				// SCMInfo(playerid, "Для телепортации по карте нажмите клавишу ''N''.");
			}
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	// Система радара
    if(GetPVarInt(playerid, "CreateRadar") != 0)
	{
		if(!playerobject)
		{
			if(!IsValidObject(objectid)) return 1;
			MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
		}
		if(response == EDIT_RESPONSE_FINAL)
		{
			TOTALRADAR++;
			switch(GetPVarInt(playerid, "TypeRadar"))
			{
				case 0: RI[TOTALRADAR][r_type] = 1, RI[TOTALRADAR][r_speed] = 20;
				case 1: RI[TOTALRADAR][r_type] = 2, RI[TOTALRADAR][r_speed] = 60;
				case 2: RI[TOTALRADAR][r_type] = 3, RI[TOTALRADAR][r_speed] = 90;
				case 3: RI[TOTALRADAR][r_type] = 4, RI[TOTALRADAR][r_speed] = 110;
			}
			RI[TOTALRADAR][r_id] = TOTALRADAR;
			SetString(RI[TOTALRADAR][r_name], GetName(playerid));
			RI[TOTALRADAR][r_money] = 500;

			RI[TOTALRADAR][r_x] = fX; RI[TOTALRADAR][r_y] = fY; RI[TOTALRADAR][r_z] = fZ; RI[TOTALRADAR][r_a] = fRotZ;
			DestroyObject(GetPVarInt(playerid, "RadarObject"));
			RI[TOTALRADAR][r_object] = CreateObject(18880, RI[TOTALRADAR][r_x], RI[TOTALRADAR][r_y], RI[TOTALRADAR][r_z], fRotX, fRotY, fRotZ);
			RI[TOTALRADAR][r_area] = CreateDynamicSphere(RI[TOTALRADAR][r_x], RI[TOTALRADAR][r_y], RI[TOTALRADAR][r_z], 30.0);
			DeletePVar(playerid, "CreateRadar");
			DeletePVar(playerid, "TypeRadar");
			DeletePVar(playerid, "RadarObject");
			CancelEdit(playerid);
			FSCM(playerid, cBLUE, "Радар %d успешно создан.", TOTALRADAR);

			new stringMysql[1024];
			format(stringMysql,sizeof(stringMysql),"INSERT INTO "T_RADAR" (r_id, r_name, r_type, r_speed, r_x, r_y, r_z, r_a, r_money) VALUES (%i, '%s', %i, %i, '%f', '%f', '%f', '%f', %i)",
			TOTALRADAR, GetName(playerid), RI[TOTALRADAR][r_type], RI[TOTALRADAR][r_speed], RI[TOTALRADAR][r_x], RI[TOTALRADAR][r_y], RI[TOTALRADAR][r_z], RI[TOTALRADAR][r_a], EI[eiRadarPay]);
			mysql_query(mysql, stringMysql);

			new string[1024];
			string_f("\
				{FFFFFF}Радар {3399FF}№%d{FFFFFF}\n\n\
				{FFFFFF}Максимальная скорость: {3399FF}%d{FFFFFF} КМ/Ч\n\
				{FFFFFF}Стоимость штрафа: {3399FF}%s рублей",
			TOTALRADAR, RI[TOTALRADAR][r_speed], ConvertCash(EI[eiRadarPay]));

			RI[TOTALRADAR][r_label] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, RI[TOTALRADAR][r_x], RI[TOTALRADAR][r_y], RI[TOTALRADAR][r_z]+4.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "CreateRadar");
			DeletePVar(playerid, "TypeRadar");
			SendClientMessage(playerid, cRED, "Вы отменили установку радара");
			DestroyObject(GetPVarInt(playerid, "RadarObject"));
			CancelEdit(playerid);
			DeletePVar(playerid, "RadarObject");
		}
	}
    //

	// Система Мусорок
	if(GetPVarInt(playerid, "CreateMusorka") != 0)
	{
		if(!playerobject)
		{
			if(!IsValidObject(objectid)) return 1;
			MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
		}
		if(response == EDIT_RESPONSE_FINAL)
		{
			DestroyObject(GetPVarInt(playerid, "MusorkaObject"));
			DeletePVar(playerid, "CreateMusorka");
			DeletePVar(playerid, "MusorkaObject");
			CancelEdit(playerid);

			TOTALMUSORKI++;

			new stringMysql[124];
			format(stringMysql,sizeof(stringMysql),"INSERT INTO "T_MUSORKI" (`mID`, `mPosX`, `mPosY`, `mPosZ`, `mPosA`) VALUES (%i, %.1f, %.1f, %.1f, %.1f)", TOTALMUSORKI, fX, fY, fZ, fRotZ);
			mysql_query(mysql, stringMysql);

			MI[TOTALMUSORKI][mID] = TOTALMUSORKI;
			MI[TOTALMUSORKI][mPos][0] = fX;
			MI[TOTALMUSORKI][mPos][1] = fY;
			MI[TOTALMUSORKI][mPos][2] = fZ;
			MI[TOTALMUSORKI][mPos][3] = fRotZ;
			MI[TOTALMUSORKI][mType] = MI[TOTALMUSORKI][mStatus] = 0;

			MI[TOTALMUSORKI][mObject] = CreateDynamicObject(1345, MI[TOTALMUSORKI][mPos][0], MI[TOTALMUSORKI][mPos][1], MI[TOTALMUSORKI][mPos][2], 0.0, 0.0, MI[TOTALMUSORKI][mPos][3], 0, 0, 0, 300.0, 300.0);

			new stringMusorka[80];
			format(stringMusorka, sizeof(stringMusorka), "Мусорный бак: "SERVER"№ %i\n\n"GREY"Нажмите: [ ALT ]", MI[TOTALMUSORKI][mID]);
			MI[TOTALMUSORKI][mInfo] = Create3DTextLabel(stringMusorka, cWHITE, MI[TOTALMUSORKI][mPos][0], MI[TOTALMUSORKI][mPos][1], MI[TOTALMUSORKI][mPos][2]+2, 5.0, 0, 1);
			FSCM(playerid, cGREEN, "Мусорка %d успешно установлена.", MI[TOTALMUSORKI][mID]);
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SendClientMessage(playerid, cRED, "Вы отменили установку мусорки");
			DestroyObject(GetPVarInt(playerid, "MusorkaObject"));
			DeletePVar(playerid, "CreateMusorka");
			DeletePVar(playerid, "MusorkaObject");
			CancelEdit(playerid);
		}
	}
	//

	// Система ATM - Банкомата
	if(GetPVarInt(playerid, "CreateATM") > 0)
    {
        if(!playerobject)
        {
            if(!IsValidObject(objectid)) return 1;
            MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
        }
        if(response == EDIT_RESPONSE_FINAL)
        {
            TOTALATM++;

            new stringer[512];
            stringer_f("INSERT INTO "T_ATM" (aID, aPosX, aPosY, aPosZ, aPosA) VALUES (%d, %.1f, %.1f, %.1f, %.1f)", TOTALATM, fX, fY, fZ, fRotZ);
            mysql_query(mysql, stringer);

            DestroyObject(GetPVarInt(playerid, "AtmObject"));
            DeletePVar(playerid, "CreateATM");
			DeletePVar(playerid, "AtmObject");
            CancelEdit(playerid);

			new string[124];
			string_f("SELECT * FROM "T_ATM" WHERE `aID` = %i", TOTALATM);
			mysql_tquery(mysql, string, "LoadATM_ID", "i", playerid);
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DeletePVar(playerid, "CreateATM");
			DeletePVar(playerid, "AtmObject");
            SendClientMessage(playerid, cRED, "Установка банкомата отменена");
            DestroyObject(objectid);
            CancelEdit(playerid);
        }
        return 1;
        //
    }
	//

	// Система билбордов
	if(GetPVarInt(playerid, "CreateBilBord") > 0)
    {
        if(!playerobject)
        {
            if(!IsValidObject(objectid)) return 1;
            MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
        }
        if(response == EDIT_RESPONSE_FINAL)
        {
            TOTALBILBORD++;

            new stringer[512];
            stringer_f("INSERT INTO "T_BILBORD" (bID, bPosX, bPosY, bPosZ, bPosA) VALUES (%d, %.1f, %.1f, %.1f, %.1f)", TOTALBILBORD, fX, fY, fZ, fRotZ);
            mysql_query(mysql, stringer);

            DestroyObject(GetPVarInt(playerid, "BilBordObject"));
            DeletePVar(playerid, "CreateBilBord");
			DeletePVar(playerid, "BilBordObject");
            CancelEdit(playerid);

			new string[124];
			string_f("SELECT * FROM "T_BILBORD" WHERE `bID` = %i", TOTALBILBORD);
			mysql_tquery(mysql, string, "LoadBilBord_ID", "i", playerid);
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DeletePVar(playerid, "CreateBilBord");
			DeletePVar(playerid, "BilBordObject");
            SendClientMessage(playerid, cRED, "Установка рекламного щита отменена");
            DestroyObject(objectid);
            CancelEdit(playerid);
        }
        return 1;

    }
	//
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart) //  publics
{
	if(!IsPlayerConnected(issuerid) || !PlayerLogin[issuerid]) return 1;
	{
	    if(issuerid == INVALID_PLAYER_ID) return 1;
	    {
			// Сделать проверку на вкл/выкл колокольчика!
	        PlayerPlaySound(issuerid, 17802, 0, 0, 0);

	        new hp[12];
	        format(hp, 50, "- %.1f хп", amount);
			SetPlayerChatBubble(playerid, hp, 0xFF0000FF, 25.0, 5000);

		    new string[64];
		    switch(weaponid)
		    {
	      		case 3:
		        {
		            if(!GetPVarInt(issuerid, "TazerGun") || FracMVD(playerid)) return 1;
					if(IsPlayerInAnyVehicle(playerid)) return SEM(issuerid, "Человек в машине!");
					if(GetPVarInt(playerid, "Tazer") > 0) return SEM(issuerid, "Игрок уже оглушен!");
					{
						FSCM(playerid, cBLUE, "%s обездвижил%s Вас дубинкой на 15 секунд", GetName(issuerid), (PI[issuerid][Sex]==1)?(""):("а"));
						FSCM(issuerid, cBLUE, "Вы обездвижили дубинкой %s на 15 секунд", GetName(playerid));
						string_f( "обездвижил%s %s электрошокером", (PI[issuerid][Sex]==1)?(""):("а"), GetName(playerid));
						MeAction(issuerid, string);
						PlayerPlaySound(issuerid, 17802, 0,0,0);
						TazerTime[playerid] = 15;
						ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 1, 1, 0, 1);
						SetPVarInt(playerid, "Tazer", 1);
					}
		        }
	      		case 23:
		        {
		            if(!GetPVarInt(issuerid, "TazerGun") || FracMVD(playerid)) return 1;
					if(IsPlayerInAnyVehicle(playerid)) return SEM(issuerid, "Человек в машине!");
					if(GetPVarInt(playerid, "Tazer") > 0) return SEM(issuerid, "Игрок уже оглушен!");
					{
						FSCM(playerid, cBLUE, "%s обездвижил%s Вас электрошокером на 15 секунд", GetName(issuerid), (PI[issuerid][Sex]==1)?(""):("а"));
						FSCM(issuerid, cBLUE, "Вы обездвижили электрошокером %s на 15 секунд", GetName(playerid));
						string_f( "обездвижил%s %s электрошокером", (PI[issuerid][Sex]==1)?(""):("а"), GetName(playerid));
						MeAction(issuerid, string);
						GetPlayerHealth(playerid, PI[playerid][Health]);
						PI[playerid][Health] = PI[playerid][Health];
						PlayerPlaySound(issuerid, 17802, 0,0,0);
						TazerTime[playerid] = 15;
						ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 1, 1, 0, 1);
						SetPVarInt(playerid, "Tazer", 1);
					}
		        }
			}

			// Зеленная зона
			if(GetPVarInt(issuerid, "player_in_green_zone"))
			{
				new string_green[254];
				new gz_id = GetPVarInt(issuerid, "player_in_green_zone")-1;

				format(string_green, sizeof string_green, "\n\n"\
					"{FFFFFF}Вы находитесь в зеленой зоне '{6a89cc}%s{FFFFFF}',\n"\
					"в этом месте запрещено {e77f67}наносить урон.\n\n"\
					"{FFFFFF}Продолжить игру можно будет через {78e08f}5 {FFFFFF}секунд."\
					"\n\n", GreenZone[gz_id][GZ_NAME]);
				SPD(issuerid, dNull, d_info, "{3ae374}Подсказка", string_green, "Закрыть", "");

				FreezePlayer(issuerid, 5000);

				new stringer[124];
				stringer_f("%s [%d] попытался нанести урон %s [%d] в зеленой зоне %s", GetName(issuerid), issuerid, GetName(playerid), playerid, GreenZone[gz_id][GZ_NAME]);
				SCMAdmin(0xFF5533FF, stringer);
			}
			//
		}
	}
	return 1;
}
/*
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	return 1;
}*/

public OnPlayerClickTextDraw(playerid, Text:clickedid) // TextDraw глобальный
{
    if(_:clickedid == INVALID_TEXT_DRAW)
    {
		// Выбор оружия
		if(GetAdmin(playerid) && GetPVarInt(playerid, "SelectGuns") != 0)
		{
			for(i, 46) PlayerTextDrawHide(playerid, Select_Guns_PTD[playerid][i]);
			CancelSelectTextDraw(playerid);

			DeletePVar(playerid, "SelectGuns");
			DeletePVar(playerid, "SelectGunsAmmo");
			DeletePVar(playerid, "SelectGunsPlayer");
		}
		//

		// Покупка транпорта
		if(SelectCarKlass[playerid] != 0 || KlassCarID[playerid] != 0)
		{
			DestroyVehicle(SelectCarID[playerid]);
			TogglePlayerControllable(playerid, false);

			for(new i; i < 21; i++) PlayerTextDrawHide(playerid, BuyCars_PTD[playerid][i]);
			CancelSelectTextDraw(playerid);

			SetPlayerPos(playerid, 2641.6748, -1912.1439, 2328.1499); // 
			SetPlayerFacingAngle(playerid, 0.0);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			FreezePlayer(playerid, 4500);

			SelectCarKlass[playerid] = KlassCarID[playerid] = 0;
		}

	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid) // TextDraw для игрока
{
	if(playertextid == SelectCar_Veh_PTD[playerid][4]) // Стрелка < влево
	{
		AdminCarTD[playerid] --;
		if(AdminCarTD[playerid] < 400) AdminCarTD[playerid] = 611;

		new vehicleID[5]; //
		format(vehicleID, sizeof vehicleID, "%i", AdminCarTD[playerid]);

		PlayerTextDrawSetPreviewModel(playerid, SelectCar_Veh_PTD[playerid][2], AdminCarTD[playerid]);
		PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][2]);

		PlayerTextDrawSetString(playerid, SelectCar_Veh_PTD[playerid][6], vehicleID);
		PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][6]);

		PlayerTextDrawSetString(playerid, SelectCar_Veh_PTD[playerid][7], VehStats[AdminCarTD[playerid]-400][vName]);
		PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][7]);
	}
	if(playertextid == SelectCar_Veh_PTD[playerid][5]) // Стрелка > вправо
	{
		AdminCarTD[playerid] ++;
		if(AdminCarTD[playerid] > 611) AdminCarTD[playerid] = 400;

		new vehicleID[5]; //
		format(vehicleID, sizeof vehicleID, "%i", AdminCarTD[playerid]);

		PlayerTextDrawSetPreviewModel(playerid, SelectCar_Veh_PTD[playerid][2], AdminCarTD[playerid]);
		PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][2]);

		PlayerTextDrawSetString(playerid, SelectCar_Veh_PTD[playerid][6], vehicleID);
		PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][6]);

		PlayerTextDrawSetString(playerid, SelectCar_Veh_PTD[playerid][7], VehStats[AdminCarTD[playerid]-400][vName]);
		PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][7]);
	}
	if(playertextid == SelectCar_Veh_PTD[playerid][8]) // Выбрать
	{
		new string[156], Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X,Y,Z);
		X += 2.0;
		GetPlayerFacingAngle(playerid, A);
		PCar[TotalAdminVehicles] = J_AddStaticVehicleEx(AdminCarTD[playerid], X, Y, Z, A, GetPVarInt(playerid, "SelectCar_Color2"), GetPVarInt(playerid, "SelectCar_Color2"), 1200);
		SetVehicleVirtualWorld(PCar[TotalAdminVehicles], GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(PCar[TotalAdminVehicles], GetPlayerInterior(playerid));
		VehicleInfo[PCar[TotalAdminVehicles]][vFuel] = 100.0;
		// if(carid != 590) PutPlayerInVehicle(playerid, PCar[carid], 0);
		SetVehicleParamsEx(PCar[TotalAdminVehicles], false, false, false, false, false, false, false);
		SetVehicleNumberPlate(PCar[TotalAdminVehicles], ""SERVER"ADMINS");
		SetEngine(PCar[TotalAdminVehicles], false); SetLights(PCar[TotalAdminVehicles], false);
		Iter_Add(adm_vehicles, PCar[TotalAdminVehicles]);
		TotalAdminVehicles++;
		string[0] = EOS;
		string_f("[A] %s создал транспорт ID: %d | К-во уже созданых: %d", GetName(playerid), AdminCarTD[playerid], TotalAdminVehicles);
		SCMAdmin(cGREEN, string);
		SCMInfo(playerid, "Используйте команду "SERVER"/carcolor{FFFFFF} чтобы задать цвет транспорту!");
		DeletePVar(playerid, "SelectCar_Color1");
		DeletePVar(playerid, "SelectCar_Color2");

		for(new i; i < 10; i++) PlayerTextDrawHide(playerid, SelectCar_Veh_PTD[playerid][i]);
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == SelectCar_Veh_PTD[playerid][9]) // Отмена
	{
		DeletePVar(playerid, "SelectCar_Color1");
		DeletePVar(playerid, "SelectCar_Color2");
		for(new i; i < 10; i++) PlayerTextDrawHide(playerid, SelectCar_Veh_PTD[playerid][i]);
		CancelSelectTextDraw(playerid);
	}
	// Система слежения за игроком
	if(playertextid == SpecInfo_PTD[playerid][5]) // <
	{
	    new string[5];
		for(new plid = SP[playerid][SpecID] - 2; plid >= 0; plid --)
	    {
			if(IsPlayerConnected(plid) && !PlayerLogin[plid] || plid == playerid) continue;
        	string_f("%d", plid);
		}
		callcmd::spec(playerid, string);
	}
	if(playertextid == SpecInfo_PTD[playerid][6]) // >
	{
	    new string[5];
		for(new plid = SP[playerid][SpecID]; plid < MAX_PLAYERS; plid ++)
	    {
			if(IsPlayerConnected(plid) && !PlayerLogin[plid] || plid == playerid) continue;
        	string_f("%d", plid);
		}
		callcmd::spec(playerid, string);
	}
	if(playertextid == SpecInfo_PTD[playerid][7]) return StopSpec(playerid);

	// Выбор оружия
	if(GetAdmin(playerid) && GetPVarInt(playerid, "SelectGuns") != 0)
	{
		new ammo = GetPVarInt(playerid, "SelectGunsAmmo"), to_player = GetPVarInt(playerid, "SelectGunsPlayer");
		for(new i=0; i <= 43; i++)
		{
			if(playertextid == Select_Guns_PTD[playerid][i])
			{
				switch(i)
				{
					case 1..18: GivePlayerWeapon(to_player, i, ammo);
					case 19..43: GivePlayerWeapon(to_player, i+3, ammo);
				}

				for(t, 46) PlayerTextDrawHide(playerid, Select_Guns_PTD[playerid][t]);
				CancelSelectTextDraw(playerid);

				DeletePVar(playerid, "SelectGuns");
				DeletePVar(playerid, "SelectGunsPlayer");
				DeletePVar(playerid, "SelectGunsAmmo");
				return 1;
			}
		}
	}

	// Система Автосалона
	// BuyCars_PTD[playerid][13] // Название ТС
	// BuyCars_PTD[playerid][14] // Стоимость ТС

	if(playertextid == BuyCars_PTD[playerid][11]) // < - Выбор машины
	{
		new string[32], stringer[32];

		DestroyVehicle(SelectCarID[playerid]);
		KlassCarID[playerid]--;
		if(SelectCarKlass[playerid] == 1)
		{
			if(KlassCarID[playerid] < 0) KlassCarID[playerid] = 0;
			SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarA[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
			stringer_f("%s", VehStats[BuyCarA[KlassCarID[playerid]][0]-400][vName]);
			string_f("%s рублей", ConvertCash(BuyCarA[KlassCarID[playerid]][1]));
		}
		if(SelectCarKlass[playerid] == 2)
		{
			if(KlassCarID[playerid] < 0) KlassCarID[playerid] = 0;
			SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarB[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
			stringer_f("%s", VehStats[BuyCarB[KlassCarID[playerid]][0]-400][vName]);
			string_f("%s рублей", ConvertCash(BuyCarB[KlassCarID[playerid]][1]));
		}
		if(SelectCarKlass[playerid] == 3)
		{
			if(KlassCarID[playerid] < 0) KlassCarID[playerid] = 0;
			SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarC[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
			stringer_f("%s", VehStats[BuyCarC[KlassCarID[playerid]][0]-400][vName]);
			string_f("%s рублей", ConvertCash(BuyCarC[KlassCarID[playerid]][1]));
		}
		PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][13], stringer);
		PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][14], string);
	}
	if(playertextid == BuyCars_PTD[playerid][12]) // > - Выбор машины
	{
		new string[32], stringer[32];

		DestroyVehicle(SelectCarID[playerid]);
		KlassCarID[playerid]++;
		if(SelectCarKlass[playerid] == 1)
		{
			if(KlassCarID[playerid] > MAX_CARS_AUTOSALON_1) KlassCarID[playerid] = MAX_CARS_AUTOSALON_1-1;
			SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarA[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
			stringer_f("%s", VehStats[BuyCarA[KlassCarID[playerid]][0]-400][vName]);
			string_f("%s рублей", ConvertCash(BuyCarA[KlassCarID[playerid]][1]));
		}
		if(SelectCarKlass[playerid] == 2)
		{
			if(KlassCarID[playerid] > MAX_CARS_AUTOSALON_2) KlassCarID[playerid] = MAX_CARS_AUTOSALON_2-1;
			SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarB[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
			stringer_f("%s", VehStats[BuyCarB[KlassCarID[playerid]][0]-400][vName]);
			string_f("%s рублей", ConvertCash(BuyCarB[KlassCarID[playerid]][1]));
		}
		if(SelectCarKlass[playerid] == 3)
		{
			if(KlassCarID[playerid] > MAX_CARS_AUTOSALON_3) KlassCarID[playerid] = MAX_CARS_AUTOSALON_3-1;
			SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarC[KlassCarID[playerid]][0], 2641.1819, -1920.5211, 2325.2656, -52.6200, 1, 1, -1, 100000, 0, 1, playerid+3);
			stringer_f("%s", VehStats[BuyCarC[KlassCarID[playerid]][0]-400][vName]);
			string_f("%s рублей", ConvertCash(BuyCarC[KlassCarID[playerid]][1]));
		}
		PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][13], stringer);
		PlayerTextDrawSetString(playerid, BuyCars_PTD[playerid][14], string);
	}
	if(playertextid == BuyCars_PTD[playerid][15]) // < - Выбор цвета 1
	{
		SetCarColor[KlassCarID[playerid]][0] --;
		if(SetCarColor[KlassCarID[playerid]][0] < 0) SetCarColor[KlassCarID[playerid]][0] = 255;
		ChangeVehicleColor(SelectCarID[playerid], SetCarColor[KlassCarID[playerid]][0], SetCarColor[KlassCarID[playerid]][1]);
	}
	if(playertextid == BuyCars_PTD[playerid][17]) // Выбор цвета 1
	{
		SPD(playerid, dNull, d_input, "Выберети цвет транспорта №1", "Укажите желаемый цвет для транспорта от 0 до 255.", "Выбрать", "Закрыть");
	}
	if(playertextid == BuyCars_PTD[playerid][16]) // > - Выбор цвета 1
	{
		SetCarColor[KlassCarID[playerid]][0] ++;
		if(SetCarColor[KlassCarID[playerid]][0] > 255) SetCarColor[KlassCarID[playerid]][0] = 0;
		ChangeVehicleColor(SelectCarID[playerid], SetCarColor[KlassCarID[playerid]][0], SetCarColor[KlassCarID[playerid]][1]);
	}
	if(playertextid == BuyCars_PTD[playerid][18]) // < - Выбор цвета 2
	{
		SetCarColor[KlassCarID[playerid]][1] --;
		if(SetCarColor[KlassCarID[playerid]][1] < 0) SetCarColor[KlassCarID[playerid]][1] = 255;
		ChangeVehicleColor(SelectCarID[playerid], SetCarColor[KlassCarID[playerid]][0], SetCarColor[KlassCarID[playerid]][1]);
	}
	if(playertextid == BuyCars_PTD[playerid][20]) // Выбор цвета 2
	{
		SPD(playerid, dNull, d_input, "Выберети цвет транспорта №2", "Укажите желаемый цвет для транспорта от 0 до 255.", "Выбрать", "Закрыть");
	}
	if(playertextid == BuyCars_PTD[playerid][19]) // > - Выбор цвета 2
	{
		SetCarColor[KlassCarID[playerid]][1] ++;
		if(SetCarColor[KlassCarID[playerid]][1] > 255) SetCarColor[KlassCarID[playerid]][1] = 0;
		ChangeVehicleColor(SelectCarID[playerid], SetCarColor[KlassCarID[playerid]][0], SetCarColor[KlassCarID[playerid]][1]);
	}
	if(playertextid == BuyCars_PTD[playerid][8]) // Купить
	{
		new BuyCarPay;
		switch(SelectCarKlass[playerid])
		{
			case 0: BuyCarPay = BuyCarA[KlassCarID[playerid]][1];
			case 1: BuyCarPay = BuyCarB[KlassCarID[playerid]][1];
			case 2: BuyCarPay = BuyCarC[KlassCarID[playerid]][1];
		}
		if(!PI[playerid][Lic][1]) return SEM(playerid, "Для покупки трансопрта Вам нужны права!");
		if(GetMoney(playerid) < BuyCarPay) return SEM(playerid, "У Вас недостаточно средств!");
		{

		}
	}
	if(playertextid == BuyCars_PTD[playerid][9]) // Тест-драйв
	{
		DestroyVehicle(SelectCarID[playerid]);
		for(new i; i < 21; i++) PlayerTextDrawHide(playerid, BuyCars_PTD[playerid][i]);
		CancelSelectTextDraw(playerid);

		if(SelectCarKlass[playerid] == 1) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarA[KlassCarID[playerid]][0], 2467.5420, -2662.6814, 25.1134, 0.0, 1, 1, -1, 100000, 0, 0, playerid+3);
		if(SelectCarKlass[playerid] == 2) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarB[KlassCarID[playerid]][0], 2467.5420, -2662.6814, 25.1134, 0.0, 1, 1, -1, 100000, 0, 0, playerid+3);
		if(SelectCarKlass[playerid] == 3) SelectCarID[playerid] = J_AddStaticVehicleEx(BuyCarC[KlassCarID[playerid]][0], 2467.5420, -2662.6814, 25.1134, 0.0, 1, 1, -1, 100000, 0, 0, playerid+3);
		
		SetPlayerPos(playerid, 2467.5420, -2662.6814, 25.1134);
		SetPlayerInterior(playerid, 0);
		SetPlayerFacingAngle(playerid, 0.0);
		PutPlayerInVehicle(playerid, SelectCarID[playerid], 0);

		SetPVarInt(playerid, "StatusTestDrive", 1);
		SCMInfo(playerid, "Вы успешно начали Тест-драйв транспорта!");
		SCMInfo(playerid, "Для завершения Тест-драйва, покиньте транспорт (F)!");
		FreezePlayer(playerid, 2000);
	}
	if(playertextid == BuyCars_PTD[playerid][10]) // Отмена
	{
		DestroyVehicle(SelectCarID[playerid]);
		TogglePlayerControllable(playerid, false);

		for(new i; i < 21; i++) PlayerTextDrawHide(playerid, BuyCars_PTD[playerid][i]);
		CancelSelectTextDraw(playerid);

		SetPlayerPos(playerid, 2641.6748, -1912.1439, 2328.1499); // 
		SetPlayerFacingAngle(playerid, 0.0);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);
		SetCameraBehindPlayer(playerid);
		FreezePlayer(playerid, 4500);
	}
	//
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	// Зеленная зона
	if(GreenZone[0][GZ_AREA] <= areaid <= GreenZone[sizeof GreenZone - 1][GZ_AREA])
	{
		new gz_id = areaid - GreenZone[0][GZ_AREA];
		SetPVarInt(playerid, "player_in_green_zone", gz_id+1);
		PlayerTextDrawShow(playerid, GreenZone_PTD[playerid]); // Показать TD с Зеленной зоной

		if(areaid == gz_id && !GreenZone[gz_id][GZ_ALLOW_PARK]) //
		{
		    if(IsPlayerInAnyVehicle(playerid)) PlayerTextDrawShow(playerid, ParkZone_PTD[playerid]);
		    else PlayerTextDrawHide(playerid, ParkZone_PTD[playerid]);
		}
	}
	//

    // Радар
	for(new r = 1; r <= TOTALRADAR; r++)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		if(areaid == RI[r][r_area])
		{
		    if(VehicleSpeed(vehicleid) > RI[r][r_speed] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    new string[5];
			    string_f("%i", RI[r][r_speed]);
				PlayerTextDrawSetString(playerid, Radar_PTD[playerid][1], string);
				for(i, 2) PlayerTextDrawShow(playerid, Radar_PTD[playerid][i]);
			}
		}
	}
	//
	// Работа Лесоповал
	for(d,sizeof(DPI))
	{
		if(areaid == DerevoArea[d])
		{
			if(!JobLesorub[playerid]) return 1;
			if(!LesorubInstrument[playerid]) return SEM(playerid, "Вы не можете работать без инструмента! Возьмите инструмен на складе.");
			{
				if(DerevoStatus[d]) return 1;
				{
					// Анимация рубить дерево
					ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 1.0, 1, 0, 0, 0, 20000, 0);
					DerevoTime[d] = SetTimerEx("UpdateDerevo", 20*1000, false, "ii", playerid, d);
				}
			}
		}
	}
	//
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	// Зеленная зона
	if(GreenZone[0][GZ_AREA] <= areaid <= GreenZone[sizeof GreenZone-1][GZ_AREA])
	{
		SetPVarInt(playerid, "player_in_green_zone", 0);
		PlayerTextDrawHide(playerid, GreenZone_PTD[playerid]); // Скрыть TD с Зеленной зоной
		PlayerTextDrawHide(playerid, ParkZone_PTD[playerid]);
	}
	//

	// Радар
	for(new r = 1; r <= TOTALRADAR; r++)
	{
		if(!IsPlayerConnected(playerid)) return 1;
		if(areaid == RI[r][r_area])
		{
			if(radar_time[playerid] > gettime()) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			new carid = GetVehicleModel(vehicleid);

			if(!IsAVelik(carid) && !IsAPlane(carid)&& !IsAVoda(carid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PutPlayerInVehicle(playerid, vehicleid, 0))
			{
				new string[512];
				if(VehicleSpeed(vehicleid) > RI[r][r_speed])
				{
					if(!FracMVD(playerid)/*&& !GetAdmin(playerid)*/)
					{
						radar_time[playerid] = gettime() + 15;
						PI[playerid][ShtrafDPS]++;

						SCM(playerid, -1, "");
						SCM(playerid, cRED, "[РАДАР]: Вас сфотографировал радар ДПС. Причина: Превышение скорости");
						FSCM(playerid, cRED, "[РАДАР]: Максимально-допустимая скорость на данном участке: %d км/ч, зафиксированная за Вами: %d км/ч.", RI[r][r_speed], VehicleSpeed(vehicleid));
						FSCM(playerid, cRED, "[РАДАР]: Сумма штрафа составила: %s рублей. Штраф оплатите в отделе полиции ДПС, у Вас %d штраф(ов)", ConvertCash(EI[eiRadarPay]*VehicleSpeed(vehicleid)/10), PI[playerid][ShtrafDPS] /*(VehicleSpeed(playerid)/2 - RI[r][r_speed])*/);
						SCM(playerid, -1, "");
						SCM(playerid, cGREEN, "[ Информация ] {FFFFFF}Список штрафов Вы можете посмотреть: "SERVER"/tickets");

	                    PlayerPlaySound(playerid, 1132,0.0,0.0,0.0);

	                    string_f("INSERT INTO "T_TICKETS" \
						(`tName`, `tReason`, `tPrice`, `tData`, `tPutName`, `tID`)VALUES\
						('%s', 'Привышение скорости на %d км/ч (Допустимая скорость: %d км/ч)', '%d рублей', NOW(), 'Радар №%d', '2')",
						GetName(playerid), VehicleSpeed(vehicleid), RI[r][r_speed], EI[eiRadarPay]*VehicleSpeed(vehicleid)/10, RI[r][r_id]);
						mysql_query(mysql, string);

	                    if(PI[playerid][ShtrafDPS] >= 30)
	                    {
	                        FSCM(playerid, cRED, "У Вас отобрали водительское удостоверение, так как у Вас %d из 30 штрафов.", PI[playerid][ShtrafDPS]);
	                        PI[playerid][ShtrafDPS] = PI[playerid][Lic][1] = 0;
	                        return ExitCar(playerid);
	                    }
					}
				}
		    	for(i, 2) PlayerTextDrawHide(playerid, Radar_PTD[playerid][i]);
			}
  		}
	}
	//
	// Работа Лесоповал
	for(d,sizeof(DPI))
	{
		if(areaid == DerevoArea[d])
		{
			if(!JobLesorub[playerid]) return 1;
			{
				if(DerevoStatus[d])
				{
					Derevo[d] = CreateDynamicObject(832, DPI[d][Derevo_posX], DPI[d][Derevo_posY], DPI[d][Derevo_posZ], DPI[d][Derevo_RposX], DPI[d][Derevo_RposY], DPI[d][Derevo_RposZ], 0, 0, -1, 300.0, 300.0);
					DerevoTime[d] = SetTimerEx("UpdateDerevoPeni", 120*1000, false, "i", d);
				}
			}
		}
	}
	//
	return 1;
}

CMD:load(playerid)
{
	if(!JobMineDrive[playerid]) return SEM(playerid, CMDOff);
	{
		if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1763.9707, 2309.8157, 14.7705)) return SEM(playerid, "Загрузить транспорт можно только у склада Шахты!");
		{
			new carid = GetPlayerVehicleID(playerid);
			if(StatusLoadMineDrive[PlayerRent[playerid]]) return SEM(playerid, "Данный транспорт уже на загрузке!");

			new Float:POS[3];
			GetCarBagajnik(carid, POS[0], POS[1], POS[2]);
			StatusLoadMineDrive[PlayerRent[playerid]] = true;
			picLoadCarMine = CreateDynamicPic(1318, 23, POS[0], POS[1], POS[2], 0);
		}
	}
	return 1;
}

CMD:unload(playerid)
{
	if(!JobMineDrive[playerid]) return SEM(playerid, CMDOff);
	if(!StatusLoadMineDrive[PlayerRent[playerid]]) return SEM(playerid, "Данный транспорт не загружаеться!");
	{
		if(MineralsDrive[PlayerRent[playerid]]==0) DestroyDynamic3DTextLabel(CarLoadMine[PlayerRent[playerid]]);
		StatusLoadMineDrive[PlayerRent[playerid]] = false;
		// eiDriveMineralsPay
		new i = SahtaDrivePosCH[playerid];
		SetPlayerRaceCheckpoint(playerid, 0, ScahtaDriveCP[i][0], ScahtaDriveCP[i][1], ScahtaDriveCP[i][2], ScahtaDriveCP[i][3], ScahtaDriveCP[i][4], ScahtaDriveCP[i][5], 3.0);
		SCMInfo(playerid, "Отвезите загруженную руду на завод!");
		DestroyDynamicPickup(picLoadCarMine);
	}
	return 1;
}

CMD:bagajnik(playerid)
{
	new Float:POS[3];
	for(new v=0; v<MAX_VEHICLES; v++)
	{
		if(IsAPlane(v) || IsAVelik(v) || IsAVoda(v)) continue;
		GetCarBagajnik(v, POS[0], POS[1], POS[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, POS[0], POS[1], POS[2])) return SEM(playerid, "Рядом с Вами нет транспорта");
		{
			FSCM(playerid, -1, "Вы находитесь у багажника транспорта - ID: %i", v);
			if(!bonnet) return SEM(playerid, "Багажника закрыт!");
		}
	}
	return 1;
}

/*stock GetCarPos(playerid, &Float:x, &Float:y, &Float:z)
{
	for(new v; v < MAX_VEHICLES; v ++)
	{
		new model = GetVehicleModel(v);
		GetVehiclePos(v, x, y, z);

		if(!IsPlayerInRangeOfPoint(playerid, 2.0, x,y,z)) continue;
		if(!model) break;
		FSCM(playerid, cSERVER, "Рядом с вами машина: ID: %i | Model: %d", v, model);
	}
	return 1;
}*/

CMD:getcarpos(playerid, params[])
{
	extract params -> new Float: DiastantCar; else return SEM(playerid, "Введите: /getcarpos [ Радиус ]");
	if(!DiastantCar) return SEM(playerid, "Введите: /getcarpos [ Радиус ]");
	{
		for(new v; v < MAX_VEHICLES; v ++)
		{
			new Float:x, Float:y, Float:z;
			new model = GetVehicleModel(v);
			GetVehiclePos(v, x, y, z);

			if(!IsPlayerInRangeOfPoint(playerid, DiastantCar, x,y,z)) continue;
			if(!model) break;
			
			SetVehicleToRespawn(v);
			// FSCM(playerid, cSERVER, "В радиусе %.1f от Вас машина: ID: %i | Model: %d", DiastantCar, v, model);
		}
	}
	return 1;
}

// CEF
publics OnCefBrowserCreated(player_id, browser_id, status_code)
{
	// FSCM(player_id, -1, "public OnCefBrowserCreated(player_id(%i), browser_id(%i), status_code(%i))", player_id, browser_id, status_code);
    if(status_code != 200)
    {
        SEM(player_id, "У вас проблемы с интернетом возможные, могут быть сбои.");
        return;
    }
    return;
}

publics OnCefInitialize(player_id, success)
{
    // FSCM(player_id, -1, "public OnCefInitialize(player_id(%i), success(%i))", player_id, success);
    if (success == 1)
	{
		// file:///cef/assets/hud1/index.html = Обращение в сборку
		// https://redwich-rp.ru/redwich_cef/new_hud/index.html = Обращение на хостинг

		// cef_create_browser(player_id, 0, "file:///cef/assets/sahud/index.html", false, false);
		// cef_create_browser(player_id, 0, "file:///cef/assets/hud1/index.html", false, false);
		// cef_create_browser(player_id, 0, "https://redwich-rp.ru/redwich_cef/new_hud/index.html", false, false);
        return;
    }
}

/* ============================== [ Конец пабликов ] ======================== */


// ============================== [ Стоки диалоги ] ========================= //

stock ServerTehRaboti(playerid)
{
	new string[254];
	string_f("{FFFFFF}\
        Добро пожаловать на проект "SERVER"%s{FFFFFF}!\n\n\
        На данный момент сервер "RED"закрыт{FFFFFF} на технические работы!\n\
		Для входа на сервер укажите пароль который Вы получили от своего "SERVER"Куратора{FFFFFF} или "SERVER"Старшего администратора{FFFFFF},\n\
		если Вы не получали пароль или Вы не "SERVER"администратор{FFFFFF}, то сервер для Вас "RED"недоступен{FFFFFF}.\n\n\
		Введите пароль от сервера в поле ниже:", SI[sName]);
	SPD(playerid, dServerPass, d_input, ""SERVER"Сервер закрыт", string, "Войти", "Отмена");
	return 1;
}

stock DialogPlayerRegister(playerid) // Регистрация игрока
{
	new string[1024];
	string_f("{FFFFFF}Добро пожаловать "SERVER"%s{FFFFFF} на сервер %s{FFFFFF}!\n\
	Ваш аккаунт еще не зарегистрирован на сервере.\n\n\
	Чтобы зарегистрироваться на сервере,\n\
	придумайте сложный пароль и введите его в полне ниже:\n\n\
	Обратите внимание:\n\
		\t- Пароль чувствителен к регистру символов\n\
		\t- Пароль должен состоять от 6-ти до 32-ух символов\n\
		\t- Установите пароль максимальной сложности и запомните его!",
	GetName(playerid), SI[sName]);
	SPD(playerid, dRegPlayer, d_input, "{FFFFFF}Регистрация | Создания пароля", string, "Далее >>", "Отмена");
	return 1;
}

stock DialogPlayerRegisterEmail(playerid)
{
	new string[1024];
	string_f("{FFFFFF}Добро пожаловать "SERVER"%s{FFFFFF} на сервер "SERVER"%s{FFFFFF}!\n\
	Ваш аккаунт еще не зарегистрирован на сервере.\n\n\
	Чтобы зарегистрироваться на сервере,\n\
	Вам необходимо указать адресс электронной почты.\n\n\
	Обратите внимание:\n\
		\t- Почта должна быть уникальной\n\
		\t- Почта должна содержать следующие символы ('@', '.ru', '.com')\n\n\
	",
	GetName(playerid), SI[sName]);
	SPD(playerid, dRegPlayerEmail, d_input, "{FFFFFF}Регистрация | Создания почты", string, "Далее >>", "Отмена");
	return true;
}

stock DialogPlayerRegisterReferal(playerid)
{
	new string[1024];
	string_f("{FFFFFF}Добро пожаловать "SERVER"%s{FFFFFF} на сервер %s{FFFFFF}!\n\
	Ваш аккаунт еще не зарегистрирован на сервере.\n\n\
	Чтобы зарегистрироваться на сервере,\n\
	Вам необходимо указать Имя игрока который приглосил Вас на сервер.\n\n\
	Обратите внимание:\n\
		"GREEN"При достижении Вами 8-го урованя, Вам и Вашему другу будет выдано по 300.000 рублей игровой валюты!",
	GetName(playerid), SI[sName]);
	SPD(playerid, dRegPlayerReferal, d_input, "{FFFFFF}Регистрация | Реферал", string, "Далее >>", "Пропустить");
	return true;
}

stock DialogPlayerRegisterSex(playerid) return SPD(playerid, dRegPlayerSex, d_list, "{FFFFFF}Регистрация | Пол", "1. Мужской\n2. Женский", "Выбрать", "<< Назад");

stock DialogCreatePlayer(playerid)
{
	new regIP[16];
    GetPlayerIp(playerid, regIP, sizeof(regIP));
    SetString(AcI[playerid][acRegIP], regIP);
    SetString(AcI[playerid][acLastIP], regIP);
    AcI[playerid][acCheckEmail] = 1;

	new mysqlCreate[512];
	format(mysqlCreate, sizeof(mysqlCreate), "\
		INSERT INTO "T_ACC_S" (`acLogin`, `acPassword`, `acServer`, `acEmail`, `acCheckEmail`, `acReferal`, `acRegIP`, `acRegData`, `acLastIP`, `acLastData`) VALUES \
		('%s', md5('%s'),  %i, '%s', %i, '%s', '%s', NOW(), '%s', NOW())",
	GetName(playerid), AcI[playerid][acPassword], SI[sNumber], AcI[playerid][acEmail], AcI[playerid][acCheckEmail], AcI[playerid][acReferal], AcI[playerid][acRegIP], AcI[playerid][acLastIP]);
	mysql_query(mysql, mysqlCreate);

	FSCM(playerid, cWHITE, "Ваш игровой аккаунт "SERVER"%s"WHITE" успешно зарегистрирован!", GetName(playerid));

	PI[playerid][Level] = SI[sBonusLevel];
	PI[playerid][Money] = SI[sBonusMoney];
	PI[playerid][Donat] = SI[sBonusDonat];
	PI[playerid][Health] = 100.0;

	new ipText[16];
	if(AI[playerid][aSetting][8]) ipText = ""GREY"Скрыт";
	else format(ipText, 16, "%s", AcI[playerid][acRegIP]);

	new stringer[512];
	format(stringer, sizeof(stringer), "Приветствуем нового игрока сервера: "SERVER"%s{FFFFFF}(ID: %i) "GREY"[IP: %s]", GetName(playerid), playerid, ipText);
	SCMAdmin(cWHITE, stringer);

	new string[512];
	format(string,sizeof(string), "INSERT INTO "T_PLAYER" (`Name`, `Sex`, `Spawn`, `Skin`, `Level`, `Money`, `Donat`, `Health`) VALUES ('%s', %i, %i, %i, %i, %i, %i, %f)",
	GetName(playerid), PI[playerid][Sex], PI[playerid][Spawn], PI[playerid][Skin], PI[playerid][Level], PI[playerid][Money], PI[playerid][Donat], PI[playerid][Health]);
	mysql_tquery(mysql, string);

	new strJobLevel[512];
	format(strJobLevel, sizeof(strJobLevel), "INSERT INTO "T_JOB_SKILL" (`jName`, `jLevel`) VALUES ('%s', '1,1,1,1,1,1,1,1,1,1')", GetName(playerid));
	mysql_query(mysql, strJobLevel);

	new strOnline[512];
	format(strOnline, sizeof(strOnline), "INSERT INTO `server_online` (`oName`) VALUES ('%s')", GetName(playerid));
	mysql_query(mysql, strOnline);

	new stringMysql[100];
	format(stringMysql, sizeof(stringMysql),"SELECT * FROM "T_ACC_S" WHERE `acLogin` = '%s'", GetName(playerid));
	mysql_tquery(mysql, stringMysql, "LoadAccPlayer", "i", playerid);
	return 1;
}

stock DialogPlayerLogin(playerid) // Авторизация игрока
{
	SetPVarInt(playerid, "timer_login", 120);
	for(i, 4) PlayerTextDrawShow(playerid, LoginTime_PTD[playerid][i]);

	new string[256];
	string_f("{FFFFFF}\
		Добро пожаловать на "SERVER"%s{FFFFFF}\n\n\
		Введите свой пароль\n\
		Попыток для ввода: "GREEN"%i", SI[sName], PasswordError[playerid]);
	SPD(playerid, dPlayerLogin, d_pass, ""WHITE"Авторизация", string, "Ввести", "Отмена");
	return 1;
}

stock DialogPlayerSpawn(playerid)
{
    new stringer[256];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"1.{ffffff} Вокзал\n");
	strcat(stringer, ""SERVER"2.{ffffff} Дом\n");
	strcat(stringer, ""SERVER"3.{ffffff} Организация\n");
	strcat(stringer, ""SERVER"4.{ffffff} Где вышел\n");
	SPD(playerid, dPlayerSpawn, d_list, ""SERVER"Выбор спавна!", stringer, "Выбор", "");
	return 1;
}

stock DialogPlayerMenu(playerid)
{
    new stringer[1024];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"1.{ffffff} Информация о персонаже\n");
	strcat(stringer, ""SERVER"2.{ffffff} Команды сервера\n");
	strcat(stringer, ""SERVER"3.{ffffff} Настройки\n");
	strcat(stringer, ""SERVER"4.{417419} Связь с администрацией\n");
	strcat(stringer, ""SERVER"5.{ffffff} Список рефералов\n");
	strcat(stringer, ""SERVER"6.{ffffff} Использовать промокод\n");
	strcat(stringer, ""SERVER"7.{ffffff} Донат");
	SPD(playerid, dMenuServer, d_list, ""SERVER"Меню игрока", stringer, "Выбрать", "Закрыть");
	return 1;
}

stock ShowPlayerMenu(playerid)
{
    new stringer[1024];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {ffffff}Статистика персонажа\n");
	strcat(stringer, ""SERVER"2. {ffffff}Навыки владения оружием\n");
	strcat(stringer, ""SERVER"3. {ffffff}Навыки работ\n");
	strcat(stringer, ""SERVER"4. {ffffff}Трудовая книжка\n");
	strcat(stringer, ""SERVER"5. "GREEN"Улучшения персонажа\n");
	strcat(stringer, ""SERVER"6. {ffffff}Сменить место появления\n");
	strcat(stringer, ""RED"7. История наказаний\n");
	strcat(stringer, ""SERVER"Настройки игры");
    SPD(playerid, dMenuStats, d_list, ""SERVER"Информация о персонаже", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock ShowPlayerUpdate(playerid)
{
	new stringer[1024], str[128];
    stringer[0] = EOS;
	format(str, sizeof(str), ""SERVER"1.{ffffff} Рюкзак - "SERVER"20.000 рублей{ffffff}: %s\n", (PI[playerid][Update][0])?("{63BD4E}Приобретено"):("{F04245}Не приобретено")); strcat(stringer, str);
	format(str, sizeof(str), ""SERVER"2.{ffffff} Скрытность - "SERVER"50.000 рублей{ffffff}: %s\n", (PI[playerid][Update][1])?("{63BD4E}Приобретено"):("{F04245}Не приобретено")); strcat(stringer, str);
	format(str, sizeof(str), ""SERVER"3.{ffffff} Решительность - "SERVER"70.000 рублей{ffffff}: %s\n", (PI[playerid][Update][2])?("{63BD4E}Приобретено"):("{F04245}Не приобретено")); strcat(stringer, str);
	format(str, sizeof(str), ""SERVER"4.{ffffff} Мастер маскировки - "SERVER"100.000 рублей{ffffff}: %s\n", (PI[playerid][Update][3])?("{63BD4E}Приобретено"):("{F04245}Не приобретено")); strcat(stringer, str);
	strcat(stringer, ""SERVER"Информация по улучшениям");
	SPD(playerid, dUpdates, d_list, ""SERVER"Улучшения персонажа", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogPlayerStats(playerid, targetid)
{
	new
		stringer[2048], str[1024],phone[20];

	if(!PI[targetid][SimCard]) phone = "Отсутствует";
	else format(phone, sizeof(phone), "%i", PI[targetid][SimCard]);

 	stringer[0] = EOS;
	strcat(stringer, "{FFFFFF}");
 	if(GetAdmin(playerid))
	{
		strcat(stringer, "\t\t[ "SERVER"OOC{FFFFFF} Информация ]\n\n");
	    if(GetAdmin(targetid))
	    {
			format(str,sizeof(str),"Статус администратора:\t"SERVER"%d - (%s){FFFFFF}\n\n", GetAdmin(targetid), Admin_Name[GetAdmin(targetid)-1]); strcat(stringer,str);
		}
		format(str,sizeof(str),"IP регистрации:\t\t"SERVER"%s{FFFFFF}\n", AcI[targetid][acRegIP]); strcat(stringer,str);
		format(str,sizeof(str),"Дата регистрации:\t\t"SERVER"%s{FFFFFF}\n", AcI[targetid][acRegData]); strcat(stringer,str);
		format(str,sizeof(str),"IP входа:\t\t\t"SERVER"%s{FFFFFF}\n", AcI[targetid][acLastIP]); strcat(stringer,str);
		format(str,sizeof(str),"Последний вход в игру:\t"SERVER"%s{FFFFFF}\n", AcI[targetid][acLastData]); strcat(stringer,str);
		format(str,sizeof(str),"На донат счету:\t\t"SERVER"%s Redvicov{FFFFFF}\n", ConvertCash(PI[targetid][Donat])); strcat(stringer,str);
		if(!GetString(AcI[playerid][acVkID], "NULL"))
		{
			format(str,sizeof(str), "Ваш ВКонтакте:\t\t"BLUE"%s{FFFFFF}\n\n", AcI[targetid][acVkID]); strcat(stringer,str);
		}
		format(str,sizeof(str),"Время в игра за час:\t\t"SERVER"%s{FFFFFF}\n", ConvertTime(PI[targetid][GameTime])); strcat(stringer,str);
		format(str,sizeof(str),"Время в игре за день:\t\t"SERVER"%s{FFFFFF}\n", ConvertTime(AcI[targetid][acTimeGameServer])); strcat(stringer,str);
		strcat(stringer,"_____________________________________________\n\n");
	}
	strcat(stringer, "\t\t[ "SERVER"IC{FFFFFF} Информация ]\n\n");
	format(str,sizeof(str),"Игровой ник:\t\t\t"GREEN"%s{FFFFFF}\n", GetName(targetid)); strcat(stringer,str);
	format(str,sizeof(str),"Пол:\t\t\t\t"SERVER"%s{FFFFFF}\n", (PI[targetid][Sex]==1)?("Мужской"):("Женский")); strcat(stringer,str);
	format(str,sizeof(str),"Возраст:\t\t\t"SERVER"%d лет/год(-a){FFFFFF}\n", PI[targetid][Age]); strcat(stringer,str);
	format(str,sizeof(str),"Уровень:\t\t\t"SERVER"%d - (%d | %d){FFFFFF}\n", PI[targetid][Level], PI[targetid][Exp], (PI[targetid][Level]+1)*4); strcat(stringer,str);
	format(str,sizeof(str),"Деньги:\t\t\t"SERVER"%s рублей{FFFFFF}\n", ConvertCash(GetMoney(targetid))); strcat(stringer,str);
	format(str,sizeof(str),"Деньги в банке:\t\t"SERVER"%s рублей{FFFFFF}\n\n", ConvertCash(PI[targetid][Bank])); strcat(stringer,str);
	// format(str,sizeof(str),"Валюта для казино:\t\t"SERVER"%s фиш.{FFFFFF}\n\n", ConvertCash(PI[targetid][Dibs])); strcat(stringer,str);
	if(PI[targetid][Phone] && PI[targetid][SimCard])
	{
		format(str,sizeof(str),"Номер телефона:\t\t"SERVER"%s{FFFFFF}\n", phone); strcat(stringer,str);
		format(str,sizeof(str),"Баланс телефона:\t\t"SERVER"%s рублей{FFFFFF}\n", ConvertCash(PI[targetid][PhoneMoney])); strcat(stringer,str);
	}
	format(str,sizeof(str),"Законность:\t\t\t"SERVER"%d{FFFFFF}\n", PI[targetid][Zakon]); strcat(stringer,str);
	format(str,sizeof(str),"Преступнность:\t\t"SERVER"%d{FFFFFF}\n", PI[targetid][Wanted]); strcat(stringer,str);
	format(str,sizeof(str),"Предупреждения:\t\t"SERVER"%d | 3{FFFFFF}\n", PI[targetid][Warn]); strcat(stringer,str);
	format(str,sizeof(str),"Военный билет:\t\t"SERVER"%s{FFFFFF}\n", (!PI[targetid][Voenik])?("Нет"):("Есть")); strcat(stringer,str);
	format(str,sizeof(str),"Работа:\t\t\t"SERVER"%s{FFFFFF}\n\n", Job_Name[PI[targetid][Job]]); strcat(stringer,str);
	if(GetFrac(targetid))
	{
		format(str,sizeof(str),"Организация:\t\t\t"SERVER"%s{FFFFFF}\n", FracI[GetFrac(targetid)][fName]); strcat(stringer,str);
		format(str,sizeof(str),"Должность:\t\t\t"SERVER"%s (%i){FFFFFF}\n", GetRangName[GetFrac(targetid)][PI[targetid][FracRang]-1], PI[targetid][FracRang]); strcat(stringer,str);
		format(str,sizeof(str),"Выговор:\t\t\t"SERVER"%d | 3{FFFFFF}\n\n", PI[targetid][FracWarn]); strcat(stringer,str);
	}
	if(PI[playerid][Family])
	{
		format(str,sizeof(str),"Семья:\t\t\t\t"SERVER"%s [№ %i]{FFFFFF}\n", FamI[PI[playerid][Family]][famName], PI[playerid][Family]); strcat(stringer,str);
	}
	SPD(playerid, dPlayerStats, d_info, ""SERVER"Ститистика персонажа", stringer, "Закрыть", "");
    PlayerPlaySound(playerid, 1137,0,0,0);
    return 1;
}

// Команды сервера
stock DialogCommandServer(playerid)
{
    new stringer[256];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {FFFFFF}Основные\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}Общение\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Организации\n");
	strcat(stringer, ""SERVER"4. {FFFFFF}Работы\n");
	strcat(stringer, ""SERVER"5. {FFFFFF}Семья\n");
	strcat(stringer, ""SERVER"6. {FFFFFF}Транспорт\n");
	strcat(stringer, ""SERVER"7. {FFFFFF}Транспортная компания");
	SPD(playerid, dCommandServer, d_list, "{FFFFFF}Игровое меню персонажа | "SERVER"Команды сервера", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogCommandOsnovnoe(playerid)
{
    new stringer[1024];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"/menu{FFFFFF} - Меню игрока\n");
	strcat(stringer, ""SERVER"/stats{FFFFFF} - Статистика игрока\n");
	strcat(stringer, ""SERVER"/settings{FFFFFF} - Персональные настройки игрока\n");
	strcat(stringer, ""SERVER"/donat{FFFFFF} - Дополнительные возможности\n");
	strcat(stringer, ""SERVER"/skill{FFFFFF} - Посмотреть свои навоки оружия\n");
	strcat(stringer, ""SERVER"/leaders{FFFFFF} - Посмотреть лидеров и заместителей организаций онлайн\n");
	strcat(stringer, ""SERVER"/admins{FFFFFF} - Посмотреть администраторов в сети, для владельцев с "SERVER"VIP{FFFFFF} стутусом\n");
	strcat(stringer, ""SERVER"/viphelp{FFFFFF} - Помощь для VIP игроков, для владельцев с "SERVER"VIP{FFFFFF} стутусом\n");
	strcat(stringer, ""SERVER"/lic{FFFFFF} - Посмотреть свои лицензии\n");
	strcat(stringer, ""SERVER"/int{FFFFFF} - В каком интерьеры ноходишься\n");
	strcat(stringer, ""SERVER"/world{FFFFFF} - В каком виртуальном мире ноходишься\n");
	strcat(stringer, ""SERVER"/unrent{FFFFFF} - Отменить аренду транспорта\n");
	strcat(stringer, ""SERVER"/en(gine){FFFFFF} - Завести транспорт\n");
	strcat(stringer, ""SERVER"/fare{FFFFFF} - Включить фары\n");
	strcat(stringer, ""SERVER"/rep{FFFFFF} - Подать жалобу\n");
	strcat(stringer, ""SERVER"/tickets{FFFFFF} - Посмотреть неоплаченные штрафы\n");
	strcat(stringer, ""SERVER"/myhistory{FFFFFF} - Посмотреть список своих наказаний\n");
	strcat(stringer, ""SERVER"/id{FFFFFF} - Поиск ID игрока по Нику\n");
	strcat(stringer, ""SERVER"/mytk{FFFFFF} - Посмотреть трудовую книжку\n");
	strcat(stringer, ""SERVER"/showtk{FFFFFF} - Показать игроку свою трудовую книжку\n");
	strcat(stringer, ""SERVER"/showskillgun (/ssg){FFFFFF} - Показать игроку свои навоки владением оружием\n");
	SPD(playerid, dCommandOsnovnoe, d_info, "{FFFFFF}Команды сервера | "SERVER"Основные", stringer, "<< Назад", "Закрыть");
	return 1;
}

stock DialogCommandObchenie(playerid)
{
    new stringer[256];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"/b{FFFFFF} - Написать в (OOC) чат\n");
	strcat(stringer, ""SERVER"/w{FFFFFF} - Говорить шопотом\n");
	strcat(stringer, ""SERVER"/s{FFFFFF} - Крикнуть\n");
	strcat(stringer, ""SERVER"/v{FFFFFF} - Чат для владельцев с "SERVER"VIP{FFFFFF} стутусом\n");
	strcat(stringer, ""SERVER"/vb{FFFFFF} - (OOC) Чат для владельцев с "SERVER"VIP{FFFFFF} стутусом\n");
	strcat(stringer, ""SERVER"/do{FFFFFF} - Выполнить действие от третьего лица\n");
	strcat(stringer, ""SERVER"/me{FFFFFF} - Выполнить действие от своего лица\n");
	strcat(stringer, ""SERVER"/try{FFFFFF} - Действие рандома\n");
	SPD(playerid, dCommandObchenie, d_info, "{FFFFFF}Команды сервера | "SERVER"Общение", stringer, "<< Назад", "Закрыть");
	return 1;
}

stock DialogCommandFrac(playerid)
{
    new stringer[512];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {FFFFFF}Администрация области\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}ППС\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}ДПС\n");
	strcat(stringer, ""SERVER"4. {FFFFFF}ФСБ\n");
	strcat(stringer, ""SERVER"5. {FFFFFF}Вооруженные силы\n");
	strcat(stringer, ""SERVER"6. {FFFFFF}Областная больница\n");
	strcat(stringer, ""SERVER"7. {FFFFFF}ТРК Ритм\n");
	strcat(stringer, ""SERVER"8. {FFFFFF}ОПГ Барыги\n");
	strcat(stringer, ""SERVER"9. {FFFFFF}ОПГ Южная\n");
	strcat(stringer, ""SERVER"10. {FFFFFF}Чеченская мафия\n");
	strcat(stringer, ""SERVER"11. {FFFFFF}Русская мафия\n");
	SPD(playerid, dCommandFrac, d_list, "{FFFFFF}Команды сервера | "SERVER"Организации", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogCommandJob(playerid)
{
    new stringer[512];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"1.{FFFFFF} Механик\n");
	strcat(stringer, ""SERVER"2.{FFFFFF} Таксист\n");
	strcat(stringer, ""SERVER"3.{FFFFFF} Пилот\n");
	strcat(stringer, ""SERVER"4.{FFFFFF} Дальнобойщик\n");
	strcat(stringer, ""SERVER"5.{FFFFFF} Мусорщик\n");
	strcat(stringer, ""SERVER"6.{FFFFFF} Инкасатор\n");
	strcat(stringer, ""SERVER"7.{FFFFFF} Электрик\n");
	SPD(playerid, dCommandJob, d_list, "{FFFFFF}Команды сервера | "SERVER"Работы", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogCommandFamily(playerid)
{
    new stringer[512];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"/fmenu{FFFFFF} - Главное меню семью\n");
	strcat(stringer, ""SERVER"/finvite{FFFFFF} - Принять игрока в семью\n");
	strcat(stringer, ""SERVER"/funinvite{FFFFFF} - Выгнать игрока из семьи\n");
	strcat(stringer, ""SERVER"/f{FFFFFF} - Чат семьи\n");
	strcat(stringer, ""SERVER"/fb{FFFFFF} - (OOC) Чат семьи\n");
	strcat(stringer, ""SERVER"/fleave{FFFFFF} - Покинуть семью по С/Ж");
	SPD(playerid, dCommandFamily, d_info, "{FFFFFF}Команды сервера | "SERVER"Семья", stringer, "<< Назад", "Закрыть");
	return 1;
}

stock DialogCommandCar(playerid)
{
    new stringer[512];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"/cars{FFFFFF} - Список личного транспорта\n");
	strcat(stringer, ""SERVER"/rem{FFFFFF} - Пристегнуть/Растегнуть ремень безопасности\n");
	strcat(stringer, ""SERVER"/lock{FFFFFF} - Открыть/Закрыть транспорт\n");
	strcat(stringer, ""SERVER"/givekey{FFFFFF} - Передать ключи от транспорта игроку\n");
	strcat(stringer, ""SERVER"/ungivekey{FFFFFF} - Забрать ключи от транспорта у игрока\n");
	strcat(stringer, ""SERVER"/rlock{FFFFFF} - Открыть/Закрыть арендованный транспорт\n");
	strcat(stringer, ""SERVER"/carpass{FFFFFF} - Паспорт транспорта\n");
	SPD(playerid, dCommandCar, d_info, "{FFFFFF}Команды сервера | "SERVER"Транспорт", stringer, "<< Назад", "Закрыть");
	return 1;
}

stock DialogCommandTK(playerid)
{
    new stringer[512];
	stringer[0] = EOS;
	strcat(stringer, ""SERVER"/cmenu{FFFFFF} - Главное меню компании\n");
	strcat(stringer, ""SERVER"/cinvite{FFFFFF} - Принять игрока в компанию\n");
	strcat(stringer, ""SERVER"/cuninvite{FFFFFF} - Выгнать игрока из компании\n");
	strcat(stringer, ""SERVER"/c{FFFFFF} - Чат компании\n");
	strcat(stringer, ""SERVER"/cb{FFFFFF} - (OOC) Чат компании\n");
	strcat(stringer, ""SERVER"/cleave{FFFFFF} - Покинуть компании по С/Ж");
	SPD(playerid, dCommandTK, d_info, "{FFFFFF}Команды сервера | "SERVER"Компания", stringer, "<< Назад", "Закрыть");
	return 1;
}

stock DialogMenuSettings(playerid)
{
	SPD(playerid, dMenuSetting, d_list, "{FFFFFF}Настройки аккаунта | "SERVER"Настройки", "\
		"SERVER"1. {FFFFFF}Настройки безопасности",
	"Выбрать", "<< Назад");
	return 1;
}

stock DialogPlayerGoogle(playerid)
{
	google_code[0] = EOS;
	for(new i; i < 17; i++) strcat(google_code, base_encoding[random(sizeof(base_encoding))]); //
	new str[512], string[2048];
	string[0] = EOS;
	strcat(string, "{FFFFFF}");
	strcat(string, "Вы собираетесь подключить "SERVER"'Google Authenticator'{FFFFFF} для защиты вашего аккаунта от взлома.\n\n");
	strcat(string, "Приложение "SERVER"'Google Authenticator'{FFFFFF} используется для создания кодов двухэтапной авторизации.\n");
	strcat(string, "Такая авторизация способна надёжно защитить Ваш аккаунт от взломов и прочих неприятностей.\n");
	strcat(string, "Мы настоятельно рекомендуем всем воспользоваться данной защитой, дабы обезопасить свой игровой аккаунт.\n");
	strcat(string, "Приложение "SERVER"'Google Authenticator'{FFFFFF} можно скачать на "SERVER"iOS{FFFFFF}, "SERVER"Android{FFFFFF} устройство, а также как дополнение к "SERVER"Google Chrome{FFFFFF}.\n\n");
	strcat(string, "После того как Вы скачали приложение "SERVER"'Google Authenticator'{FFFFFF}:\n");
	strcat(string, ""SERVER"1. {FFFFFF}Нажмите на "SERVER"'+'{FFFFFF} в правом нижнем углу приложения\n");
	strcat(string, ""SERVER"2. {FFFFFF}Выберите вариант №2 "SERVER"'Ввести код настройки'\n\n");
	format(str, sizeof(str), "{FFFFFF}Ваш логин для ввода: "SERVER"Redwich Games - (%s)\n", GetName(playerid)); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Ваш секретный ключ для ввода: "GREEN"%s\n\n", google_code); strcat(string, str);
	strcat(string, "{FFFFFF}Укажите код в поле ниже который Вы получили из приложения "SERVER"'Google Authenticator'{FFFFFF}:");
	SPD(playerid, dSettingGoogleOn, d_input, ""SERVER"Подтверждение Google Authenticator", string, "Далее >>", "Закрыть");
    return 1;
}

stock DialogTextAdmin(playerid)
{
	SPD(playerid, dReport, d_list, "{FFFFFF}Игровое меню персонажа |"SERVER" Связь с администрацией{FFFFFF}", "\
		"SERVER"1. {FFFFFF}Задать вопрос\n\
		"SERVER"2. {FFFFFF}Подать жалобу",
	"Выбрать", "<< Назад");
	return 1;
}

stock DialogReferalList(playerid)
{
	if(PlayerLogin[playerid])
	{
		if(!FirstOpenCMD[playerid]) { TotalPlayers[playerid] = TotalPlayersCount[playerid] = 0; }
		new string[124];
		string_f("SELECT `acLogin` FROM "T_ACC_S" WHERE `acReferal` = '%s' LIMIT %i, 10", GetName(playerid), TotalPlayers[playerid]);
		mysql_tquery(mysql, string, "CheckReferalList", "d", playerid);
	}
	return 1;
}

stock DialogPromoCode(playerid)
{
	new string[1024];
	strcat(string, "{FFFFFF}В данном меню Вы можете ввести "SERVER"промо-код{FFFFFF} и получить призы!\n");
	SPD(playerid, dNull, d_info, ""SERVER"Промокод", string, "Хорошо", "Закрыть");
	return 1;
}

stock DialogAddMenu(playerid)
{
	new str[128], string[1512];
	strcat(string, "{FFFFFF}Наименование\tКолличество\n");
	format(str,sizeof(str),""SERVER"1. {FFFFFF}Радар\t"SERVER"%i шт{FFFFFF}\n", TOTALRADAR); strcat(string, str);
	format(str,sizeof(str),""SERVER"2. {FFFFFF}Мусорка\t"SERVER"%i шт{FFFFFF}\n", TOTALMUSORKI); strcat(string, str);
	format(str,sizeof(str),""SERVER"3. {FFFFFF}Банкоматы\t"SERVER"%d шт{FFFFFF}\n", TOTALATM); strcat(string, str);
	format(str,sizeof(str),""SERVER"4. {FFFFFF}Билборды (Рекламный щит)\t"SERVER"%d шт{FFFFFF}\n", TOTALBILBORD); strcat(string, str);
	// if(GetAdmin(playerid) >= 8) format(str,sizeof(str),""SERVER"4. {FFFFFF}Промо-коды\t"SERVER"%i шт{FFFFFF}\n", TOTALPROMO); strcat(string, str);
	SPD(playerid, dAddMenu, d_tlisth, ""SERVER"Добавить", string, "Выбрать", "Отмена");
	return 1;
}

stock DialogAddPromo(playerid)
{
	new string[1024], str[512];
	strcat(string, ""SERVER"Наименование\t"SERVER"Содержание\n");
	format(str, sizeof(str), "{FFFFFF}Название\t"SERVER"%s\n", PrI[TOTALPROMO][prName]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Число активаций\t"SERVER"%i\n", PrI[TOTALPROMO][prActive]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Кол-во опыта\t"SERVER"%i\n", PrI[TOTALPROMO][prPrizExp]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Кол-во уровня\t"SERVER"%i\n", PrI[TOTALPROMO][prPrizLevel]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Кол-во виртов\t"SERVER"%i\n", PrI[TOTALPROMO][prPrizMoney]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Кол-во R-Coins\t"SERVER"%i\n", PrI[TOTALPROMO][prPrizDonat]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Кол-во дней VIP\t"SERVER"%i\n", PrI[TOTALPROMO][prPrizVip]); strcat(string, str);
	return SPD(playerid, dAddPromoCreate, d_tlisth, ""SERVER"Создание Промо-кода", string, "Создать", "<< Назад");
}

stock DialogDonatInfo(playerid)
{
	new string[512], str[124];
	strcat(string, "{FFFFFF}На данной странице вы можете узнать свой номер\n");
	strcat(string, "аккаунта, текущее состояние счета.\n\n");
	strcat(string, "Чтобы воспользоваться счетом нажмите "SERVER"'Заказать'{FFFFFF}.\n\n");
	strcat(string, ""SERVER"Информация:\n\n");
	format(str, sizeof(str), "{FFFFFF}Номер аккаунта: \t\t"SERVER"%i\n", AcI[playerid][acID]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Текущее состояние счета: \t"SERVER"%s R-Coins\n", ConvertCash(PI[playerid][Donat])); strcat(string, str);
	SPD(playerid, dDonatInfo, d_info, "{FFFFFF}Платные услуги", string, ""SERVER"Заказать", "Закрыть");
	return 1;
}

stock DialogDonatMenu(playerid)
{
	new str[150], stringer[1024];
  	stringer[0] = EOS;
  	strcat(stringer, ""SERVER"№. {FFFFFF}Наименование\t{FFFFFF}Стоимость\n");

 	strcat(stringer, ""SERVER"1. {FFFFFF}Проверить баланс\n");
    if(SI[sX_Server]) format(str, sizeof(str), ""SERVER"2. {FFFFFF}Конвертация\t"SERVER" 1 R-Coins = %s Виртам\n", ConvertCash(1000*SI[sX_Server])), strcat(stringer, str);
    else strcat(stringer, ""SERVER"2. {FFFFFF}Конвертация\t"SERVER" 1 R-Coins = 1.000 Виртам\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Сменить "SERVER"NonRP{FFFFFF} имя\t"SERVER"30 R-Coins\n");
	strcat(stringer, ""SERVER"4. {FFFFFF}Снять одно предупреждения\t"SERVER"50 R-Coins\n");
	strcat(stringer, ""SERVER"5. {FFFFFF}Снять розыск\t"SERVER"35 R-Coins\n");
	strcat(stringer, ""SERVER"6. {FFFFFF}Военный билет\t"SERVER"100 R-Coins\n");
	strcat(stringer, ""SERVER"7. {FFFFFF}+1 EXP\t"SERVER"10 R-Coins\n");
	strcat(stringer, ""SERVER"8. {FFFFFF}+1 LvL\t"SERVER"50 R-Coins\n");
	strcat(stringer, ""SERVER"9. {FFFFFF}Сменить название семьи\t"SERVER"250 R-Coins\n");
	strcat(stringer, ""SERVER"10. {FFFFFF}VIP статус\t"SERVER"7 R-Coins (1 день)\n");
	SPD(playerid, dDonatMenu, d_tlisth, ""SERVER"Данат меню", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogBankMenu(playerid)
{
	new stringer[524], str[100];
	strcat(stringer, ""SERVER"1. {FFFFFF}Основной счёт\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}Счёт Дома\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Счёт Семьи\n");
	strcat(stringer, ""SERVER"4. {FFFFFF}Счёт Бизнеса\n");
	strcat(stringer, ""SERVER"5. {FFFFFF}Счёт Компании\n");
	strcat(stringer, " \n");
	strcat(stringer, ""YELLOW"5. Банковские карты\n");
	if(!PI[playerid][Pasport])
	{
		format(str, sizeof(str), ""WHITE"Пошлина на паспорт: %s", (PI[playerid][Poshlina])?(""GREEN"Оплачено"):(""SERVER"Не оплачено")); strcat(stringer, str);
	}
	SPD(playerid, dBankMenu, d_list, ""SERVER"Меню банка", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogBankList(playerid)
{
	if(!PI[playerid][Pasport]) return SEM(playerid, "У Вас нет паспорта для пользованием банковскими услугами!");
	{
		new stringer[1024];
		stringer[0] = EOS;
		strcat(stringer, ""SERVER"1. {FFFFFF}Баланс счета\n");
		strcat(stringer, ""SERVER"2. {FFFFFF}Пополнить счёт\n");
		strcat(stringer, ""SERVER"3. {FFFFFF}Снять со счёта\n");
		strcat(stringer, ""SERVER"4. {FFFFFF}Перевести другому клиенту банка\n");
		strcat(stringer, ""SERVER"5. {FFFFFF}Оплатить штраф по номеру\n");
		strcat(stringer, ""SERVER"6. {FFFFFF}Оплатить все штрафы "BLUE"ППС{FFFFFF} и "BLUE"ДПС{FFFFFF}");
		SPD(playerid, dBankList, d_list, "{FFFFFF}Банковские счета | "SERVER"Основной счёт", stringer, "Выбрать", "<< Назад");
	}
	return 1;
}


stock DialogShetHouse(playerid)
{
	new stringer[1024];
    stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {FFFFFF}Баланс счета\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}Положить на счет\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Снять со счета");
	SPD(playerid, dBankShetHouse, d_list, "{FFFFFF}Банковские счета | "SERVER"Домашний", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogShetFamily(playerid)
{
	new stringer[1024];
    stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {FFFFFF}Баланс счета\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}Положить на счет\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Снять со счета");
	SPD(playerid, dBankShetFamily, d_list, "{FFFFFF}Банковские счета | "SERVER"Семейный", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogShetBiz(playerid)
{
	new stringer[1024];
    stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {FFFFFF}Баланс счета\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}Положить на счет\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Снять со счета");
	SPD(playerid, dBankShetBiz, d_list, "{FFFFFF}Банковские счета | "SERVER"Бизнесс", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogShetTK(playerid)
{
	new stringer[1024];
    stringer[0] = EOS;
	strcat(stringer, ""SERVER"1. {FFFFFF}Баланс счета\n");
	strcat(stringer, ""SERVER"2. {FFFFFF}Положить на счет\n");
	strcat(stringer, ""SERVER"3. {FFFFFF}Снять со счета");
	SPD(playerid, dBankShetTK, d_list, "{FFFFFF}Банковские счета | "SERVER"Компания", stringer, "Выбрать", "<< Назад");
	return 1;
}

stock DialogATM_Menu(playerid)
{
	new string[1024];
	strcat(string, ""SERVER"1. {FFFFFF}Баланс счета\n");
	strcat(string, ""SERVER"2. {FFFFFF}Снять со счета\n");
	strcat(string, ""SERVER"3. {FFFFFF}Положить на счет\n");
	strcat(string, ""SERVER"4. {FFFFFF}Пополнить баланс телефона\n");
	strcat(string, ""SERVER"5. {FFFFFF}Пожертвовать деньги области\n");
	if(PI[playerid][Job] == JOB_INCASATOR)
	{

	}
	SPD(playerid, dAtmMenu, d_list, ""SERVER"Меню банкомата", string, "Выбрать", "Отмена");
	return 1;
}

// Информация от организации
stock DialogFracInfo(playerid, fracid)
{
	new string[1024], stringer[30], str[124];
	if(GetString(FracI[fracid][fLeader], "The Stats")) stringer = ""GREY"Отсутствует";
	else stringer_f("%s", FracI[fracid][fLeader]);
	SetPVarInt(playerid, "FracID", fracid);

	format(str, sizeof(str), "{FFFFFF}Информация от "SERVER"%s\n", FracI[fracid][fName]); strcat(string, str);
	format(str, sizeof(str), "{FFFFFF}Лидер: "SERVER"%s\n\n", stringer); strcat(string, str);
	// format(str, sizeof(str), "{FFFFFF}Бюджет организации: "GREEN"%s рублей\n\n", ConvertCash(FracI[fracid][fBank])); strcat(string, str);
	strcat(string, ""SERVER"Должности и зарплата:\n");
	format(str, sizeof(str), ""SERVER"1. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][0], ConvertCash(GetRangZP[fracid][0])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"2. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][1], ConvertCash(GetRangZP[fracid][1])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"3. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][2], ConvertCash(GetRangZP[fracid][2])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"4. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][3], ConvertCash(GetRangZP[fracid][3])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"5. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][4], ConvertCash(GetRangZP[fracid][4])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"6. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][5], ConvertCash(GetRangZP[fracid][5])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"7. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][6], ConvertCash(GetRangZP[fracid][6])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"8. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][7], ConvertCash(GetRangZP[fracid][7])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"9. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][8], ConvertCash(GetRangZP[fracid][8])); strcat(string, str);
	format(str, sizeof(str), ""SERVER"10. {FFFFFF}%s: "GREEN"%s рублей\n", GetRangName[fracid][9], ConvertCash(GetRangZP[fracid][9])); strcat(string, str);
	SPD(playerid, dFracInfo, d_info, ""SERVER"Информация", string, "Меню", "Закрыть");
	return 1;
}
//

// Оружие для организации
stock DialogFracGun(playerid)
{
	if(!GetFrac(playerid)) return 1;
	{
		// if(FracI[GetFrac(playerid)][fMats] < 1) return SEM(playerid, "На складе закончились боеприпасы!");
		new stringer[124], string[512];

		strcat(string, "№. Наименование\tКол-во\n");
		switch(GetFrac(playerid))
		{
		    case FRAC_AO:
		    {
				strcat(string, ""SERVER"1. {FFFFFF}Бронижелет\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"2. {FFFFFF}Дубинка\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"3. {FFFFFF}Пистолет шокер\t"SERVER"15 пт.");
			}
		    case FRAC_PPS:
		    {
				strcat(string, ""SERVER"1. {FFFFFF}Бронижелет\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"2. {FFFFFF}Дубинка\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"3. {FFFFFF}Пистолет шокер\t"SERVER"15 пт.\n");
				strcat(string, ""SERVER"4. {FFFFFF}МП5\t"SERVER"270 пт.\n");
			}
		    case FRAC_DPS:
		    {
				strcat(string, ""SERVER"1. {FFFFFF}Бронижелет\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"2. {FFFFFF}Дубинка\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"3. {FFFFFF}Пистолет шокер\t"SERVER"15 пт.\n");
				strcat(string, ""SERVER"4. {FFFFFF}МП5\t"SERVER"270 пт.\n");
			}
		    case FRAC_FSB:
		    {
				strcat(string, ""SERVER"1. {FFFFFF}Бронижелет\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"2. {FFFFFF}Дубинка\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"3. {FFFFFF}Пистолет шокер\t"SERVER"15 пт.\n");
				strcat(string, ""SERVER"4. {FFFFFF}Пистолет Desert Eagle\t"SERVER"140 пт.\n");
				strcat(string, ""SERVER"5. {FFFFFF}АК-47\t"SERVER"350 пт.\n");
				strcat(string, ""SERVER"6. {FFFFFF}СВД\t"SERVER"50 пт.");
			}
		    case FRAC_VH:
	    	{
				strcat(string, ""SERVER"1. {FFFFFF}Бронижелет\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"2. {FFFFFF}Дубинка\t"SERVER"1 шт.\n");
				strcat(string, ""SERVER"3. {FFFFFF}Пистолет шокер\t"SERVER"15 пт.\n");
				strcat(string, ""SERVER"4. {FFFFFF}МП5\t"SERVER"270 пт.\n");
			}
		    case FRAC_SMP:
		    {
				strcat(string, ""SERVER"1. {FFFFFF}Взять медикоменты\t"SERVER"15 шт.\n");
				strcat(string, ""SERVER"2. {FFFFFF}Положить медикоменты\n");
			}
		}
		if(GetFrac(playerid) == FRAC_PPS || GetFrac(playerid) == FRAC_DPS || GetFrac(playerid) == FRAC_FSB || GetFrac(playerid) == FRAC_VH) stringer = "Оружейный склад";
		else if(GetFrac(playerid) == FRAC_SMP) stringer = "Медецынский склад";
		else if(GetFrac(playerid) == FRAC_SMI) stringer = "Склад";

		SPD(playerid, dFracGun, d_tlisth, stringer, string, "Взять", "Закрыть");
	}
	return 1;
}
//

stock PlayerPayDay(i) // Зарплата для игрока
{
    if(!IsPlayerConnected(i) || !PlayerLogin[i]) return 1;
    {
		new string[1024];
		SCM(i, cWHITE, "  БАНКОВСКИЙ ЧЕК");
		SCM(i, cWHITE, "________________________________________");
		SCM(i, cWHITE, " ");
		if(GetFrac(i)) // Зарплата организации
		{
			new FracBank = GetRangZP[GetFrac(i)][PI[i][FracRang]-1];
			if(FracI[GetFrac(i)][fBank]>=FracBank)
			{
				FracI[GetFrac(i)][fBank] -= FracBank;
				GiveBank(i, FracBank*SI[sX_PayDay]);
				FSCM(i, cWHITE, "- Зарплата организации: "SERVER"%s рублей", (SI[sX_PayDay])?(ConvertCash(FracBank*SI[sX_PayDay])):(ConvertCash(FracBank)));
				for(new f = 1; f <= TOTALFRAC; f ++)  { update_int_mysql(T_FRAC, "fBank", FracI[f][fBank], "fID", FracI[f][fID]); }
			}
			else { SCM(i, cRED, "- Вы не получили зарплату, так как в Вашей организации нет средств!"); }
		}
		string_f("- Текущий баланс счёта: "GREEN"%s рублей", (PI[i][Bank]<1)?("{FF0000}%s"):(ConvertCash(PI[i][Bank])));
		SCM(i, cWHITE, string);
		SCM(i, cWHITE, "________________________________________");

		PlayerPlaySound(i,5203,0.0,0.0,0.0);

		if(PI[i][Zakon] < 100) PI[i][Zakon]++;
		// if(PI[i][Wanted] > 0) PI[i][Wanted]--;

		if(SI[sX_Exp]) GiveExp(i, 2*SI[sX_Exp]);
		else GiveExp(i, 1);

		SavePlayer(i);
	}
	return 1;
}

stock ServerPayDay() // Зарплата для сервера
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || !PlayerLogin[i]) return 1;
		{
			new string[1024];
			getdate(year_s, month_s, day_s); // Узнаем дату
			gettime(hour_s, minute_s, second_s); // Узнаем время
			SetWorldTime(hour_s);

			FSCM(i, cWHITE, "Текущая дата и время: [{3399FF}%02d.%02d.%04d {FFFFFF}| {3399FF}%02d:%02d]", day_s, month_s, year_s, hour_s, minute_s);
			SCM(i, cWHITE, "  БАНКОВСКИЙ ЧЕК");
			SCM(i, cWHITE, "________________________________________");
			SCM(i, cWHITE, " ");
			if(GetAdmin(i)) // Зарплата администрации
			{
				new AdminSalary = 4000*(GetAdmin(i));
				string_f("- Зарплата администратора: "SERVER"%s рублей", ConvertCash(AdminSalary));
				SCM(i, cWHITE, string);
				GiveBank(i, AdminSalary);
				SCM(i, cWHITE, " ");
			}
			if(!GetFrac(i) && PI[i][Level]<=20) //
			{
				new Posobie = 750*(PI[i][Level]);
				FSCM(i, cWHITE, "- Пособие по безработице: "SERVER"%s рублей", ConvertCash(Posobie));
				GiveBank(i, Posobie);
			}
			if(PI[i][Vip] == 1) PI[i][Bank] += 2000;
			string_f("- Текущий баланс счёта: "GREEN"%s рублей", (PI[i][Bank]<1)?("{FF0000}%s"):(ConvertCash(PI[i][Bank])));
			SCM(i, cWHITE, string);
			SCM(i, cWHITE, "________________________________________");
			PlayerPlaySound(i, 5203,0.0,0.0,0.0);
		}
		PAYDAY = false;
	}
	return 1;
}

// ============================== [ Стоки чатов ] =========================== //

stock ProxDetectorText(Float:radi, playerid, str[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz, Float:oldposx, Float:oldposy,
	Float:oldposz, Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	foreach(new i: Player)
	{
		if(!PlayerLogin[i]) continue;
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) SCM(i, col1, str);
			else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) SCM(i, col2, str);
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) SCM(i, col3, str);
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) SCM(i, col4, str);
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SCM(i, col5, str);
		}
	}
	return 1;
}

stock PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx;
		new Float:oldposy;
		new Float:oldposz;
		new Float:tempposx;
		new Float:tempposy;
		new Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

stock ProxDetectorS(Float:radi, playerid, targetid)
{
	if(!IsPlayerConnected(playerid) && IsPlayerConnected(targetid)) return 0;

	new Float:p[3];
	if(!GetPlayerPos(targetid, p[0], p[1], p[2])) return 0;
	if(!IsPlayerInRangeOfPoint(playerid, radi, p[0], p[1], p[2])) return 0;
	return 1;
}

stock SendStreamMessage(Float:radius, playerid, mes[], color)
{
	new Float:X, Float:Y, Float:Z, world = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid,X,Y,Z);
	foreach(new i : Player)
	{
		if(GetPlayerVirtualWorld(i) == world)
		{
			if(IsPlayerInRangeOfPoint(i,radius,X,Y,Z)) SCM(i, color, mes);
		}
	}
}

stock MeAction(playerid, action[], Float:distance = 13.0)
{
	new string[144];
	string_f("%s %s", GetName(playerid), action);
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerDistanceToPlayer(playerid,i) > distance || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;
		SCM(i, cPURPLE, string);
		SetPlayerChatBubble(playerid, string, cPURPLE, 10.0, 5000);
	}
	return 1;
}

stock DoAction(playerid, action[], Float:distance = 13.0)
{
	new string[144];
	string_f("%s | >> %s", action, GetName(playerid));
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) ||  GetPlayerDistanceToPlayer(playerid,i) > distance || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;
		SCM(i, cBLUE, string);
	}
	return 1;
}

stock TryAction(playerid, action[], Float:distance = 13.0)
{
	new string[144];
	if(random(2) == 1) string_f("%s %s - "GREEN"Удачно", GetName(playerid), action);
	else string_f("%s %s - "RED"Не удачно", GetName(playerid), action);
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerDistanceToPlayer(playerid,i) > distance || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;
		SCM(i, cPURPLE, string);
	}
	return 1;
}

stock SetTK(playerid, info[])
{
	new string[254];
	string_f("INSERT INTO "T_TRUDIVAI" (`Name`, `Frac`, `Data`, `Info`) VALUES  ('%s', %d, NOW(), '%s')", GetName(playerid), GetFrac(playerid), info);
	mysql_query(mysql, string);
	return 1;
}

stock SCMAdmin(color, const str[]) // Чат администраторов
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !AdminLogin[i] || !AI[i][aSetting][7]) continue;
		if(GetAdmin(i) >= 1) SCM(i, color, str);
	}
	return 1;
}

stock SCMMp(color, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;
	    if(GetAdmin(i) >= 3 && AdminLogin[i] || MP[mpPlayerStatsus][i]) SCM(i, color, str);
	}
	return 1;
}

stock SCMInfoAdmin(color, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i] /*|| !PI[i][Settings][2]*/) continue;
    	SCM(i, color, str);
	}
	return 1;
}

stock SCMJob(jobs, color, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;
		if(PI[i][Job] == jobs) SCM(i, color, str);
	}
	return 1;
}

stock SCMVip(color, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;
		if(GetAdmin(i) >= 4 && AdminLogin[i] || PI[i][Vip]/* && PI[i][Settings][4]*/) SCM(i, color, str);
	}
	return 1;
}

stock SCMFamily(fam, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;
		if(PI[i][Family] == fam) SCM(i, 0x17CC9DFF, str);
	}
	return 1;
}

stock SCMMute(playerid, ret = 1)
{
	FSCM(playerid, cWAR, "Ваш игровой чат заморожен на %s!", ConvertTime(PI[playerid][MuteTime]));
	return ret;
}

stock SCMVk(const vk_url[], const vk_msg[]) // Отправка сообщения игроку в ВК
{
	new format_vk_msg[1024];
	format(format_vk_msg, sizeof(format_vk_msg), "msg=%s", vk_msg);

	new format_vk_url[55];
	// format(format_vk_url, sizeof(format_vk_url), "redwich-rp.ru/vk_acces.php?id=%s", vk_url);
	format(format_vk_url, sizeof(format_vk_url), "file:///vk_acces.php?id=%s", vk_url);
	HTTP(random(MAX_PLAYERS), HTTP_POST, format_vk_url, format_vk_msg,"");
	return 1;
}

stock SCMTelegram(const tg_id[], const tg_msg[])
{
	new format_tg_msg[1024];
	format(format_tg_msg, sizeof(format_tg_msg), "msg=%s", tg_msg);

	new format_tg_id[55];
	format(format_tg_id, sizeof(format_tg_id), "redwich-rp.ru/tg_access.php?&id_user=%s", tg_id);
	HTTP(random(MAX_PLAYERS), HTTP_POST, format_tg_id, format_tg_msg,"");
}

// Дни недели
stock GetNameDay()
{
    new saturday = 1310155200;
    new w = gettime();
    new days;
    while(w - saturday > 60*60*24) { w-=60*60*24; days++; }
    while(days >=7) { days-=7; }

    new data[12];
    switch(days)
    {
        case 0: data = "Сб.";
        case 1: data = "Вс.";
        case 2: data = "Пн.";
        case 3: data = "Вт.";
        case 4: data = "Ср.";
        case 5: data = "Чт.";
        case 6: data = "Пт.";
        // default:
    }
    return data;
}

// Организации чат
stock GetFracID(playerid)
{
	if(GetFrac(playerid) > 0) return GetFrac(playerid);
	if(PI[playerid][FracLeader]) return PI[playerid][FracLeader];
	return 0;
}

stock SCMFrac(frac, color, const str[]) // Чат организации
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;
		if(GetFrac(i) != frac || !FracDuty[i][GetFrac(i)]) continue;
		{ SCM(i, color, str); }
	}
	return 1;
}

stock SCMFracAll(color, const str[]) // Чат всех организаций
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;
		if(!FracGoss(i) || !GetAdmin(i)) continue;
		{SCM(i, color, str);}
	}
	return 1;
}

stock FracGoss(playerid)
{
	switch(GetFracID(playerid))
	{
	    case FRAC_AO, FRAC_PPS, FRAC_DPS, FRAC_FSB, FRAC_VH, FRAC_SMP, FRAC_SMI: return 1;
	    default: return 0;
	}
	return 0;
}

stock FracMVD(playerid)
{
	switch(GetFracID(playerid))
	{
	    case FRAC_PPS, FRAC_DPS, FRAC_FSB: return 1;
	    default: return 0;
	}
	return 1;
}

stock SCMFracGoss(color, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) return 0;
		if(FracGoss(i)) SCM(i, color, str);
	}
	return 1;
}

stock SCMFracMVD(color, const str[])
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogin[i]) return 0;
		if(FracMVD(i)) SCM(i, color, str);
	}
	return 1;
}

stock SCMLogs(type, text[])
{
	new string[512];
	string_f("INSERT INTO `server_logs` (alType, alData, alText) VALUES ('%d', NOW(), '%s')", type, text);
	mysql_query(mysql, string);
	return 1;
}


stock SetHistory(playerid, const str[])
{
	new string[512];
	string_f("INSERT INTO "T_HISTORY" (`lhName`, `lhData`, `lhText`) VALUES ('%s', NOW(), '%s')", GetName(playerid), str);
	mysql_query(mysql, string);
	return 1;
}

// ============================== [ Стоки загрузки ] ======================== //

stock LoadMySQLSettings() // Загрузка с базой данных MySQL
{
	new FileID = ini_openFile("redwich_mysql.ini"), errCode;
	if(FileID < 0)
	{
		printf("Ошибка при открытии файла настроек MySQL. Код ошибки: %d", FileID);
		return 0;
	}
	errCode = ini_getString(FileID,"mysql_host",MySQLSettings[mysql_Host]);

	if(errCode < 0) printf("Ошибка при чтении файла настроек MySQL (хост). Код ошибки: %d", errCode);
	errCode = ini_getString(FileID,"mysql_name",MySQLSettings[mysql_Name]);

	if(errCode < 0) printf("Ошибка при чтении файла настроек MySQL (пароль). Код ошибки: %d", errCode);
	errCode = ini_getString(FileID,"mysql_pass",MySQLSettings[mysql_Pass]);

	if(errCode < 0) printf("Ошибка при чтении файла настроек MySQL (имя пользователя). Код ошибки: %d", errCode);
	errCode = ini_getString(FileID,"mysql_baza",MySQLSettings[mysql_Baza]);

	if(errCode < 0) printf("Ошибка при чтении файла настроек MySQL (базы данных). Код ошибки: %d", errCode);
	ini_closeFile(FileID);
	return 1;
}

/* Система Анти-чит
stock LoadSettingsAntiCheat() // Функция загрузки данных о настройках кодов анти-чита из базы данных
{
	new Cache:cache = mysql_query(mysql, "SELECT * FROM "AC_TABLE_SETTINGS" ORDER BY "AC_TABLE_FIELD_CODE"", true),	rows = 0,tick = GetTickCount();

	cache_get_row_count(rows);
	if(rows > 0)
	{
		for(new i = 0; i < AC_MAX_CODES; i++)
		{
			cache_get_value_name_int(i, ""AC_TABLE_FIELD_TRIGGER"", AC_CODE_TRIGGER_TYPE[i]);

			if(AC_CODE_TRIGGER_TYPE[i] == AC_CODE_TRIGGER_TYPE_DISABLED)
			// EnableAntiCheat(i, 0);
		}
		printf("[MySQL]: Настройки анти-чита успешно загружены (загружено: %d). Потрачено: %dмс.", rows, GetTickCount() - tick);
	}
	else
	{
		print("[MySQL]: Настройки анти-чита не найдены в базе данных. Загрузка мода остановлена - настройте анти-чит.");
		return SendRconCommand("exit");
	}
	cache_delete(cache);
	return 1;
}
*/

// ============================== [ Стоки сохранения ] ====================== //

// Сохранение данных
stock update_int_mysql(table[], strint[], sint, tableid[], id)
{
	new string[128];
	string_f("UPDATE %s SET `%s` = '%d' WHERE `%s` = '%d' LIMIT 1", table, strint, sint, tableid, id);
	mysql_tquery(mysql, string);
	return 1;
}

stock update_str_mysql(table[], strstrings[], strings[], tableid[], id)
{
	new string[128];
	string_f("UPDATE %s SET `%s` = '%s' WHERE `%s` = '%d' LIMIT 1", table, strstrings, strings, tableid, id);
	mysql_tquery(mysql, string);
	return 1;
}

stock update_float_mysql(table[], strfloat[], Float:faloat, tableid[], id)
{
	new string[128];
	string_f("UPDATE %s SET `%s` = '%f' WHERE `%s` = '%d' LIMIT 1", table, strfloat, faloat, tableid, id);
	mysql_tquery(mysql, string);
	return 1;
}

stock acc_int_strcat(query[], len, name[], number) // Для Save
{
	new string[128];
    string_f("`%s` = '%d',", name, number);
	strcat(query, string, len);
    return 1;
}

stock acc_str_strcat(query[], len, name[], str[])  // Для Save
{
	new string[128];
    string_f("`%s` = '%s',",name, str);
    strcat(query, string, len);
    return 1;
}

stock acc_float_strcat(query[], len, name[], Float:number)  // Для Save
{
	new string[128];
    string_f("`%s` = '%f',", name, number);
    strcat(query, string, len);
    return 1;
}

stock SaveAllServer()
{
    SaveServer(); //
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || !PlayerLogin[i]) continue;

		SaveAccServer(i);
		SavePlayer(i);
		if(GetAdmin(i)>=1) SaveAdmin(i); //
		FixAnimacion(i);
		RemoveServer(i);
		RemovePlayer(i);
		CheckOnline(i, false);
	}
	for(new f = 1; f <= TOTALFRAC; f ++) { SaveFrac(f); }
	for(new fc = 1; fc <= TOTALCARFRAC; fc ++) { SaveCarFrac(fc); }
	for(new tc = 1; tc <= TOTALCARTAXI; tc ++) { SaveCarTaxi(tc); }
    return 1;
}

// Сохранение данныйх сервера
stock SaveServer()
{
    new query[1024];
	query = "UPDATE "T_SERVER" SET ";
    acc_str_strcat(query, sizeof(query), "sName", SI[sName]);
    acc_str_strcat(query, sizeof(query), "sNameServer", SI[sNameServer]);
    acc_str_strcat(query, sizeof(query), "sObnova", SI[sObnova]);
    acc_str_strcat(query, sizeof(query), "sVersion", SI[sVersion]);
    acc_str_strcat(query, sizeof(query), "sWeb", SI[sWeb]);
    acc_str_strcat(query, sizeof(query), "sDonate", SI[sDonate]);
    acc_str_strcat(query, sizeof(query), "sForum", SI[sForum]);
    acc_str_strcat(query, sizeof(query), "sGroup", SI[sGroup]);
    acc_str_strcat(query, sizeof(query), "sMapName", SI[sMapName]);
    acc_str_strcat(query, sizeof(query), "sLanguage", SI[sLanguage]);
    acc_str_strcat(query, sizeof(query), "sPassword", SI[sPassword]);
    acc_str_strcat(query, sizeof(query), "sRconPass", SI[sRconPass]);
    acc_int_strcat(query, sizeof(query), "sBonusMoney", SI[sBonusMoney]);
    acc_int_strcat(query, sizeof(query), "sBonusLevel", SI[sBonusLevel]);
    acc_int_strcat(query, sizeof(query), "sBonusDonat", SI[sBonusDonat]);
    acc_int_strcat(query, sizeof(query), "sAdminPay", SI[sAdminPay]);
    acc_int_strcat(query, sizeof(query), "sBankAdmin", SI[sBankAdmin]);
    acc_int_strcat(query, sizeof(query), "sX_Server", SI[sX_Server]);
    acc_int_strcat(query, sizeof(query), "sX_Exp", SI[sX_Exp]);
    acc_int_strcat(query, sizeof(query), "sX_JobPay", SI[sX_JobPay]);
    acc_int_strcat(query, sizeof(query), "sX_PayDay", SI[sX_PayDay]);
    acc_int_strcat(query, sizeof(query), "sX_Donat", SI[sX_Donat]);
    acc_int_strcat(query, sizeof(query), "sEvent", SI[sEvent]);
	// Работа Шахтера
    acc_int_strcat(query, sizeof(query), "sStatusVagon", SI[sStatusVagon]);
    acc_int_strcat(query, sizeof(query), "sMineralVagon", SI[sMineralVagon]);
    acc_int_strcat(query, sizeof(query), "sMinerals", SI[sMinerals]);
	//
	// Работа Лесоруб
    acc_int_strcat(query, sizeof(query), "sSkladDerevo", SI[sSkladDerevo]);
	//
	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query),"%s WHERE `sNumber` = %d", query, SI[sNumber]);
	mysql_query(mysql, query);
	return 1;
}

stock SaveAccServer(playerid)
{
    new query[1024];

	query = "UPDATE "T_ACC_S" SET ";
    acc_int_strcat(query, sizeof(query), "acID", AcI[playerid][acID]);
    acc_str_strcat(query, sizeof(query), "acLogin", AcI[playerid][acLogin]);
    acc_str_strcat(query, sizeof(query), "acPassword", AcI[playerid][acPassword]);
    acc_int_strcat(query, sizeof(query), "acServer", AcI[playerid][acServer]);
    acc_str_strcat(query, sizeof(query), "acEmail", AcI[playerid][acEmail]);
    acc_int_strcat(query, sizeof(query), "acCheckEmail", AcI[playerid][acCheckEmail]);
    acc_str_strcat(query, sizeof(query), "acReferal", AcI[playerid][acReferal]);
    acc_str_strcat(query, sizeof(query), "acLastIP", AcI[playerid][acLastIP]);
    acc_str_strcat(query, sizeof(query), "acLastData", AcI[playerid][acLastData]);
	acc_int_strcat(query, sizeof(query), "acPinCode", AcI[playerid][acPinCode]);
	acc_int_strcat(query, sizeof(query), "acStatusPin", AcI[playerid][acStatusPin]);
    acc_str_strcat(query, sizeof(query), "acVkID", AcI[playerid][acVkID]);
    acc_int_strcat(query, sizeof(query), "acStatusGoogle", AcI[playerid][acStatusGoogle]);
    acc_str_strcat(query, sizeof(query), "acGoogleCode", AcI[playerid][acGoogleCode]);
    acc_int_strcat(query, sizeof(query), "acTimeGameServer", AcI[playerid][acTimeGameServer]);
    acc_int_strcat(query, sizeof(query), "acDayGameServer", AcI[playerid][acDayGameServer]);

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query), "%s WHERE `acID` = %d", query, AcI[playerid][acID]);
	mysql_tquery(mysql, query);
	return 1;
}

stock SavePlayer(playerid) //
{
    new query[2048], Float: health, lic[16], strSkillGun[16];

	GetPlayerPos(playerid, PI[playerid][Pos][0], PI[playerid][Pos][1], PI[playerid][Pos][2]);
	GetPlayerFacingAngle(playerid, PI[playerid][Pos][3]);

	PI[playerid][Int] = GetPlayerInterior(playerid);
	PI[playerid][World] = GetPlayerVirtualWorld(playerid);

    GetPlayerHealth(playerid, health);
	format(lic, 16, "%i,%i,%i,%i,%i,%i,%i,%i",
	PI[playerid][Lic][0], PI[playerid][Lic][1], PI[playerid][Lic][2], PI[playerid][Lic][3],
	PI[playerid][Lic][4], PI[playerid][Lic][5], PI[playerid][Lic][6], PI[playerid][Lic][7]);

	format(strSkillGun, 16, "%i,%i,%i,%i,%i,%i,%i",
	PI[playerid][SkillGun][0], PI[playerid][SkillGun][1], PI[playerid][SkillGun][2], PI[playerid][SkillGun][3],
	PI[playerid][SkillGun][4], PI[playerid][SkillGun][5], PI[playerid][SkillGun][6]);

	query = "UPDATE "T_PLAYER" SET ";
    acc_int_strcat(query, sizeof(query), "ID", PI[playerid][ID]);
    acc_str_strcat(query, sizeof(query), "Name", GetName(playerid));
    acc_int_strcat(query, sizeof(query), "Status", PI[playerid][Status]);
    acc_int_strcat(query, sizeof(query), "Sex", PI[playerid][Sex]);
    acc_int_strcat(query, sizeof(query), "Spawn", PI[playerid][Spawn]);
    acc_float_strcat(query, sizeof(query), "PosX", PI[playerid][Pos][0]);
    acc_float_strcat(query, sizeof(query), "PosY", PI[playerid][Pos][1]);
    acc_float_strcat(query, sizeof(query), "PosZ", PI[playerid][Pos][2]);
    acc_float_strcat(query, sizeof(query), "PosA", PI[playerid][Pos][3]);
    acc_int_strcat(query, sizeof(query), "Int", PI[playerid][Int]);
    acc_int_strcat(query, sizeof(query), "World", PI[playerid][World]);
    acc_int_strcat(query, sizeof(query), "Skin", PI[playerid][Skin]);
    acc_int_strcat(query, sizeof(query), "Age", PI[playerid][Age]);
    acc_int_strcat(query, sizeof(query), "Satiety", PI[playerid][Satiety]);
    acc_int_strcat(query, sizeof(query), "Job", PI[playerid][Job]);
    acc_int_strcat(query, sizeof(query), "GameTime", PI[playerid][GameTime]);
    acc_float_strcat(query, sizeof(query), "Health", health);
    acc_int_strcat(query, sizeof(query), "Zakon", PI[playerid][Zakon]);
    acc_int_strcat(query, sizeof(query), "Wanted", PI[playerid][Wanted]);
    acc_int_strcat(query, sizeof(query), "Voenik", PI[playerid][Voenik]);
    acc_str_strcat(query, sizeof(query), "Lic", lic);
    acc_int_strcat(query, sizeof(query), "Poshlina", PI[playerid][Poshlina]);
    acc_int_strcat(query, sizeof(query), "Pasport", PI[playerid][Pasport]);
    acc_int_strcat(query, sizeof(query), "Phone", PI[playerid][Phone]);
    acc_int_strcat(query, sizeof(query), "SimCard", PI[playerid][SimCard]);
    acc_int_strcat(query, sizeof(query), "PhoneMoney", PI[playerid][PhoneMoney]);
    acc_int_strcat(query, sizeof(query), "Frac", PI[playerid][Frac]);
    acc_int_strcat(query, sizeof(query), "FracLeader", PI[playerid][FracLeader]);
    acc_int_strcat(query, sizeof(query), "FracSkin", PI[playerid][FracSkin]);
    acc_int_strcat(query, sizeof(query), "FracRang", PI[playerid][FracRang]);
    acc_int_strcat(query, sizeof(query), "FracWarn", PI[playerid][FracWarn]);
    acc_int_strcat(query, sizeof(query), "ShtrafPPS", PI[playerid][ShtrafPPS]);
    acc_int_strcat(query, sizeof(query), "ShtrafDPS", PI[playerid][ShtrafDPS]);
    acc_int_strcat(query, sizeof(query), "Vip", PI[playerid][Vip]);
    acc_int_strcat(query, sizeof(query), "Mute", PI[playerid][Mute]);
    acc_int_strcat(query, sizeof(query), "MuteTime", PI[playerid][MuteTime]);
    acc_int_strcat(query, sizeof(query), "Jail", PI[playerid][Jail]);
    acc_int_strcat(query, sizeof(query), "JailTime", PI[playerid][JailTime]);
    acc_int_strcat(query, sizeof(query), "Warn", PI[playerid][Warn]);
    acc_int_strcat(query, sizeof(query), "Family", PI[playerid][Family]);
	acc_str_strcat(query, sizeof(query), "SkillGun", strSkillGun); //

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query), "%s WHERE `ID` = %d", query, PI[playerid][ID]);
	mysql_tquery(mysql, query);
	return 1;
}

// Система - Паспорта
stock SavePasport(playerid)
{
	new query[512], p = playerid;
	if(!PlayerLogin[p]) return 1;
	{
		query = "UPDATE "T_PASPORT" SET ";
		acc_int_strcat(query, sizeof(query), "pasSeria", PsI[p][pasSeria]);
		acc_int_strcat(query, sizeof(query), "pasNumber", PsI[p][pasNumber]);
		acc_str_strcat(query, sizeof(query), "pasData", PsI[p][pasData]);
		acc_str_strcat(query, sizeof(query), "pasGorod", PsI[p][pasGorod]);
		acc_str_strcat(query, sizeof(query), "pasDataRojdenia", PsI[p][pasDataRojdenia]);

		strdel(query, strlen(query)-1, strlen(query));
		format(query,sizeof(query),"%s WHERE `pasName` = '%s' LIMIT 1", query, PsI[p][pasName]);
		mysql_query(mysql, query);
	}
	return 1;
}
//

stock SaveAdmin(playerid) //
{
    new query[1024], admin_Setting[32];

	format(admin_Setting, 32, "%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i",
	AI[playerid][aSetting][0], AI[playerid][aSetting][1], AI[playerid][aSetting][2], AI[playerid][aSetting][3],
	AI[playerid][aSetting][4], AI[playerid][aSetting][5], AI[playerid][aSetting][6], AI[playerid][aSetting][7],
	AI[playerid][aSetting][8], AI[playerid][aSetting][9], AI[playerid][aSetting][10], AI[playerid][aSetting][11]);

	query = "UPDATE "T_ADMIN" SET ";
    acc_int_strcat(query, sizeof(query), "aNumber", AI[playerid][aNumber]);
    acc_str_strcat(query, sizeof(query), "aName", AI[playerid][aName]);
    acc_str_strcat(query, sizeof(query), "aPassword", AI[playerid][aPassword]);
    acc_int_strcat(query, sizeof(query), "aLevel", GetAdmin(playerid));
    acc_str_strcat(query, sizeof(query), "aData", AI[playerid][aData]);
    acc_str_strcat(query, sizeof(query), "aPutName", AI[playerid][aPutName]);
    acc_str_strcat(query, sizeof(query), "aDataVhod", AI[playerid][aDataVhod]);
    acc_str_strcat(query, sizeof(query), "aPrefix", AI[playerid][aPrefix]);
    acc_int_strcat(query, sizeof(query), "aReputacion", AI[playerid][aReputacion]);
    acc_int_strcat(query, sizeof(query), "aWarn", AI[playerid][aWarn]);
    acc_str_strcat(query, sizeof(query), "aSetting", admin_Setting);
    acc_int_strcat(query, sizeof(query), "aBlock", AI[playerid][aBlock]);

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query),"%s WHERE `aID` = %d", query, AI[playerid][aID]);
	mysql_query(mysql, query);
	return 1;
}

stock SaveFrac(frac)
{
	new query[2048];
	query = "update "T_FRAC" set ";
	acc_str_strcat(query, sizeof(query), "fName", FracI[frac][fName]);
	acc_str_strcat(query, sizeof(query), "fLeader", FracI[frac][fLeader]);
	acc_int_strcat(query, sizeof(query), "fBank", FracI[frac][fBank]);
	acc_int_strcat(query, sizeof(query), "fMembers", FracI[frac][fMembers]);
	acc_float_strcat(query, sizeof(query), "fPosEnterX", FracI[frac][fPosEnter][0]);
	acc_float_strcat(query, sizeof(query), "fPosEnterY", FracI[frac][fPosEnter][1]);
	acc_float_strcat(query, sizeof(query), "fPosEnterZ", FracI[frac][fPosEnter][2]);
	acc_float_strcat(query, sizeof(query), "fPosEnterA", FracI[frac][fPosEnter][3]);

	acc_float_strcat(query, sizeof(query), "fPosExitX", FracI[frac][fPosExit][0]);
	acc_float_strcat(query, sizeof(query), "fPosExitY", FracI[frac][fPosExit][1]);
	acc_float_strcat(query, sizeof(query), "fPosExitZ", FracI[frac][fPosExit][2]);
	acc_float_strcat(query, sizeof(query), "fPosExitA", FracI[frac][fPosExit][3]);

	acc_float_strcat(query, sizeof(query), "fPosSpawnX", FracI[frac][fPosSpawn][0]);
	acc_float_strcat(query, sizeof(query), "fPosSpawnY", FracI[frac][fPosSpawn][1]);
	acc_float_strcat(query, sizeof(query), "fPosSpawnZ", FracI[frac][fPosSpawn][2]);
	acc_float_strcat(query, sizeof(query), "fPosSpawnA", FracI[frac][fPosSpawn][3]);

	acc_float_strcat(query, sizeof(query), "fPosSkinX", FracI[frac][fPosSkin][0]);
	acc_float_strcat(query, sizeof(query), "fPosSkinY", FracI[frac][fPosSkin][1]);
	acc_float_strcat(query, sizeof(query), "fPosSkinZ", FracI[frac][fPosSkin][2]);

	if(frac != FRAC_OPGB || frac != FRAC_OPGY || frac != FRAC_MAFIAH || frac != FRAC_MAFIAR)
	{
		acc_float_strcat(query, sizeof(query), "fPosInfoX", FracI[frac][fPosInfo][0]);
		acc_float_strcat(query, sizeof(query), "fPosInfoY", FracI[frac][fPosInfo][1]);
		acc_float_strcat(query, sizeof(query), "fPosInfoZ", FracI[frac][fPosInfo][2]);
	}
	acc_float_strcat(query, sizeof(query), "fPosGunX", FracI[frac][fPosGun][0]);
	acc_float_strcat(query, sizeof(query), "fPosGunY", FracI[frac][fPosGun][1]);
	acc_float_strcat(query, sizeof(query), "fPosGunZ", FracI[frac][fPosGun][2]);

	acc_float_strcat(query, sizeof(query), "fPosLoadGunX", FracI[frac][fPosLoadGun][0]);
	acc_float_strcat(query, sizeof(query), "fPosLoadGunY", FracI[frac][fPosLoadGun][1]);
	acc_float_strcat(query, sizeof(query), "fPosLoadGunZ", FracI[frac][fPosLoadGun][2]);

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query),"%s where `fID` = '%i' LIMIT 1", query,  FracI[frac][fID]);
	mysql_query(mysql, query);
}

stock SaveCarFrac(carid)
{
	new query[2048];
	query = "update "T_CARFRAC" set ";

	acc_int_strcat(query, sizeof(query), "fcFrac", FC[carid][fcFrac]);
	acc_int_strcat(query, sizeof(query), "fcRang", FC[carid][fcRang]);
	acc_int_strcat(query, sizeof(query), "fcModel", FC[carid][fcModel]);
	acc_int_strcat(query, sizeof(query), "fcInt", FC[carid][fcInt]);
	acc_int_strcat(query, sizeof(query), "fcWorld", FC[carid][fcWorld]);
	acc_int_strcat(query, sizeof(query), "fcPrice", FC[carid][fcPrice]);
	acc_float_strcat(query, sizeof(query), "fcPosX", FC[carid][fcPos][0]);
	acc_float_strcat(query, sizeof(query), "fcPosY", FC[carid][fcPos][1]);
	acc_float_strcat(query, sizeof(query), "fcPosZ", FC[carid][fcPos][2]);
	acc_float_strcat(query, sizeof(query), "fcPosA", FC[carid][fcPos][3]);
	acc_int_strcat(query, sizeof(query), "fcLock", FC[carid][fcLock]);
	acc_float_strcat(query, sizeof(query), "fcFuel", FC[carid][fcFuel]);
	acc_float_strcat(query, sizeof(query), "fcHealth", FC[carid][fcHealth]);
	acc_int_strcat(query, sizeof(query), "fcColor1", FC[carid][fcColor][0]);
	acc_int_strcat(query, sizeof(query), "fcColor2", FC[carid][fcColor][1]);
	acc_int_strcat(query, sizeof(query), "fcPaintJob", FC[carid][fcPaintJob]);
	acc_int_strcat(query, sizeof(query), "fcSirena", FC[carid][fcSirena]);

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query),"%s where `fcID` = '%i' LIMIT 1", query, FC[carid][fcID]);
	mysql_query(mysql, query);
	return 1;
}

stock SaveCarTaxi(carid)
{
	new query[2048];
	query = "update "T_TAXOPARK_CARS" set ";

	acc_int_strcat(query, sizeof(query), "tcKlass", TC[carid][tcKlass]);
	acc_int_strcat(query, sizeof(query), "tcModel", TC[carid][tcModel]);
	acc_int_strcat(query, sizeof(query), "tcColor1", TC[carid][tcColor][0]);
	acc_int_strcat(query, sizeof(query), "tcColor2", TC[carid][tcColor][1]);
	acc_float_strcat(query, sizeof(query), "tcPosX", TC[carid][tcPos][0]);
	acc_float_strcat(query, sizeof(query), "tcPosY", TC[carid][tcPos][1]);
	acc_float_strcat(query, sizeof(query), "tcPosZ", TC[carid][tcPos][2]);
	acc_float_strcat(query, sizeof(query), "tcPosA", TC[carid][tcPos][3]);
	acc_int_strcat(query, sizeof(query), "tcInt", TC[carid][tcInt]);
	acc_int_strcat(query, sizeof(query), "tcWorld", TC[carid][tcWorld]);
	acc_int_strcat(query, sizeof(query), "tcLock", TC[carid][tcLock]);
	acc_float_strcat(query, sizeof(query), "tcHealth", TC[carid][tcHealth]); //
	acc_float_strcat(query, sizeof(query), "tcFuel", TC[carid][tcFuel]); //
	acc_float_strcat(query, sizeof(query), "tcMilige", TC[carid][tcMilige]);

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query),"%s where `tcID` = '%i' LIMIT 1", query, TC[carid][tcID]);
	mysql_query(mysql, query);
	return 1;
}

stock CheckOnline(playerid, bool: online)
{
	new string[124];
	string_f("UPDATE "T_ACC_S" SET `acOnline` = %i WHERE `acLogin` = '%s' LIMIT 1", _:online, AcI[playerid][acLogin]);
	mysql_query(mysql, string);
	return 1;
}

stock SavePlayerCards(playerid)
{
	new query[1024];
	query = "update "T_BANK_CARDS" set ";

	strdel(query, strlen(query)-1, strlen(query));
	format(query,sizeof(query),"%s where `bpcID` = '%i' LIMIT 1", query, BPC[playerid][bpcID]);
	mysql_query(mysql, query);
	return 1;
}
// ============================== [ Стоки прочие ] ========================== //

stock IsPlayerStream(Float:radi, playerid, targetid, spec = 0)
{
	if(!IsPlayerConnected(playerid)) return 0;
    if(!IsPlayerConnected(targetid)) return 0;
	new Float:X, Float:Y, Float:Z;
	if(spec)
    {
	    if(GetPlayerState(playerid) == 9) return 0;
	    if(GetPlayerState(targetid) == 9) return 0;
    }
    if(!GetPlayerPos(targetid, X, Y, Z)) return 0;
	if(!IsPlayerInRangeOfPoint(playerid, radi, X, Y, Z)) return 0;
	return 1;
}

// Зеленная зона
stock CreateGreenZones()
{
	for(new idx; idx < sizeof GreenZone; idx ++)
	{
		GreenZone[idx][GZ_AREA] = CreateDynamicRectangle(GreenZone[idx][GZ_MIN_X], GreenZone[idx][GZ_MIN_Y], GreenZone[idx][GZ_MAX_X], GreenZone[idx][GZ_MAX_Y]);
		TOTALGZ = idx;
	}
	return printf("-> Зеленные зоны загружены: %i\n", TOTALGZ);
}
//

stock GetPlayerID(names[])
{
	foreach(new i: Player)
	{
		if(strcmp(GetName(i), names, true, strlen(names)) == 0) return i;
	}
	return INVALID_PLAYER_ID;
}

// Транспорт
stock IsVehicleOccupied(vehicleid)
{
    foreach(new i : Player) if(IsPlayerInVehicle(i,vehicleid)) return 1;
    return 0;
}

stock IsAVelik(vehicleid) // Транспорт велосмпеды
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 481, 509, 510: return 1;
		default: return 0;
	}
	return 0;
}

stock IsAMoped(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 448, 461, 462, 463, 468, 471, 521, 522, 523, 581, 586: return 1;
		default: return 0;
	}
	return 0;
}

stock IsAVoda(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 430,446,452,453,454,472,473,484,493: return 1;
		default: return 0;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 417, 425, 447, 469, 487, 488, 497, 548, 563, 460, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
		default: return 0;
	}
	return 0;
}

stock IsABus(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 413,414,431,437,483,498: return 1;
		default: return 0;
	}
	return 0;
}

stock IsAGruz(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 403,406,407,408,433,443,455,456,459,486,499,514,515,524,530,532,544: return 1;
		default: return 0;
	}
	return 0;
}

stock IsACar(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 400,401,402,404,405,409,410,411,412,413,414,415,416,418,419,
		420,421,422,423,424,426,427,429,434,436,438,439,440,442,444,445,451,457,
		458,459,466,467,470,474,475,477,478,479,480,482,485,489,490,491,492,
		494,495,496,498,499,500,502,503,504,505,506,507,508,516,517,518,525,
		526,527,528,529,531,533,534,535,536,539,540,541,542,543,544,545,546,
		547,549,550,551,552,554,555,556,557,558,559,560,561,562,564,565,566,
		567,568,571,572,573,574,575,576,578,579,580,582,583,585,587,588,589,
		596,597,598,599,600,601,602,603,604,605,609: return 1;  // Грузовые и спец техника
		default: return 0;
	}
	return 0;
}

stock IsACarAll(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case
		400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,418,419,
		420,421,422,423,424,426,427,429,431,434,436,437,438,439,440,442,444,445,451,457,
		458,459,466,467,470,474,475,477,478,479,480,482,483,485,489,490,491,492,
		494,495,496,498,500,502,503,504,505,506,507,508,516,517,518,525,
		526,527,528,529,531,533,534,535,536,539,540,541,542,543,545,546,
		547,549,550,551,552,554,555,556,557,558,559,560,561,562,564,565,566,
		567,568,571,572,573,574,575,576,578,579,580,582,583,585,587,588,589,
		596,597,598,599,600,601,602,603,604,605,609, // Водный транспорт
		448,461,462,463,468,471,521,522,523, // Мотоцыклы и мопеды
		433,443,455,456,486,499,514,515,524,532,544: return 1;  // Грузовые и спец техника
		default: return 0;
	}
	return 0;
}

stock ExitCar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	else ClearAnimations(playerid, true);
	return 1;
}

stock SetEngine(carid, bool:status)
{
	if(carid == INVALID_VEHICLE_ID) return 0;
	{
		GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(!IsAVelik(carid)) VehicleInfo[carid][vEngine] = status;
		SetVehicleParamsEx(carid, status, lights, alarm, doors, bonnet, boot, objective);
		if(!status)
		{
			SetLights(carid, false);
			KillTimer(UpdateFuel[carid]);
			// VehicleInfo[carid][vLimit]
		}
		else UpdateFuel[carid] = SetTimerEx("Update_Fuel", 20*1000, false, "i", carid);
	}
	return status;
}

stock SetLights(carid, bool:status)
{
	if(carid == INVALID_VEHICLE_ID) return 0;
	{
		GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
		VehicleInfo[carid][vLights] = status;
		SetVehicleParamsEx(carid, engine, status, alarm, doors, bonnet, boot, objective);
	}
	return status;
}

stock SetLock(carid, bool:status)
{
	if(carid == INVALID_VEHICLE_ID) return 0;
	{
		GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
		VehicleInfo[carid][vDoors] = status;
		SetVehicleParamsEx(carid, engine, lights, alarm, status, bonnet, boot, objective);
	}
	return status;
}

stock GetEngine(carid) return VehicleInfo[carid][vEngine];
stock GetLights(carid) return VehicleInfo[carid][vLights];
stock GetDoors(carid) return VehicleInfo[carid][vDoors];

stock GetCarKapot(vehicleid, &Float:x, &Float:y, &Float:z, &Float:a) //
{
	new Float:distance;
    GetVehicleModelInfo(GetVehicleModel(vehicleid), 1, x, distance, z);
    distance = distance/2 + 0.1;
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, a);
    x -= (distance * floatsin(-a+180, degrees));
    y -= (distance * floatcos(-a+180, degrees));
    return 1;
}

stock GetCarBagajnik(vehicleid, &Float:x, &Float:y, &Float:z) //
{
	new Float:angle,Float:distance;
    GetVehicleModelInfo(GetVehicleModel(vehicleid), 1, x, distance, z);
    distance = distance/2 + 0.1;
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, angle);
	switch(GetVehicleModel(vehicleid))
	{
		case 406:
		{
			x += (distance * floatsin(-angle+180, degrees));
			y += (distance * floatcos(-angle+180, degrees));
		}
		default:
		{
			x += (distance * floatsin(-angle+180, degrees));
			y += (distance * floatcos(-angle+180, degrees));
		}
	}
    return 1;
}

stock VehicleSpeed(carid) // Обновление скорости у транспорта
{
	new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(carid,X,Y,Z);
	return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 180.0);
	/*
	new Float: velocity_x, Float: velocity_y, Float: velocity_z;
	GetVehicleVelocity(vehicleid, velocity_x, velocity_y, velocity_z);
	if(floatround(VectorSize(velocity_x, velocity_y, velocity_z) * 100.0) >= max_speed)
	SetVehicleVelocity(vehicleid, velocity_x*0.97, velocity_y*0.97, velocity_z);*/
}

stock AddStaticVehicleFrac(model, frac, fracrang, Float:x, Float:y, Float:z, Float:a, color1, color2, spawntime = 1200, health = 1000, addsiren = 0)
{
    new carid = J_AddStaticVehicleEx(model, x, y, z, a, color1, color2, spawntime, health, addsiren);
    VehicleInfo[carid][vFrac] = frac;
    VehicleInfo[carid][vFracRang] = fracrang;
    VehicleInfo[carid][vColor1] = color1;
    VehicleInfo[carid][vColor2] = color2;
	return carid;
}

stock AddStaticVehicleJob(model, jobs, Float:x, Float:y, Float:z, Float:a, color1, color2, spawntime = 300, health = 1000, addsiren = 0)
{
    new carid = J_AddStaticVehicleEx(model, x, y, z, a, color1, color2, spawntime, health, addsiren);
    VehicleInfo[carid][vJobs] = jobs;
	return carid;
}

stock AddStaticVehicleRent(model, rend_pay, Float:x, Float:y, Float:z, Float:a, color1, color2, spawntime = 300, health = 1000, addsiren = 0)
{
    new carid = J_AddStaticVehicleEx(model, x, y, z, a, color1, color2, spawntime, health, addsiren);
    VehicleInfo[carid][vRent] = true;
    VehicleInfo[carid][vRentPay] = rend_pay;
	return carid;
}

stock J_AddStaticVehicleEx(model, Float:x, Float:y, Float:z, Float:a, color1, color2, spawntime = 300, health = 1000, addsiren = 0, interior = 0, world = 0)
{
	new carid = AddStaticVehicleEx(model, x, y, z, a, color1, color2, spawntime, addsiren);
	VehicleInfo[carid][vModel] = model;
	VehicleInfo[carid][vPosX] = x;
	VehicleInfo[carid][vPosY] = y;
	VehicleInfo[carid][vPosZ] = z;
	VehicleInfo[carid][vPosA] = a;
	VehicleInfo[carid][vColor1] = color1;
	VehicleInfo[carid][vColor2] = color2;
	VehicleInfo[carid][vSpawnTime] = spawntime;
	VehicleInfo[carid][vFuel] = VehStats[carid][vMaxFuel];
	SetVehicleNumberPlate(carid, "{000000}Redwich TC");
	VehicleInfo[carid][vJobs] = 0;
	VehicleInfo[carid][vFrac] = 0;
    VehicleInfo[carid][vFracRang] = 0;
    VehicleInfo[carid][vSpeed] = 0;
    VehicleInfo[carid][vSpeedOn] = false;
    VehicleInfo[carid][vPlayer] = -1;
	VehicleInfo[carid][vRent] = false;
	VehicleInfo[carid][vRentPay] = 0;
	VehicleInfo[carid][vRentID] = INVALID_PLAYER_ID;

	// SetLock(carid, false);
	VehicleInfo[carid][vHealth] = health;
	LinkVehicleToInterior(carid, interior);
	SetVehicleVirtualWorld(carid, world);
	switch(model)
	{
		case 430, 446, 452, 453, 454, 472, 473, 484, 493: VehicleInfo[carid][vState] = 4;
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593:  VehicleInfo[carid][vState] = 3;
		case 581, 522, 461, 521, 523, 463, 468, 471, 586: VehicleInfo[carid][vState] = 1;
		case 509, 481, 510: VehicleInfo[carid][vState] = 2;
		case 462,448: VehicleInfo[carid][vState] = 5;
		case 538, 537: VehicleInfo[carid][vState] = 6;
		default: VehicleInfo[carid][vState] = 0;
	}
	SetVehicleToRespawn(carid);
	return carid;
}
//

stock FreezePlayer(playerid, time) return TogglePlayerControllable(playerid, false), SetTimerEx("FreezeOff", time, false, "i", playerid);
publics FreezeOff(playerid) return Freeze(playerid, true);

stock SetString(param_1[], param_2[], size = 300) return strmid(param_1, param_2, 0, strlen(param_2), size); // Задаем параметры

stock GetString(param1[],param2[]) return !strcmp(param1, param2, false); // Узнаем параметры

stock Tkick(playerid)
{
	SetTimerEx("KickExx", 100, false, "d", playerid);
	return SCM(playerid, 0xFF0000AA, !"Нажмите F6 и введите: /q (/quit) для выхода из игры.");
}
publics KickExx(playerid) return Kick(playerid);

stock ConvertTime(number)
{
 	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	/*
	if(hours > 0) format(string, 30, "%02d:%02d:%02d", hours, mins, secs);
	else if(mins > 0) format(string, 30, "%02d:%02d", mins, secs);
	else if(secs > 0) format(string, 30, "%02d сек.", secs);
	*/

	if(hours > 0) format(string, 30, "%02d ч. %02d м. %02d с.", hours, mins, secs);
	else if(mins > 0) format(string, 30, "%02d м. %02d с.", mins, secs);
	else if(secs > 0) format(string, 30, "%02d с.", secs);
	return string;
}

stock getDayEx()
{
    new w = gettime(), saturday = 1310155200, day_week;
	while(w - saturday > 60 * 60 * 24)
    {
        w -= 60 * 60 * 24;
        day_week ++;
    }
    while(day_week >= 7) day_week -= 7;
	return day_week;
}

stock GiveExp(playerid, exp)
{
	PI[playerid][Exp] += exp;
	new needexp = (PI[playerid][Level]+1)*8;
	new buffer = PI[playerid][Exp]-needexp;
	if(PI[playerid][Exp] >= needexp)
	{
	    PI[playerid][Exp] = 0;
		if(buffer > 0) PI[playerid][Exp] += buffer;
		PI[playerid][Level] ++;
		SetPlayerScore(playerid, PI[playerid][Level]);
		FSCM(playerid, cGREEN, "Вы уровень повысился до %d.", PI[playerid][Level]);
	}
	update_int_mysql(T_PLAYER, "Exp", PI[playerid][Exp], "ID", PI[playerid][ID]);
	update_int_mysql(T_PLAYER, "Level", PI[playerid][Level], "ID", PI[playerid][ID]);
	return 1;
}

stock GiveMoney(playerid, money)
{
	new string[64];
	GetMoney(playerid) += money;
	GivePlayerMoney(playerid, GetMoney(playerid));
	if(money>0) string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~ +%s рублей", ConvertCash(money));
	else string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~ %s рублей", ConvertCash(money));
	GameTextForPlayer(playerid, string, 3000, 3);
	update_int_mysql(T_PLAYER, "Money", GetMoney(playerid), "ID", PI[playerid][ID]);
	return 1;
}

stock GiveDonat(playerid, donat)
{
	new string[64];
	PI[playerid][Donat] += donat;
	if(donat>0) string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~ +%s R-Coins", ConvertCash(donat));
	else string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~ %s R-Coins", ConvertCash(donat));
	GameTextForPlayer(playerid, string, 3000, 3);
	update_int_mysql(T_PLAYER, "Donat", PI[playerid][Donat], "ID", PI[playerid][ID]);
	return 1;
}

stock GiveBank(playerid, money)
{
	new string[64];
	GetBank(playerid) += money;
	if(money>0) string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~BANK: +%s рублей", ConvertCash(money));
	else string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~BANK: -%s рублей", ConvertCash(money));
	GameTextForPlayer(playerid, string, 3000, 3);
	update_int_mysql(T_PLAYER, "Bank", GetBank(playerid), "ID", PI[playerid][ID]);
	return 1;
}

stock GiveHealth(playerid, Float: hp)
{
	new string[64];
	PI[playerid][Health] += hp;
	if(hp>0) string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~HP: +%.1f HP", hp);
	else string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~HP: %.1f HP", hp);
	GameTextForPlayer(playerid, string, 3000, 3);
	update_float_mysql(T_PLAYER, "Health", PI[playerid][Health], "ID", PI[playerid][ID]);
	return 1;
}

stock ConvertCash(value)
{
    new string[24];
    format(string,sizeof(string), "%d" ,value);
    for(new i = (strlen(string) - 3); i > (value < 0 ? 1 : 0); i -= 3 ) strins(string[i], ".", 0);
    return string;
}

stock RemoveServer(playerid) //
{
	PAYDAY =
	MostMove =
	StatusGateScahta =
	StatusShlakScahta =
	StatusShlakAdminZone =
	StatusGateAdminHouse =
	StatusGateZavod =
	StatusShlakAS =
	StatusGateDemorgan[playerid] = // Дверь деморгана
	StatusShlakBank_B =
	StatusShlakMechanic = // Шлакбаум работы - Механик
	StatusGateMechanic[0] = // Шлакбаум работы - Механик
	StatusGateMechanic[1] = // Ворота работы - Механик
	/* ============================================== [ Организации ] ============================================== */
	// 1 - АО
	// 2 - ППС
	StatusShlakPPS =
	// 3 - ДПС
	StatusShlakDPS =
	StatusGateDPS =
	// 4 - ФСБ
	StatusShlakFSB[0] =
	StatusShlakFSB[1] =
	StatusGateFSB =
	// 5 - ВЧ
	StatusShlakSkladVH =
	StatusGateVH[0] =
	StatusGateVH[1] =
	StatusDoorVH[0] =
	StatusDoorVH[1] =
	StatusDoorVH[2] =
	StatusDoorVH[3] =
	// 6 - СМП
	// 7 - СМИ
	// 8 - ОПГ-Б
	// 9 - ОПГ-Ю
	// 10 - Ч-Мафия
	// 11 - Р-Мафия
	/* ============================================================================================================= */
	false;

	MostShlakMove[0] =
	MostShlakMove[1] =
	true;

    PlayerLogin[playerid] =
	AdminLogin[playerid] =
	AdminGM[playerid] =
	StatusMapTP[playerid] =

	JobStatus[playerid][0] =
	JobStatus[playerid][1] =
	JobStatus[playerid][2] =

	UseGPS[playerid] =
	CheckAnims[playerid] =
	FrezePlayer[playerid] =
	PlayerDied[playerid] =
	StatusPhone[playerid] =
	StatusRemen[playerid] =
	//
	// Работа Лесоповал
	JobLesorub[playerid] =
	LesorubInstrument[playerid] =
	//
	false;

	// Работа Шахтера
	JobMine[playerid] =
	JobMineDrive[playerid] = false;
	//

	TimeInfo[playerid] = 0;

	for(i, MAX_FRAC) { FracDuty[playerid][i] = false; }

	// Работы
	for(i, 9) { JobDuty[playerid][i] = false; }
	//

	// Работа Шахтера
	PlayerMineral[playerid] =
	AllPlayerMineral[playerid] =
	0;

	// Работа Лесоруба
	AllPlayerDerevo[playerid] = 0;

	InviteLeader[playerid] =
	InviteFrac[playerid] =
	PlayerRent[playerid] =
	InviteFamily[playerid] = -1;

	TazerTime[playerid] =
	MedPland[playerid] =
	0;

    PasswordError[playerid] =
	AdminPasswordError[playerid] = 3;

	// Система Автосалона
	SelectCarKlass[playerid] = KlassCarID[playerid] = 0;
	SelectCarID[playerid] = INVALID_VEHICLE_ID;
	//

	// Система наручников
	pCuff[playerid][pCuffer] =
	pCuff[playerid][pCuffee] = INVALID_PLAYER_ID; //
	//

	// Система слежения за игроком
	SP[playerid][SpecID] = INVALID_PLAYER_ID;

	SP[playerid][SpecTimer] =
	SP[playerid][SpecWorld] =
	SP[playerid][SpecInt] =
	SP[playerid][SpecPing] =
	SP[playerid][SpecGun] =
	SP[playerid][SpecAmmo] = 0;
	//

	// Система подарков
	SerP[playerid][spID] = INVALID_PLAYER_ID;
	
	SerP[playerid][spName][0] = EOS;
	SerP[playerid][spCount] = 0;
	for(i, 30) { SerP[playerid][spStatus][i] = 0; }

	// Система мероприятий
	MP[mpName][0] =
	MP[mpAdmin][0] =
	MP[mpWinName][0] = EOS;

	MP[mpPlayerStatsus][playerid] =
	MP[mpTP] =
	MP[mpStatsus] = false;

	MP[mpTypePrize] =
	MP[mpSkin][0] =
	MP[mpSkin][1] = 0;

	MP[mpInt] =
	MP[mpWorld] =
	MP[mpGun] =
	MP[mpComands][playerid] =
	MP[mpPrize] =
	MP[mpOnline] =
	MP[mpTime] =
	MpWorld[playerid] =
	MpInt[playerid] = 0;

	MP[mpHealch] =
	MP[mpArmour] =
	MP[mpCord][0] =
	MP[mpCord][1] =
	MP[mpCord][2] =
	MP[mpCord][3] =
	MpCords[playerid][0] =
	MpCords[playerid][1] =
	MpCords[playerid][2] =
	MpCords[playerid][3] = 0.0;
	//

	AdminCarTD[playerid] = 0;

	return 1;
}

stock RemovePlayer(playerid) //
{
	Delete3DTextLabel(FamI[PI[playerid][Family]][famText]);

	FirstOpenCMD[playerid] = false;

	AcI[playerid][acLogin][0] =
	AcI[playerid][acPassword][0] =
	AcI[playerid][acEmail][0] =
	AcI[playerid][acReferal][0] =
	AcI[playerid][acRegIP][0] =
	AcI[playerid][acRegData][0] =
	AcI[playerid][acLastIP][0] =
	AcI[playerid][acLastData][0] =
	AcI[playerid][acVkID][0] =
	AcI[playerid][acGoogleCode][0] = EOS;

	AcI[playerid][acServer] =
	AcI[playerid][acCheckEmail] =
	AcI[playerid][acPinCode] =
	AcI[playerid][acStatusPin] =
	AcI[playerid][acStatusGoogle] =
	AcI[playerid][acTimeGameServer] =
	AcI[playerid][acDayGameServer] = 0;

	// Игрок
	PI[playerid][Skin] = -1;

	PI[playerid][Name][0] = EOS;

	PI[playerid][Poshlina] = false;


	for(i, 4) { PI[playerid][Pos][i] = 0; }

	PI[playerid][ID] =
	PI[playerid][Status] =
	PI[playerid][Sex] =
	PI[playerid][Int] =
	PI[playerid][World] =
	PI[playerid][Spawn] =
	PI[playerid][Age] =
	PI[playerid][Exp] =
	PI[playerid][Level] =
	PI[playerid][Satiety] =
	PI[playerid][Job] =
	PI[playerid][GameTime] =
	GetMoney(playerid) =
	GetBank(playerid) =
	PI[playerid][Donat] =
	PI[playerid][Zakon] =
	PI[playerid][Wanted] =
	PI[playerid][Voenik] =
	PI[playerid][Pasport] =
	PI[playerid][MedCard] =
	PI[playerid][Phone] =
	PI[playerid][SimCard] =
	PI[playerid][PhoneMoney] =
	PI[playerid][Frac] =
	PI[playerid][FracLeader] =
	PI[playerid][FracSkin] =
	PI[playerid][FracRang] =
	PI[playerid][FracWarn] =
	PI[playerid][ShtrafPPS] =
	PI[playerid][ShtrafDPS] =
	PI[playerid][Vip] =
	PI[playerid][Mute] =
	PI[playerid][MuteTime] =
	PI[playerid][Jail] =
	PI[playerid][JailTime] =
	PI[playerid][Warn] =
	PI[playerid][Family] = 0;
	// Лицензии
	for(i, 8) { PI[playerid][Lic][i] = 0; }
	for(i, 7) { PI[playerid][SkillGun][i] = 0; }
	//

	//
	PI[playerid][Pos][0] =
	PI[playerid][Pos][1] =
	PI[playerid][Pos][2] =
	PI[playerid][Pos][3] =
	PI[playerid][Health] = 0.0;
	//

	// Фулл админ
	FAI[playerid][faName][0] =
	FAI[playerid][faData][0] =
	FAI[playerid][faPutName][0] = EOS;
	//

	// админ
	AI[playerid][aName][0] =
	AI[playerid][aPassword][0] =
	AI[playerid][aData][0] =
	AI[playerid][aPutName][0] =
	AI[playerid][aDataVhod][0] =
	AI[playerid][aPrefix][0] = EOS;

	AI[playerid][aID] =
	AI[playerid][aNumber] =
	GetAdmin(playerid) =
	AI[playerid][aReputacion] =
	AI[playerid][aWarn] =
	AI[playerid][aBlock] = 0;

	for(i, 12) { AI[playerid][aSetting][i] = 0; }
	//

	// Система смерти
	DI[playerid][DeathID] = -1; //
	DI[playerid][DeathTime] = 0;
	DI[playerid][DeathStatus] = false; //
	DI[playerid][DeathPos][0] =  //
	DI[playerid][DeathPos][1] =  //
	DI[playerid][DeathPos][2] =  //
	DI[playerid][DeathPos][3] = 0.0; //
	//

	// Навоки работ
	JS[playerid][jID] = -1;
	JS[playerid][jName] = EOS;

	for(i, 10) { JS[playerid][jExp][i] = 0; }
	for(i, 10) { JS[playerid][jLevel][i] = 0; }
	//

	// Система бана игрока
	BanI[playerid][bName][0] =
	BanI[playerid][bAdmin][0] =
	BanI[playerid][bData][0] =
	BanI[playerid][bReason][0] =
	BanI[playerid][bUnBanData][0] = EOS;

	BanI[playerid][bDay] =
	BanI[playerid][bStatus] = 0;
	//

	// Система - Паспорта
	PsI[playerid][pasName][0] =
	PsI[playerid][pasData][0] =
	PsI[playerid][pasGorod][0] =
	PsI[playerid][pasDataRojdenia][0] = EOS;

	PsI[playerid][pasSeria] =
	PsI[playerid][pasNumber] = 0;
	//

	// Мед карта
	MC[playerid][mcID] = -1; // ID карты
	MC[playerid][mcStatus] = 0; // Диагноз
	MC[playerid][mcName][0] = // Имя пациента
	MC[playerid][mcData][0] =
	MC[playerid][mcDataClose][0] = EOS; //
	//

	return 1;
}

stock RemoveMP()
{
	// Обнуление МП
	foreach(new i: Player)
	{
	    if(!MP[mpPlayerStatsus][i]) continue;

		MP[mpName][0] =
		MP[mpAdmin][0] =
		MP[mpWinName][0] = EOS;

		MP[mpPlayerStatsus][i] =
		MP[mpTP] =
		MP[mpStatsus] = false;

		MP[mpTypePrize] =
		MP[mpSkin][0] =
		MP[mpSkin][1] =  0;

		MP[mpInt] =
		MP[mpWorld] =
		MP[mpGun] =
		MP[mpComands][i] =
		MP[mpPrize] =
		MP[mpOnline] =
		MP[mpTime] =
		MpWorld[i] =
		MpInt[i] = 0;

		MP[mpHealch] =
		MP[mpArmour] =
		MP[mpCord][0] =
		MP[mpCord][1] =
		MP[mpCord][2] =
		MP[mpCord][3] =
		MpCords[i][0] =
		MpCords[i][1] =
		MpCords[i][2] =
		MpCords[i][3] = 0.0;

		if(GetFrac(i))
		{
		    if(GetFrac(i) == FRAC_VH)
			{
			    FracDuty[i][GetFrac(i)] = true;
				SetPlayerSkin(i, GetFracSkin(i));
				SetPlayerColor(i, FracColor[GetFrac(i)]);
			}
			else
			{
			    if(FracDuty[i][GetFrac(i)]) SetPlayerSkin(i, GetFracSkin(i)), SetPlayerColor(i, FracColor[GetFrac(i)]);
			    else SetPlayerSkin(i, PI[i][Skin]), SetPlayerColor(i, cNone);
			    PI[i][Spawn] = 3;
			}
		}
		else if(!GetFrac(i)) SetPlayerSkin(i, PI[i][Skin]), SetPlayerColor(i, cNone);

	    PI[i][Spawn] = 1;
	    SetPlayerArmour(i, 0);
	    SpawnPlayer(i);
	}
	//
	return 1;
}

stock RemoveFullAdmin(id)
{
	new string[120];
	string[0]=EOS;
	string_f("DELETE FROM "T_FULL_ADMIN" WHERE `faName` = '%s'", FAI[id][faName]);
	mysql_query(mysql, string);

	FAI[id][faName][0] =
	FAI[id][faData][0] =
	FAI[id][faPutName][0] = EOS;

	FAI[id][faID] = -1;
	return Tkick(id);
}

stock RemoveAdmin(id)
{
	new string[120];
	string[0]=EOS;
	string_f("DELETE FROM "T_ADMIN" WHERE `aName` = '%s'", AI[id][aName]);
	mysql_query(mysql, string);

	SCM(id, cRED, "Вы были сняты со своей должности администратора!");

	if(AdminLogin[id]) AdminLogin[id] = false;

	AI[id][aName][0] =
	AI[id][aPassword][0] =
	AI[id][aData][0] =
	AI[id][aPutName][0] =
	AI[id][aDataVhod][0] =
	AI[id][aPrefix][0] = EOS;

	AI[id][aLevel] =
	AI[id][aReputacion] =
	AI[id][aWarn] =
	AI[id][aBlock] = 0;

	for(i, 12) { AI[id][aSetting][i] = 0; }
	return Tkick(id);
}

// Работа шахтера
stock MestaMinerals(playerid)
{
	if(JobMine[playerid])
	{
		if(!SI[sStatusVagon])
		{
			if(GetPVarInt(playerid, "StatusMine") == 1) // Добыча руды
			{
				new rand_coord = random(sizeof(ScahtaCP));
				SahtaPosCH[rand_coord] = SetPlayerCheckpoint(playerid, ScahtaCP[rand_coord][0], ScahtaCP[rand_coord][1], ScahtaCP[rand_coord][2], 1.5);
			}
			if(GetPVarInt(playerid, "StatusMine") == 2) // Загрузка в вагон
			{
				switch(random(4))
				{
					case 0: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1975.5459, 3427.2888, 1.5);
					case 1: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1972.0459, 3427.2888, 1.5);
					case 2: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1968.0459, 3427.2888, 1.5);
					case 3: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1963.5459, 3427.2888, 1.5);
				}
			}
			if(GetPVarInt(playerid, "StatusMine") == 5) // Перенос на склад
			{
				ScahtaSkladCP[0] = SetPlayerCheckpoint(playerid, 2640.5842, 1769.0028, 3426.0000, 1.5);
			}
		}
		else
		{
			if(GetPVarInt(playerid, "StatusMine") == 3) // Выгрузка вагона
			{
				switch(random(4))
				{
					case 0: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1808.5459, 3427.2888, 1.5);
					case 1: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1804.5459, 3427.2888, 1.5);
					case 2: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1800.5459, 3427.2888, 1.5);
					case 3: VagonCP[0] = SetPlayerCheckpoint(playerid, 2631.3430, 1796.5459, 3427.2888, 1.5);
				}
			}
			if(GetPVarInt(playerid, "StatusMine") == 4) // Перенос на склад
			{
				ScahtaSkladCP[0] = SetPlayerCheckpoint(playerid, 2640.5842, 1769.0028, 3426.0000, 1.5);
			}
		}
	}
	return 1;
}

//
stock UpdateHouse(idx)
{
	DestroyDynamicMapIcon(hMapIcon[idx]);
	DestroyDynamicPickup(hPicEnter[idx]);

	hMapIcon[idx] = CreateDynamicMapIcon(HI[idx][hExitPos][0], HI[idx][hExitPos][1], HI[idx][hExitPos][2], (GetString(HI[idx][hOwner],"The Stats")) ? (31) : (32), 0, -1, -1, -1, 15.0);

    hPicEnter[idx] = CreateDynamicPic((GetString(HI[idx][hOwner],"The Stats")) ? (1273) : (1272), 23, HI[idx][hExitPos][0], HI[idx][hExitPos][1], HI[idx][hExitPos][2]);

 	Delete3DTextLabel(hTextExit[idx]);
	hTextExit[idx] = Text3D:INVALID_3DTEXT_ID;

	new texthouse[15];
	format(texthouse, sizeof(texthouse), "Дом №%i", HI[idx][hID]);
	hTextExit[idx] = Create3DTextLabel(texthouse, cSERVER, HI[idx][hExitPos][0], HI[idx][hExitPos][1], HI[idx][hExitPos][2]+0.80, 15.0, 0, 1);

	new _c = HI[idx][hKlass], _i = HI[idx][hInt];
    hTextEnter[idx] = CreateDynamic3DTextLabel("Выход - "SERVER"'/exit'\n{FFFFFF}Управление домом - "SERVER"'/hmenu'", 0xFFFFFFFF, HintsInfo[_c][_i][hiEnterX], HintsInfo[_c][_i][hiEnterY], HintsInfo[_c][_i][hiEnterZ]+0.80, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HI[idx][hID], HintsInfo[_c][_i][hiInt]);
	return 1;
}
//

stock FracLeave(playerid)
{
    if(PI[playerid][FracLeader])
	{
		FSCM(playerid, -1, "Вас сняли с поста лидера организации ''%s''.", FracI[PI[playerid][Frac]][fName]);
	    SetString(FracI[PI[playerid][Frac]][fLeader], "The Stats");
		if(FracI[PI[playerid][Frac]][fMembers]!=0) FracI[PI[playerid][Frac]][fMembers]--;
	    update_str_mysql(T_FRAC, "fLeader", FracI[PI[playerid][Frac]][fLeader], "fID", FracI[PI[playerid][Frac]][fID]);
	 	if(FracDuty[playerid][GetFrac(playerid)])
	 	{
		 	FracDuty[playerid][GetFrac(playerid)] = false;
			ResetPlayerWeapons(playerid);
			SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);
		}
		PI[playerid][Frac] = PI[playerid][FracLeader] = PI[playerid][FracRang] = PI[playerid][FracWarn] = 0;
	    update_int_mysql(T_PLAYER, "Frac", 0, "ID", PI[playerid][ID]);
	    update_int_mysql(T_PLAYER, "FracLeader", 0, "ID", PI[playerid][ID]);
	    update_int_mysql(T_PLAYER, "FracRang", 0, "ID", PI[playerid][ID]);
	    update_int_mysql(T_PLAYER, "FracWarn", 0, "ID", PI[playerid][ID]);
	}
	else
	{
		new string[256];
		string_f("[R] %s %s покинул(-а) организацию по собственному желанию!", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
		SCMFrac(GetFrac(playerid), cWAR, string);

		string[0] = EOS;
		string_f("Уволен(-а) с должности %s. Причина: Собственное желание", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1]);
		SetTK(playerid, string);

		if(FracI[PI[playerid][Frac]][fMembers]!=0) FracI[PI[playerid][Frac]][fMembers]--;
	 	if(FracDuty[playerid][GetFrac(playerid)])
	 	{
		 	FracDuty[playerid][GetFrac(playerid)] = false;
			ResetPlayerWeapons(playerid);
			SetPlayerSkin(playerid, PI[playerid][Skin]), SetPlayerColor(playerid, cNone);
		}
		PI[playerid][Frac] = PI[playerid][FracRang] = PI[playerid][FracWarn] = 0;
	    update_int_mysql(T_PLAYER, "Frac", 0, "ID", PI[playerid][ID]);
	    update_int_mysql(T_PLAYER, "FracRang", 0, "ID", PI[playerid][ID]);
	    update_int_mysql(T_PLAYER, "FracWarn", 0, "ID", PI[playerid][ID]);
	}
	if(IsPlayerInAnyVehicle(playerid)) ExitCar(playerid);
	return 1;
}

stock FamilyLeave(playerid)
{
	if(PI[playerid][Family])
	{
	    FamI[PI[playerid][Family]][famMembers] --;
	    PI[playerid][Family] = 0;
		update_int_mysql(T_PLAYER, "Family", PI[playerid][Family], "ID", PI[playerid][ID]);
	}
	return 1;
}

// Антифлуд пикапом
stock CreatePic(modell, type, Float:X, Float:Y, Float:Z, virtualworld = -1)
{
    new TempID = CreatePickup(modell, type, X, Y, Z, virtualworld);
    PickuPI[TempID][PickX] = X;
    PickuPI[TempID][PickY] = Y;
    PickuPI[TempID][PickZ] = Z;
    return TempID;
}
stock CreateDynamicPic(modell, type, Float:X, Float:Y, Float:Z, virtualworld = -1, interior = -1)
{
    new TempID = CreateDynamicPickup(modell, type, X, Y, Z, virtualworld, interior);
    PickuPI[TempID][PickX] = X;
    PickuPI[TempID][PickY] = Y;
    PickuPI[TempID][PickZ] = Z;
    return TempID;
}
//

stock HospitalHealth(playerid)
{
    if(PlayerDied[playerid] == true)
    {
		if(PI[playerid][Health] < 100)
		{
			if(GetAdmin(playerid))
			{
				PI[playerid][Health] += 100;
				GameTextForPlayer(playerid,"~g~+100 HP",10000,4);
				SetPlayerHealth(playerid, PI[playerid][Health]);

				PlayerDied[playerid] = false;
				SCMInfo(playerid, "Курс лечения пройден!");
				SCMInfo(playerid, "Вы выписаны из больницы");
			}
			else if(PI[playerid][Vip])
			{
				PI[playerid][Health] += 4;
				GameTextForPlayer(playerid,"~g~+4 HP",10000,4);
				SetPlayerHealth(playerid, PI[playerid][Health]);
			}
			else
			{
				PI[playerid][Health] += 2;
				GameTextForPlayer(playerid,"~g~+2 HP",10000,4);
				SetPlayerHealth(playerid,PI[playerid][Health]);
			}
			//PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
		}
		else
		{
			PlayerDied[playerid] = false;
			SCMInfo(playerid, "Курс лечения пройден!");
			SCMInfo(playerid, "Вы выписаны из больницы");
		}
	}
	return 1;
}

stock LoadTextDraw()
{
	// Система GPS - Навигатора
	GPS[0] = TextDrawCreate(0.9998, 144.6295, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[0], 20.0000, 20.0000);
	TextDrawAlignment(GPS[0], 1);
	TextDrawColor(GPS[0], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[0], 255);
	TextDrawFont(GPS[0], 4);
	TextDrawSetProportional(GPS[0], 0);
	TextDrawSetShadow(GPS[0], 0);

	GPS[1] = TextDrawCreate(76.6668, 144.6295, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[1], 20.0000, 20.0000);
	TextDrawAlignment(GPS[1], 1);
	TextDrawColor(GPS[1], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[1], 255);
	TextDrawFont(GPS[1], 4);
	TextDrawSetProportional(GPS[1], 0);
	TextDrawSetShadow(GPS[1], 0);

	GPS[2] = TextDrawCreate(0.6665, 196.0665, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[2], 20.0000, 20.0000);
	TextDrawAlignment(GPS[2], 1);
	TextDrawColor(GPS[2], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[2], 255);
	TextDrawFont(GPS[2], 4);
	TextDrawSetProportional(GPS[2], 0);
	TextDrawSetShadow(GPS[2], 0);

	GPS[3] = TextDrawCreate(76.6668, 196.0666, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[3], 20.0000, 20.0000);
	TextDrawAlignment(GPS[3], 1);
	TextDrawColor(GPS[3], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[3], 255);
	TextDrawFont(GPS[3], 4);
	TextDrawSetProportional(GPS[3], 0);
	TextDrawSetShadow(GPS[3], 0);

	GPS[4] = TextDrawCreate(10.6665, 147.9481, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[4], 77.0000, 11.0000);
	TextDrawAlignment(GPS[4], 1);
	TextDrawColor(GPS[4], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[4], 255);
	TextDrawFont(GPS[4], 4);
	TextDrawSetProportional(GPS[4], 0);
	TextDrawSetShadow(GPS[4], 0);

	GPS[5] = TextDrawCreate(4.3332, 154.5850, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[5], 9.0000, 52.0000);
	TextDrawAlignment(GPS[5], 1);
	TextDrawColor(GPS[5], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[5], 255);
	TextDrawFont(GPS[5], 4);
	TextDrawSetProportional(GPS[5], 0);
	TextDrawSetShadow(GPS[5], 0);

	GPS[6] = TextDrawCreate(84.3335, 155.4147, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[6], 9.0000, 52.0000);
	TextDrawAlignment(GPS[6], 1);
	TextDrawColor(GPS[6], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[6], 255);
	TextDrawFont(GPS[6], 4);
	TextDrawSetProportional(GPS[6], 0);
	TextDrawSetShadow(GPS[6], 0);

	GPS[7] = TextDrawCreate(11.3331, 201.4592, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[7], 77.0000, 11.0000);
	TextDrawAlignment(GPS[7], 1);
	TextDrawColor(GPS[7], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[7], 255);
	TextDrawFont(GPS[7], 4);
	TextDrawSetProportional(GPS[7], 0);
	TextDrawSetShadow(GPS[7], 0);

	GPS[8] = TextDrawCreate(2.9998, 146.7035, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[8], 15.0000, 15.0000);
	TextDrawAlignment(GPS[8], 1);
	TextDrawColor(GPS[8], 808333055);
	TextDrawBackgroundColor(GPS[8], 255);
	TextDrawFont(GPS[8], 4);
	TextDrawSetProportional(GPS[8], 0);
	TextDrawSetShadow(GPS[8], 0);

	GPS[9] = TextDrawCreate(79.6668, 146.7035, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[9], 15.0000, 15.0000);
	TextDrawAlignment(GPS[9], 1);
	TextDrawColor(GPS[9], 808333055);
	TextDrawBackgroundColor(GPS[9], 255);
	TextDrawFont(GPS[9], 4);
	TextDrawSetProportional(GPS[9], 0);
	TextDrawSetShadow(GPS[9], 0);

	GPS[10] = TextDrawCreate(2.9998, 198.9703, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[10], 15.0000, 15.0000);
	TextDrawAlignment(GPS[10], 1);
	TextDrawColor(GPS[10], 808333055);
	TextDrawBackgroundColor(GPS[10], 255);
	TextDrawFont(GPS[10], 4);
	TextDrawSetProportional(GPS[10], 0);
	TextDrawSetShadow(GPS[10], 0);

	GPS[11] = TextDrawCreate(79.6668, 198.9703, "LD_BEAT:chit"); // пусто
	TextDrawTextSize(GPS[11], 15.0000, 15.0000);
	TextDrawAlignment(GPS[11], 1);
	TextDrawColor(GPS[11], 808333055);
	TextDrawBackgroundColor(GPS[11], 255);
	TextDrawFont(GPS[11], 4);
	TextDrawSetProportional(GPS[11], 0);
	TextDrawSetShadow(GPS[11], 0);

	GPS[12] = TextDrawCreate(10.6665, 149.1925, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[12], 77.0000, 8.0000);
	TextDrawAlignment(GPS[12], 1);
	TextDrawColor(GPS[12], 808333055);
	TextDrawBackgroundColor(GPS[12], 255);
	TextDrawFont(GPS[12], 4);
	TextDrawSetProportional(GPS[12], 0);
	TextDrawSetShadow(GPS[12], 0);

	GPS[13] = TextDrawCreate(5.6664, 155.4147, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[13], 5.0000, 50.0000);
	TextDrawAlignment(GPS[13], 1);
	TextDrawColor(GPS[13], 808333055);
	TextDrawBackgroundColor(GPS[13], 255);
	TextDrawFont(GPS[13], 4);
	TextDrawSetProportional(GPS[13], 0);
	TextDrawSetShadow(GPS[13], 0);

	GPS[14] = TextDrawCreate(87.3334, 154.5851, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[14], 5.0000, 51.0000);
	TextDrawAlignment(GPS[14], 1);
	TextDrawColor(GPS[14], 808333055);
	TextDrawBackgroundColor(GPS[14], 255);
	TextDrawFont(GPS[14], 4);
	TextDrawSetProportional(GPS[14], 0);
	TextDrawSetShadow(GPS[14], 0);

	GPS[15] = TextDrawCreate(10.3332, 203.5333, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[15], 77.0000, 8.0000);
	TextDrawAlignment(GPS[15], 1);
	TextDrawColor(GPS[15], 808333055);
	TextDrawBackgroundColor(GPS[15], 255);
	TextDrawFont(GPS[15], 4);
	TextDrawSetProportional(GPS[15], 0);
	TextDrawSetShadow(GPS[15], 0);

	GPS[16] = TextDrawCreate(5.6664, 155.4147, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[16], 84.0000, 49.0000);
	TextDrawAlignment(GPS[16], 1);
	TextDrawColor(GPS[16], 808333055);
	TextDrawBackgroundColor(GPS[16], 255);
	TextDrawFont(GPS[16], 4);
	TextDrawSetProportional(GPS[16], 0);
	TextDrawSetShadow(GPS[16], 0);

	GPS[17] = TextDrawCreate(48.9999, 148.9333, "GPS - Навигатор"); // пусто
	TextDrawLetterSize(GPS[17], 0.2123, 1.2349);
	TextDrawTextSize(GPS[17], 0.0000, 83.0000);
	TextDrawAlignment(GPS[17], 2);
	TextDrawColor(GPS[17], -1);
	TextDrawBackgroundColor(GPS[17], 255);
	TextDrawFont(GPS[17], 2);
	TextDrawSetProportional(GPS[17], 1);
	TextDrawSetShadow(GPS[17], 0);

	GPS[18] = TextDrawCreate(5.3330, 161.2221, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[18], 87.0000, 1.0000);
	TextDrawAlignment(GPS[18], 1);
	TextDrawColor(GPS[18], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[18], 255);
	TextDrawFont(GPS[18], 4);
	TextDrawSetProportional(GPS[18], 0);
	TextDrawSetShadow(GPS[18], 0);

	GPS[19] = TextDrawCreate(9.6665, 193.5776, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[19], 2.0000, 5.0000);
	TextDrawAlignment(GPS[19], 1);
	TextDrawColor(GPS[19], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[19], 255);
	TextDrawFont(GPS[19], 4);
	TextDrawSetProportional(GPS[19], 0);
	TextDrawSetShadow(GPS[19], 0);

	GPS[20] = TextDrawCreate(87.6668, 193.5775, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[20], 2.0000, 5.0000);
	TextDrawAlignment(GPS[20], 1);
	TextDrawColor(GPS[20], cSERVER);//1336760063);
	TextDrawBackgroundColor(GPS[20], 255);
	TextDrawFont(GPS[20], 4);
	TextDrawSetProportional(GPS[20], 0);
	TextDrawSetShadow(GPS[20], 0);

	GPS[21] = TextDrawCreate(9.6665, 198.5554, "LD_SPAC:white"); // пусто
	TextDrawTextSize(GPS[21], 80.0000, 2.0000);
	TextDrawAlignment(GPS[21], 1);
	TextDrawColor(GPS[21],cSERVER);// 1336760063);
	TextDrawBackgroundColor(GPS[21], 255);
	TextDrawFont(GPS[21], 4);
	TextDrawSetProportional(GPS[21], 0);
	TextDrawSetShadow(GPS[21], 0);

	GPS[22] = TextDrawCreate(10.9996, 183.7776, "A"); // пусто
	TextDrawLetterSize(GPS[22], 0.2239, 1.0814);
	TextDrawTextSize(GPS[22], 0.0000, 83.0000);
	TextDrawAlignment(GPS[22], 2);
	TextDrawColor(GPS[22], -1);
	TextDrawBackgroundColor(GPS[22], 255);
	TextDrawFont(GPS[22], 2);
	TextDrawSetProportional(GPS[22], 1);
	TextDrawSetShadow(GPS[22], 0);

	GPS[23] = TextDrawCreate(89.0000, 183.7776, "B"); // пусто
	TextDrawLetterSize(GPS[23], 0.2239, 1.0814);
	TextDrawTextSize(GPS[23], 0.0000, 83.0000);
	TextDrawAlignment(GPS[23], 2);
	TextDrawColor(GPS[23], -1);
	TextDrawBackgroundColor(GPS[23], 255);
	TextDrawFont(GPS[23], 2);
	TextDrawSetProportional(GPS[23], 1);
	TextDrawSetShadow(GPS[23], 0);
	//
}

stock LoadPlayerTextDraw(playerid)
{
	// Время на авторизацию
	LoginTime_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 264.6778, 351.2593, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, LoginTime_PTD[playerid][0], 0.0000, 0.8333);
	PlayerTextDrawTextSize(playerid, LoginTime_PTD[playerid][0], 369.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, LoginTime_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, LoginTime_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, LoginTime_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, LoginTime_PTD[playerid][0], cSERVER/*544869119*/);
	PlayerTextDrawBackgroundColor(playerid, LoginTime_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, LoginTime_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, LoginTime_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, LoginTime_PTD[playerid][0], 0);

	LoginTime_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 263.0777, 357.4597, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, LoginTime_PTD[playerid][1], 0.0000, 2.7222);
	PlayerTextDrawTextSize(playerid, LoginTime_PTD[playerid][1], 371.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, LoginTime_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, LoginTime_PTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, LoginTime_PTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, LoginTime_PTD[playerid][1], 100);
	PlayerTextDrawBackgroundColor(playerid, LoginTime_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, LoginTime_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, LoginTime_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, LoginTime_PTD[playerid][1], 0);

	LoginTime_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 272.7778, 348.6668, "Авторизация"); // пусто
	PlayerTextDrawLetterSize(playerid, LoginTime_PTD[playerid][2], 0.3088, 1.2733);
	PlayerTextDrawAlignment(playerid, LoginTime_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, LoginTime_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, LoginTime_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, LoginTime_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, LoginTime_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, LoginTime_PTD[playerid][2], 0);

	LoginTime_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 317.2776, 361.2490, "_"); // пусто
	PlayerTextDrawLetterSize(playerid, LoginTime_PTD[playerid][3], 0.4008, 1.9133);
	PlayerTextDrawAlignment(playerid, LoginTime_PTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, LoginTime_PTD[playerid][3], 0xFF9900FF);
	PlayerTextDrawBackgroundColor(playerid, LoginTime_PTD[playerid][3], -1);
	PlayerTextDrawFont(playerid, LoginTime_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, LoginTime_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, LoginTime_PTD[playerid][3], 0);
	//

	// Зеленная зона
	GreenZone_PTD[playerid] = CreatePlayerTextDraw(playerid, 1.0000, 264.2000, "redwich:GreenZone"); // пусто
	PlayerTextDrawTextSize(playerid, GreenZone_PTD[playerid], 165.0000, 110.0000);
	PlayerTextDrawAlignment(playerid, GreenZone_PTD[playerid], 1);
	PlayerTextDrawColor(playerid, GreenZone_PTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, GreenZone_PTD[playerid], 255);
	PlayerTextDrawFont(playerid, GreenZone_PTD[playerid], 4);
	PlayerTextDrawSetProportional(playerid, GreenZone_PTD[playerid], 0);
	PlayerTextDrawSetShadow(playerid, GreenZone_PTD[playerid], 0);
	//

	// Зона парковки
	ParkZone_PTD[playerid] = CreatePlayerTextDraw(playerid, -35.7000, 194.0000, "redwich:NonePark"); // пусто
	PlayerTextDrawTextSize(playerid, ParkZone_PTD[playerid], 273.0000/*1691*/, 190.0000);
	PlayerTextDrawAlignment(playerid, ParkZone_PTD[playerid], 1);
	PlayerTextDrawColor(playerid, ParkZone_PTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ParkZone_PTD[playerid], 255);
	PlayerTextDrawFont(playerid, ParkZone_PTD[playerid], 4);
	PlayerTextDrawSetProportional(playerid, ParkZone_PTD[playerid], 0);
	PlayerTextDrawSetShadow(playerid, ParkZone_PTD[playerid], 0);
	//

	// Выбор оружия
	Select_Guns_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 452.0000, 181.1981, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, Select_Guns_PTD[playerid][0], 0.0000, 28.4150);
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][0], 637.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Select_Guns_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, Select_Guns_PTD[playerid][0], 100);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][0], 0);

	Select_Guns_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 455.0000, 182.2980, "rgun:1"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][1], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][1], true);

	Select_Guns_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 485.0000, 182.2980, "rgun:2"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][2], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][2], true);

	Select_Guns_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 515.0000, 182.2980, "rgun:3"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][3], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][3], true);

	Select_Guns_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 545.0000, 182.2980, "rgun:4"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][4], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][4], true);

	Select_Guns_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 575.0000, 182.2980, "rgun:5"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][5], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][5], true);

	Select_Guns_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 605.0000, 182.2980, "rgun:6"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][6], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][6], true);

	Select_Guns_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 455.0000, 213.8000, "rgun:7"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][7], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][7], true);

	Select_Guns_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 485.0000, 213.8000, "rgun:8"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][8], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][8], true);

	Select_Guns_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 515.0000, 213.8000, "rgun:9"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][9], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][9], true);

	Select_Guns_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 545.0000, 213.8000, "rgun:10"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][10], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][10], true);

	Select_Guns_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 575.0000, 213.8000, "rgun:11"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][11], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][11], true);

	Select_Guns_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 605.0000, 213.8000, "rgun:12"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][12], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][12], true);

	Select_Guns_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 455.0000, 246.1020, "rgun:13"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][13], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][13], true);

	Select_Guns_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 485.0000, 246.1020, "rgun:14"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][14], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][14], true);

	Select_Guns_PTD[playerid][15] = CreatePlayerTextDraw(playerid, 515.0000, 246.1020, "rgun:15"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][15], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][15], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][15], true);

	Select_Guns_PTD[playerid][16] = CreatePlayerTextDraw(playerid, 545.0000, 246.1020, "rgun:16"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][16], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][16], true);

	Select_Guns_PTD[playerid][17] = CreatePlayerTextDraw(playerid, 575.0000, 246.1020, "rgun:17"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][17], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][17], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][17], true);

	Select_Guns_PTD[playerid][18] = CreatePlayerTextDraw(playerid, 605.0000, 246.1020, "rgun:18"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][18], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][18], true);

	Select_Guns_PTD[playerid][19] = CreatePlayerTextDraw(playerid, 455.0000, 277.6040, "rgun:22"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][19], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][19], true);

	Select_Guns_PTD[playerid][20] = CreatePlayerTextDraw(playerid, 485.0000, 277.6040, "rgun:23"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][20], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][20], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][20], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][20], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][20], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][20], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][20], true);

	Select_Guns_PTD[playerid][21] = CreatePlayerTextDraw(playerid, 515.0000, 277.6040, "rgun:24"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][21], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][21], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][21], true);

	Select_Guns_PTD[playerid][22] = CreatePlayerTextDraw(playerid, 545.0000, 277.6040, "rgun:25"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][22], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][22], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][22], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][22], true);

	Select_Guns_PTD[playerid][23] = CreatePlayerTextDraw(playerid, 575.0000, 277.6040, "rgun:26"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][23], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][23], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][23], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][23], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][23], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][23], true);

	Select_Guns_PTD[playerid][24] = CreatePlayerTextDraw(playerid, 605.0000, 277.6040, "rgun:27"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][24], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][24], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][24], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][24], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][24], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][24], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][24], true);

	Select_Guns_PTD[playerid][25] = CreatePlayerTextDraw(playerid, 455.0000, 309.4059, "rgun:28"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][25], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][25], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][25], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][25], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][25], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][25], true);

	Select_Guns_PTD[playerid][26] = CreatePlayerTextDraw(playerid, 485.0000, 309.4059, "rgun:29"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][26], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][26], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][26], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][26], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][26], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][26], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][26], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][26], true);

	Select_Guns_PTD[playerid][27] = CreatePlayerTextDraw(playerid, 515.0000, 309.4059, "rgun:30"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][27], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][27], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][27], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][27], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][27], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][27], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][27], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][27], true);

	Select_Guns_PTD[playerid][28] = CreatePlayerTextDraw(playerid, 545.0000, 309.4059, "rgun:31"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][28], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][28], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][28], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][28], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][28], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][28], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][28], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][28], true);

	Select_Guns_PTD[playerid][29] = CreatePlayerTextDraw(playerid, 575.0000, 309.4059, "rgun:32"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][29], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][29], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][29], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][29], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][29], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][29], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][29], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][29], true);

	Select_Guns_PTD[playerid][30] = CreatePlayerTextDraw(playerid, 605.0000, 309.4059, "rgun:33"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][30], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][30], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][30], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][30], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][30], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][30], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][30], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][30], true);

	Select_Guns_PTD[playerid][31] = CreatePlayerTextDraw(playerid, 455.0000, 340.9078, "rgun:34"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][31], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][31], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][31], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][31], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][31], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][31], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][31], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][31], true);

	Select_Guns_PTD[playerid][32] = CreatePlayerTextDraw(playerid, 485.0000, 340.9078, "rgun:35"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][32], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][32], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][32], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][32], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][32], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][32], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][32], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][32], true);

	Select_Guns_PTD[playerid][33] = CreatePlayerTextDraw(playerid, 515.0000, 340.9078, "rgun:36"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][33], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][33], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][33], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][33], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][33], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][33], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][33], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][33], true);

	Select_Guns_PTD[playerid][34] = CreatePlayerTextDraw(playerid, 545.0000, 340.9078, "rgun:37"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][34], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][34], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][34], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][34], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][34], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][34], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][34], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][34], true);

	Select_Guns_PTD[playerid][35] = CreatePlayerTextDraw(playerid, 575.0000, 340.9078, "rgun:38"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][35], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][35], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][35], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][35], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][35], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][35], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][35], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][35], true);

	Select_Guns_PTD[playerid][36] = CreatePlayerTextDraw(playerid, 605.0000, 340.9078, "rgun:39"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][36], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][36], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][36], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][36], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][36], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][36], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][36], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][36], true);

	Select_Guns_PTD[playerid][37] = CreatePlayerTextDraw(playerid, 455.0000, 373.2098, "rgun:40"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][37], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][37], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][37], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][37], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][37], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][37], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][37], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][37], true);

	Select_Guns_PTD[playerid][38] = CreatePlayerTextDraw(playerid, 485.0000, 373.2098, "rgun:41"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][38], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][38], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][38], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][38], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][38], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][38], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][38], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][38], true);

	Select_Guns_PTD[playerid][39] = CreatePlayerTextDraw(playerid, 515.0000, 373.2098, "rgun:42"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][39], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][39], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][39], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][39], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][39], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][39], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][39], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][39], true);

	Select_Guns_PTD[playerid][40] = CreatePlayerTextDraw(playerid, 545.0000, 373.2098, "rgun:43"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][40], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][40], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][40], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][40], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][40], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][40], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][40], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][40], true);

	Select_Guns_PTD[playerid][41] = CreatePlayerTextDraw(playerid, 575.0000, 373.2098, "rgun:44"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][41], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][41], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][41], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][41], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][41], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][41], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][41], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][41], true);

	Select_Guns_PTD[playerid][42] = CreatePlayerTextDraw(playerid, 605.0000, 373.2098, "rgun:45"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][42], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][42], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][42], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][42], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][42], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][42], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][42], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][42], true);

	Select_Guns_PTD[playerid][43] = CreatePlayerTextDraw(playerid, 455.0000, 404.7117, "rgun:46"); // пусто
	PlayerTextDrawTextSize(playerid, Select_Guns_PTD[playerid][43], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][43], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][43], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][43], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][43], 4);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][43], 0);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][43], 0);
	PlayerTextDrawSetSelectable(playerid, Select_Guns_PTD[playerid][43], true);

	Select_Guns_PTD[playerid][44] = CreatePlayerTextDraw(playerid, 490.0000, 410.6814, "Кол-во пт:"); // пусто
	PlayerTextDrawLetterSize(playerid, Select_Guns_PTD[playerid][44], 0.4976, 1.9318);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][44], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][44], -5963521);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][44], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][44], 1);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][44], 1);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][44], 1);

	Select_Guns_PTD[playerid][45] = CreatePlayerTextDraw(playerid, 576.0000, 411.0000, "_"); // пусто
	PlayerTextDrawLetterSize(playerid, Select_Guns_PTD[playerid][45], 0.4976, 1.9318);
	PlayerTextDrawAlignment(playerid, Select_Guns_PTD[playerid][45], 1);
	PlayerTextDrawColor(playerid, Select_Guns_PTD[playerid][45], -1);
	PlayerTextDrawBackgroundColor(playerid, Select_Guns_PTD[playerid][45], 255);
	PlayerTextDrawFont(playerid, Select_Guns_PTD[playerid][45], 1);
	PlayerTextDrawSetProportional(playerid, Select_Guns_PTD[playerid][45], 1);
	PlayerTextDrawSetShadow(playerid, Select_Guns_PTD[playerid][45], 1);
	//

	// Выбор транспорта - /veh
	SelectCar_Veh_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 592.0328, 308.3426, "Box"); // Главный бокс
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][0], 0.0000, 15.0000);
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][0], 0.0000, 90.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SelectCar_Veh_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, SelectCar_Veh_PTD[playerid][0], 150);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][0], 150);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][0], 0);

	SelectCar_Veh_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 548.0330, 310.0017, "Box"); // Бокс - Название машины
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][1], 0.0000, 1.0333);
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][1], 634.3001, 0.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SelectCar_Veh_PTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SelectCar_Veh_PTD[playerid][1], 255);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][1], 0);

	SelectCar_Veh_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 547.0661, 321.4609, "_"); // Модель машины
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][2], 90.0000, 90.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][2], 150);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, SelectCar_Veh_PTD[playerid][2], AdminCarTD[playerid]);
	PlayerTextDrawSetPreviewRot(playerid, SelectCar_Veh_PTD[playerid][2], -20.0000, 0.0000, 30.0000, 1.0000);
	PlayerTextDrawSetPreviewVehCol(playerid, SelectCar_Veh_PTD[playerid][2], 1, 1);

	SelectCar_Veh_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 547.0666, 413.8080, "Box"); // Бокс - Кнопки
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][3], 0.0000, 1.1130);
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][3], 635.3001, 0.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, SelectCar_Veh_PTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, SelectCar_Veh_PTD[playerid][3], 255);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][3], 0);

	SelectCar_Veh_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 548.4992, 413.9623, "LD_BEAT:left"); // Стрелка < влево
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][4], 10.0000, 10.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, SelectCar_Veh_PTD[playerid][4], true);

	SelectCar_Veh_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 626.3802, 413.9623, "LD_BEAT:right"); // Стрелка > вправо
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][5], 10.0000, 10.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, SelectCar_Veh_PTD[playerid][5], true);

	SelectCar_Veh_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 594.0998, 411.1767, "_"); // ModelID
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][6], 0.2926, 1.4256);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][6], 0);

	SelectCar_Veh_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 591.7666, 309.4278, "_"); // Название ТС
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][7], 0.1673, 0.9653);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][7], 0);

	SelectCar_Veh_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 569.2355, 428.6447, "Выбрать"); // Кнопка - Выбрать
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][8], 0.3000, 1.3428);
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][8], 12.0000, 41.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, SelectCar_Veh_PTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, SelectCar_Veh_PTD[playerid][8], 8388863);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SelectCar_Veh_PTD[playerid][8], true);

	SelectCar_Veh_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 614.8347, 428.6596, "Отмена"); // Кнопка - Отмена
	PlayerTextDrawLetterSize(playerid, SelectCar_Veh_PTD[playerid][9], 0.3000, 1.3428);
	PlayerTextDrawTextSize(playerid, SelectCar_Veh_PTD[playerid][9], 12.0000, 41.0000);
	PlayerTextDrawAlignment(playerid, SelectCar_Veh_PTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, SelectCar_Veh_PTD[playerid][9], -1);
	PlayerTextDrawUseBox(playerid, SelectCar_Veh_PTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, SelectCar_Veh_PTD[playerid][9], -2147483393);
	PlayerTextDrawBackgroundColor(playerid, SelectCar_Veh_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, SelectCar_Veh_PTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, SelectCar_Veh_PTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SelectCar_Veh_PTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SelectCar_Veh_PTD[playerid][9], true);
	//

	// Игровое время
	GameTime_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 113.0999, 356.7430, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][0], 0.0000, 7.4333);
	PlayerTextDrawTextSize(playerid, GameTime_PTD[playerid][0], 261.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, GameTime_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, GameTime_PTD[playerid][0], 150);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][0], 0);

	GameTime_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 187.0667, 355.4477, "_"); // Дата
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][1], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][1], 16777215);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][1], 1);

	GameTime_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 115.0999, 376.5442, "Время:"); // пусто
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][2], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][2], 1);

	GameTime_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 115.0999, 392.5442, "За час:"); // пусто
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][3], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][3], 1);

	GameTime_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 115.0999, 407.5442, "В день:"); // пусто
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][4], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][4], 1);

	GameTime_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 163.1002, 377.5442, "_"); // Время сервера
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][5], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][5], -5963521);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][5], 1);

	GameTime_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 163.1002, 392.5442, "_"); // Время за час
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][6], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][6], -5963521);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][6], 1);

	GameTime_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 163.1002, 407.5442, "_"); // Вреня за день
	PlayerTextDrawLetterSize(playerid, GameTime_PTD[playerid][7], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, GameTime_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, GameTime_PTD[playerid][7], -5963521);
	PlayerTextDrawBackgroundColor(playerid, GameTime_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, GameTime_PTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, GameTime_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, GameTime_PTD[playerid][7], 1);
	//

	// SpecInfo
	SpecInfo_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 507.0000, 155.5965, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][0], 0.0000, 24.2499);
	PlayerTextDrawTextSize(playerid, SpecInfo_PTD[playerid][0], 623.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SpecInfo_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, SpecInfo_PTD[playerid][0], -5963521);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][0], 100);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][0], 0);

	SpecInfo_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 508.6000, 157.3966, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][1], 0.0000, 23.7782);
	PlayerTextDrawTextSize(playerid, SpecInfo_PTD[playerid][1], 621.5866, 0.0000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SpecInfo_PTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SpecInfo_PTD[playerid][1], 170);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][1], 100);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][1], 0);

	SpecInfo_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 565.5000, 156.6963, "_"); // Имя игрока
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][2], 0.3064, 1.5912);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][2], 0);

	SpecInfo_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 565.5000, 167.7970, "_"); // ID Игрока
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][3], 0.3064, 1.5912);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][3], 0);

	SpecInfo_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 507.2998, 186.0966, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][4], 0.0000, -0.0830);
	PlayerTextDrawTextSize(playerid, SpecInfo_PTD[playerid][4], 623.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, SpecInfo_PTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, SpecInfo_PTD[playerid][4], -5963521);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][4], 0);

	SpecInfo_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 509.9002, 381.0000, "LD_BEAT:left"); // < Пред. Игрок
	PlayerTextDrawTextSize(playerid, SpecInfo_PTD[playerid][5], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, SpecInfo_PTD[playerid][5], true);

	SpecInfo_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 594.0000, 381.0000, "LD_BEAT:right"); // Сл. игрок >
	PlayerTextDrawTextSize(playerid, SpecInfo_PTD[playerid][6], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, SpecInfo_PTD[playerid][6], true);

	SpecInfo_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 553.2004, 381.0000, "LD_BEAT:cross"); // Завершить слежку
	PlayerTextDrawTextSize(playerid, SpecInfo_PTD[playerid][7], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][7], -16776961);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, SpecInfo_PTD[playerid][7], true);

	SpecInfo_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 511.0000, 190.0000, "Ping:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][8], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][8], 0);

	SpecInfo_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 511.0000, 205.0000, "FPS:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][9], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][9], 0);

	SpecInfo_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 511.0000, 230.0000, "Level:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][10], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][10], 0);

	SpecInfo_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 511.0000, 245.0000, "Health:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][11], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][11], 0);

	SpecInfo_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 511.0000, 260.0000, "Armour:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][12], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][12], 0);

	SpecInfo_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 511.0000, 275.0000, "Warn:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][13], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][13], 0);

	SpecInfo_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 511.0000, 290.0000, "Gun:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][14], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][14], 0);

	SpecInfo_PTD[playerid][15] = CreatePlayerTextDraw(playerid, 620.0000, 190.0000, "_"); // Пинг
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][15], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][15], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][15], 0);

	SpecInfo_PTD[playerid][16] = CreatePlayerTextDraw(playerid, 511.0000, 320.0000, "Cars:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][16], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][16], 0);

	SpecInfo_PTD[playerid][17] = CreatePlayerTextDraw(playerid, 511.0000, 335.0000, "C._Health:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][17], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][17], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][17], 0);

	SpecInfo_PTD[playerid][18] = CreatePlayerTextDraw(playerid, 511.0000, 350.0000, "Speed:"); // пусто
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][18], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][18], 0);

	SpecInfo_PTD[playerid][19] = CreatePlayerTextDraw(playerid, 620.0000, 205.0000, "_"); // ФПС
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][19], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][19], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][19], 0);

	SpecInfo_PTD[playerid][20] = CreatePlayerTextDraw(playerid, 620.0000, 230.0000, "_"); // Уровень
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][20], 0.2940, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][20], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][20], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][20], 0);

	SpecInfo_PTD[playerid][21] = CreatePlayerTextDraw(playerid, 620.0000, 245.0000, "_"); // Здоровье
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][21], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][21], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][21], 0);

	SpecInfo_PTD[playerid][22] = CreatePlayerTextDraw(playerid, 620.0000, 260.0000, "_"); // Броня
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][22], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][22], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][22], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][22], 0);

	SpecInfo_PTD[playerid][23] = CreatePlayerTextDraw(playerid, 620.0000, 275.0000, "_"); // Предупреждения
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][23], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][23], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][23], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][23], 0);

	SpecInfo_PTD[playerid][24] = CreatePlayerTextDraw(playerid, 620.0000, 290.0000, "_"); // Оружие и патроны
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][24], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][24], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][24], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][24], 0);

	SpecInfo_PTD[playerid][25] = CreatePlayerTextDraw(playerid, 620.0000, 320.0000, "_"); // В машине или нет
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][25], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][25], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][25], 16711935);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][25], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][25], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][25], 0);

	SpecInfo_PTD[playerid][26] = CreatePlayerTextDraw(playerid, 620.0000, 335.0000, "_"); // Состояние машины
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][26], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][26], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][26], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][26], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][26], 0);

	SpecInfo_PTD[playerid][27] = CreatePlayerTextDraw(playerid, 620.0000, 350.0000, "_"); // Скорость машины
	PlayerTextDrawLetterSize(playerid, SpecInfo_PTD[playerid][27], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, SpecInfo_PTD[playerid][27], 3);
	PlayerTextDrawColor(playerid, SpecInfo_PTD[playerid][27], -1);
	PlayerTextDrawBackgroundColor(playerid, SpecInfo_PTD[playerid][27], 255);
	PlayerTextDrawFont(playerid, SpecInfo_PTD[playerid][27], 1);
	PlayerTextDrawSetProportional(playerid, SpecInfo_PTD[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid, SpecInfo_PTD[playerid][27], 0);
	//

	// Автосалон
	BuyCars_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 237.0000, 364.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][0], 0.0000, 8.8332);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][0], 405.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][0], -5963521);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][0], 0);

	BuyCars_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 238.0000, 365.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][1], 0.0000, 8.5270);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][1], 404.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][1], 255);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][1], 0);

	BuyCars_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 240.0000, 422.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][2], 0.0000, 2.0000);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][2], 290.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][2], 8388863);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][2], 0);

	BuyCars_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 295.0000, 422.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][3], 0.0000, 2.0000);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][3], 345.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][3], -65281);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][3], 0);

	BuyCars_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 351.0000, 422.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][4], 0.0000, 2.0000);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][4], 401.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][4], -1523963137);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][4], 0);

	BuyCars_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 241.0000, 423.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][5], 0.0000, 1.7839);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][5], 289.1892, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][5], 255);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][5], 0);

	BuyCars_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 295.7998, 423.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][6], 0.0000, 1.8237);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][6], 344.3193, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][6], 255);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][6], 0);

	BuyCars_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 352.0000, 423.0000, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][7], 0.0000, 1.8207);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][7], 400.2893, 0.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][7], 255);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][7], 0);

	BuyCars_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 265.0000, 424.0000, "Купить"); // Купить
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][8], 0.3000, 1.5000);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][8], 10.0000, 48.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][8], 8388863);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][8], true);

	BuyCars_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 320.0000, 424.0000, "Т-ДРАЙВ"); // Тест-драйв
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][9], 0.2615, 1.5082);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][9], 10.0000, 48.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][9], -65281);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][9], true);

	BuyCars_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 377.0000, 424.0000, "Отмена"); // Отмена
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][10], 0.2910, 1.4709);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][10], 10.0000, 48.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][10], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][10], -2147483393);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][10], true);

	BuyCars_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 242.0000, 364.4996, "LD_BEAT:left"); // < - Выбор машины
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][11], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][11], true);

	BuyCars_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 372.0000, 363.4996, "LD_BEAT:right"); // > - Выбор машины
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][12], 30.0000, 30.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][12], true);

	BuyCars_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 322.0000, 364.4996, "_"); // Название ТС
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][13], 0.2220, 1.5087);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][13], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][13], 0);

	BuyCars_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 322.0000, 378.4996, "_"); // Стоимость ТС
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][14], 0.2070, 1.3262);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][14], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][14], 16711935);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][14], 0);

	BuyCars_PTD[playerid][15] = CreatePlayerTextDraw(playerid, 242.0000, 396.0000, "LD_BEAT:left"); // < - Выбор цвета 1
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][15], 20.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][15], 4);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][15], true);

	BuyCars_PTD[playerid][16] = CreatePlayerTextDraw(playerid, 300.2033, 396.0000, "LD_BEAT:right"); // > - Выбор цвета 1
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][16], 20.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][16], true);

	BuyCars_PTD[playerid][17] = CreatePlayerTextDraw(playerid, 281.1010, 398.0000, "Col 1"); // Цвет 1
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][17], 0.2673, 1.3467);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][17], 10.0000, 32.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][17], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][17], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][17], true);

	BuyCars_PTD[playerid][18] = CreatePlayerTextDraw(playerid, 320.0000, 396.0000, "LD_BEAT:left"); // < - Выбор цвета 2
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][18], 20.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][18], true);

	BuyCars_PTD[playerid][19] = CreatePlayerTextDraw(playerid, 381.0000, 396.0000, "LD_BEAT:right"); // > - Выбор цвета 2
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][19], 20.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][19], 0);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][19], true);

	BuyCars_PTD[playerid][20] = CreatePlayerTextDraw(playerid, 360.0000, 398.0000, "Col 2"); // Цвет 2
	PlayerTextDrawLetterSize(playerid, BuyCars_PTD[playerid][20], 0.2673, 1.3467);
	PlayerTextDrawTextSize(playerid, BuyCars_PTD[playerid][20], 10.0000, 36.0000);
	PlayerTextDrawAlignment(playerid, BuyCars_PTD[playerid][20], 2);
	PlayerTextDrawColor(playerid, BuyCars_PTD[playerid][20], -1);
	PlayerTextDrawUseBox(playerid, BuyCars_PTD[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid, BuyCars_PTD[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, BuyCars_PTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, BuyCars_PTD[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, BuyCars_PTD[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, BuyCars_PTD[playerid][20], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCars_PTD[playerid][20], true);
	//

	// GPS - навигатор
	GPS1[playerid][0] = CreatePlayerTextDraw(playerid, 48.6665, 162.1110, "_"); // Название
	PlayerTextDrawLetterSize(playerid, GPS1[playerid][0], 0.2303, 1.2308);
	PlayerTextDrawTextSize(playerid, GPS1[playerid][0], 0.0000, 83.0000);
	PlayerTextDrawAlignment(playerid, GPS1[playerid][0], 2);
	PlayerTextDrawColor(playerid, GPS1[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, GPS1[playerid][0], 255);
	PlayerTextDrawFont(playerid, GPS1[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, GPS1[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, GPS1[playerid][0], 0);

	GPS1[playerid][1] = CreatePlayerTextDraw(playerid, 50.0000, 182.5332, "_"); // Метры
	PlayerTextDrawLetterSize(playerid, GPS1[playerid][1], 0.1739, 1.1312);
	PlayerTextDrawTextSize(playerid, GPS1[playerid][1], 0.0000, 69.0000);
	PlayerTextDrawAlignment(playerid, GPS1[playerid][1], 2);
	PlayerTextDrawColor(playerid, GPS1[playerid][1], cSERVER);
	PlayerTextDrawBackgroundColor(playerid, GPS1[playerid][1], 255);
	PlayerTextDrawFont(playerid, GPS1[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, GPS1[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, GPS1[playerid][1], 0);

	GPS1[playerid][2] = CreatePlayerTextDraw(playerid, 71.6671, 194.8221, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, GPS1[playerid][2], 9.0000, 9.0000);
	PlayerTextDrawAlignment(playerid, GPS1[playerid][2], 1);
	PlayerTextDrawColor(playerid, GPS1[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, GPS1[playerid][2], 255);
	PlayerTextDrawFont(playerid, GPS1[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, GPS1[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, GPS1[playerid][2], 0);
	//

	// Стоп анимация
	Stop_anim_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 255.0000, 386.0000, "redwich:stop_anim"); // пусто
	PlayerTextDrawTextSize(playerid, Stop_anim_PTD[playerid][0], 120.0000, 60.0000);
	PlayerTextDrawAlignment(playerid, Stop_anim_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Stop_anim_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Stop_anim_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Stop_anim_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, Stop_anim_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, Stop_anim_PTD[playerid][0], 0);
	//

	// Спедомитер
	Speed_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 485.1659, 363.2369, "speed:back"); // Главный бокс спидометра
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][0], 175.0000, 70.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][0], 0);

	Speed_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 547.5029, 368.2149, "speed:engine_icon"); // Статус двигателя
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][1], 18.0000, 18.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][1], cRED);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][1], 0);

	Speed_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 567.5029, 368.2149, "speed:light_icon"); // Статус фар
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][2], 18.0000, 18.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][2], cRED);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][2], 0);

	Speed_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 587.5029, 368.2149, "speed:door_icon"); // Статус дверей
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][3], 18.0000, 18.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][3], cRED);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][3], 0);

	Speed_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 564.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 10
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][4], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][4], 0);

	Speed_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 567.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 20
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][5], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][5], 0);

	Speed_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 570.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 30
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][6], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][6], 0);

	Speed_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 573.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 40
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][7], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][7], 0);

	Speed_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 576.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 50
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][8], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][8], 0);

	Speed_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 579.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 60
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][9], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][9], 0);

	Speed_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 582.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 70
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][10], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][10], 0);

	Speed_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 585.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 80
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][11], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][11], 0);

	Speed_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 588.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 90
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][12], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][12], 0);

	Speed_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 591.1047, 410.8717, "speed:fuel_count"); // Состояния топливо - 100
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][13], 3.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][13], 0);

	Speed_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 607.5029, 368.2149, "speed:belt_icon"); // Статус ремня
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][14], 18.0000, 18.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][14], cRED);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][14], 0);

	Speed_PTD[playerid][15] = CreatePlayerTextDraw(playerid, 596.0031, 411.5075, "_"); // Кол-во литров в баке
	PlayerTextDrawLetterSize(playerid, Speed_PTD[playerid][15], 0.2196, 1.6576);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][15], -5963521);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][15], 0);

	Speed_PTD[playerid][16] = CreatePlayerTextDraw(playerid, 516.2669, 384.4334, "_"); // Кол-во скорости
	PlayerTextDrawLetterSize(playerid, Speed_PTD[playerid][16], 0.2416, 1.7617);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][16], 2);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][16], 0);

	Speed_PTD[playerid][17] = CreatePlayerTextDraw(playerid, 547.5029, 410.4718, "speed:fuel_icon"); // Иконка топлива
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][17], 15.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][17], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][17], 0);

	Speed_PTD[playerid][18] = CreatePlayerTextDraw(playerid, 551.4993, 387.7965, "hud:radar_girlfriend"); // Иконка здоровья ТС
	PlayerTextDrawTextSize(playerid, Speed_PTD[playerid][18], 20.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][18], -16776961);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][18], 0);

	Speed_PTD[playerid][19] = CreatePlayerTextDraw(playerid, 577.2322, 390.3408, "_"); // Кол-во ХП ТС
	PlayerTextDrawLetterSize(playerid, Speed_PTD[playerid][19], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, Speed_PTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, Speed_PTD[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, Speed_PTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, Speed_PTD[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, Speed_PTD[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, Speed_PTD[playerid][19], 0);
	//

	// Радар
	Radar_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 510.5000, 188.2500, "redwich:rrp_radar"); // пусто
	PlayerTextDrawTextSize(playerid, Radar_PTD[playerid][0], 121.0000, 125.0000);
	PlayerTextDrawAlignment(playerid, Radar_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Radar_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Radar_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Radar_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, Radar_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, Radar_PTD[playerid][0], 0);

	Radar_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 571.9995, 244.1374, "_"); // пусто
	PlayerTextDrawLetterSize(playerid, Radar_PTD[playerid][1], 0.7965, 3.9449);
	PlayerTextDrawAlignment(playerid, Radar_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, Radar_PTD[playerid][1], -5963521);
	PlayerTextDrawSetOutline(playerid, Radar_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Radar_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Radar_PTD[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, Radar_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Radar_PTD[playerid][1], 0);

	// Работа Шахтера
	Scahta_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 559.6663, 361.2748, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][0], 0.0000, 9.0043);
	PlayerTextDrawTextSize(playerid, Scahta_PTD[playerid][0], 635.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Scahta_PTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, Scahta_PTD[playerid][0], -5963521);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][0], 0);

	Scahta_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 560.3661, 362.6749, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][1], 0.0000, 8.7369);
	PlayerTextDrawTextSize(playerid, Scahta_PTD[playerid][1], 634.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, Scahta_PTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, Scahta_PTD[playerid][1], 255);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][1], 0);

	Scahta_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 570.3334, 360.0305, "ЋAXЏA"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][2], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][2], 0);

	Scahta_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 560.3333, 376.9416, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][3], 0.0000, -0.2333);
	PlayerTextDrawTextSize(playerid, Scahta_PTD[playerid][3], 634.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, Scahta_PTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, Scahta_PTD[playerid][3], -5963521);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][3], 0);

	Scahta_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 560.3333, 411.9408, "Box"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][4], 0.0000, -0.2333);
	PlayerTextDrawTextSize(playerid, Scahta_PTD[playerid][4], 634.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, Scahta_PTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, Scahta_PTD[playerid][4], -5963521);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][4], 0);

	Scahta_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 561.7668, 377.0815, "Перенесено руды"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][5], 0.1880, 1.4548);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][5], 0);

	Scahta_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 571.7667, 411.1964, "Заработано"); // пусто
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][6], 0.1880, 1.4548);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][6], 0);

	Scahta_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 598.2577, 392.8446, "_"); // Перенесено руды
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][7], 0.2793, 1.5958);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][7], -5963521);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][7], 0);

	Scahta_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 597.9578, 425.9466, "_"); // Заработано
	PlayerTextDrawLetterSize(playerid, Scahta_PTD[playerid][8], 0.2793, 1.5958);
	PlayerTextDrawAlignment(playerid, Scahta_PTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, Scahta_PTD[playerid][8], 16711935);
	PlayerTextDrawBackgroundColor(playerid, Scahta_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, Scahta_PTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, Scahta_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, Scahta_PTD[playerid][8], 0);
	//
}

/*
	Speed_PTD[playerid][1] // Статус двигателя
	Speed_PTD[playerid][2] // Статус фар
	Speed_PTD[playerid][3] // Статус дверей
	Speed_PTD[playerid][14] // Статус ремня
	Speed_PTD[playerid][15] // Кол-во литров в баке
	Speed_PTD[playerid][16] // Кол-во скорости
	Speed_PTD[playerid][19] // Кол-во ХП ТС
*/

stock GetFracSkin(playerid)
{
	new stskin, frac = GetFrac(playerid), rang = PI[playerid][FracRang];
	if(!frac) stskin = PI[playerid][Skin];
	else
	{
	    if(FracDuty[playerid][GetFrac(playerid)])
		{
		    if(PI[playerid][Sex] == 1) stskin = FracSkinM[frac][rang-1];
		    else stskin = FracSkinG[frac][rang-1];
		}
		else stskin = PI[playerid][Skin];
	}
	return stskin;
}

stock GetRang(frac, rang)
{
	if(rang > 0) return RangName[frac][(rang-1)];
	else return RangName[frac][0];
}

// Система слежения за игроком
stock StartSpec(playerid, id)
{
	if(SP[playerid][SpecID] == INVALID_PLAYER_ID)
	{
		GetPlayerPos(playerid, SP[playerid][SpecPos][0], SP[playerid][SpecPos][1], SP[playerid][SpecPos][2]);
		GetPlayerFacingAngle(playerid, SP[playerid][SpecPos][3]);
		SP[playerid][SpecWorld] = GetPlayerInterior(playerid);
		SP[playerid][SpecInt] = GetPlayerVirtualWorld(playerid);
	}

	SP[playerid][SpecGun] = GetPlayerWeapon(id);
	GetPlayerHealth(id, SP[playerid][SpecHP]);
	GetPlayerArmour(id, SP[playerid][SpecArmour]);
	SP[playerid][SpecPing] = GetPlayerPing(id);
	SP[playerid][SpecAmmo] = GetPlayerAmmo(id);

	if(IsPlayerInAnyVehicle(id)) SP[id][InCar] = true;
	else SP[id][InCar] = false;

	if(IsPlayerInAnyVehicle(id)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id), SPECTATE_MODE_FIXED);
	else PlayerSpectatePlayer(playerid, id, SPECTATE_MODE_NORMAL);

	new stringAdmin[256];
	format(stringAdmin, sizeof(stringAdmin), "[A] %s [%d] начял(-а) наблюдать за игроком %s [%d]", GetName(playerid), playerid, GetName(id), id);
   	SCMAdmin(cGREY, stringAdmin);

	SCM(playerid, -1, "Нажмите "SERVER"\"F\"{FFFFFF} для отображения указателя мыши.");
	SCM(playerid, -1, "Нажмите "SERVER"\"ESC\"{FFFFFF} для отключения указателя мыши.");

	/* Формат текстдрайвов
	for(i, 28) PlayerTextDrawShow(playerid, SpecInfo_PTD[playerid][i]);
	new string[128];
	string_f("%s - %i", GetName(id), id); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][2], string); // Имя игрока
	string_f("%i", GetPlayerFPS(id)); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][19], string); // ФПС
	string_f("%i", SP[id][SpecPing]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][15], string); // Пинг
	string_f("%i (%i/%i)", PI[id][Level], PI[id][Exp], (PI[id][Level]+1)*4); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][20], string); // Уровень
	string_f("%.1f", SP[id][SpecHP]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][21], string); // Здоровье
	string_f("%.1f", SP[id][SpecArmour]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][22], string); // Броня
	string_f("%i / 3", PI[id][Warn]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][23], string); // Предупреждения
	string_f("%i (%i)", SP[id][SpecGun], SP[id][SpecAmmo]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][24], string); // Оружие и патроны

	if(SP[id][InCar]) // Если в машине
	{
		new i = GetPlayerVehicleID(id);
		new carid = GetVehicleModel(i);
	    if(GetPlayerState(id) == PLAYER_STATE_DRIVER) // Если как водитель
	    {
			string_f("%i (%i) В", GetVehicleModel(i), i); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][25], string); // В машине или нет
			string_f("%.1f", VehicleInfo[carid][vHealth]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][26], string); // Состояние машины
			string_f("%i km/h / %i km/h", VehicleSpeed(i), VehicleInfo[carid][vSpeed]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][27], string); // Скорость машины
		}
		else // Если как посажир
		{
	        string_f("%i (%i) П", GetVehicleModel(i), i); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][25], string); // В машине или нет

			PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][26], "-"); // Состояние машины
			PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][27], "-"); // Скорость машины
		}
	}
	else // Если не в машине
	{
		PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][25], "-"); // В машине или нет
		PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][26], "-"); // Состояние машины
		PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][27], "-"); // Скорость машины
	}
    // TogglePlayerSpectating(playerid, true);
    */
	return SP[playerid][SpecTimer] = SetTimerEx("SpecTime", 300, false, "ii", playerid, SP[playerid][SpecID]);
}

publics SpecTime(playerid, id)
{
	if(SP[playerid][SpecID] == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return StopSpec(playerid);
	{
		new string[128];

		if(IsPlayerInAnyVehicle(id)) SP[playerid][InCar] = true;
		else SP[playerid][InCar] = false;

		if(IsPlayerInAnyVehicle(id)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id), SPECTATE_MODE_NORMAL);
		else PlayerSpectatePlayer(playerid, id, SPECTATE_MODE_NORMAL);

		SP[playerid][SpecGun] = GetPlayerWeapon(id);
		GetPlayerHealth(id, SP[playerid][SpecHP]);
		GetPlayerArmour(id, SP[playerid][SpecArmour]);
		SP[playerid][SpecPing] = GetPlayerPing(id);
		SP[playerid][SpecAmmo] = GetPlayerAmmo(id);

		string_f("%s - %i", GetName(id), id); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][2], string); // Имя игрока
		string_f("%i", GetPlayerFPS(id)); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][19], string); // ФПС
        string_f("%i", SP[playerid][SpecPing]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][15], string); // Пинг
		string_f("%i (%i/%i)", PI[id][Level], PI[id][Exp], (PI[id][Level]+1)*4); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][20], string); // Уровень
		string_f("%.1f", SP[playerid][SpecHP]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][21], string); // Здоровье
		string_f("%.1f", SP[playerid][SpecArmour]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][22], string); // Броня
		string_f("%i / 3", PI[SP[playerid][SpecID]][Warn]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][23], string); // Предупреждения
		string_f("%i (%i)", SP[playerid][SpecGun], SP[playerid][SpecAmmo]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][24], string); // Оружие и патроны

		if(SP[playerid][InCar]) // Если в машине
		{
			new i = GetPlayerVehicleID(SP[playerid][SpecID]);
			new carid = GetVehicleModel(i);
		    if(GetPlayerState(SP[playerid][SpecID]) == PLAYER_STATE_DRIVER) // Если как водитель
		    {
				string_f("%i (%i) В", GetVehicleModel(i), i); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][25], string); // В машине или нет
				string_f("%.1f", VehicleInfo[carid][vHealth]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][26], string); // Состояние машины
				string_f("%i km/h / %i km/h", VehicleSpeed(i), VehicleInfo[carid][vSpeed]); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][27], string); // Скорость машины
			}
			else // Если как посажир
			{
		        string_f("%i (%i) П", GetVehicleModel(i), i); PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][25], string); // В машине или нет
				PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][26], "-"); // Состояние машины
				PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][27], "-"); // Скорость машины
			}
		}
		else // Если не в машине
		{
			PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][25], "-"); // В машине или нет
			PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][26], "-"); // Состояние машины
			PlayerTextDrawSetString(playerid, SpecInfo_PTD[playerid][27], "-"); // Скорость машины
		}
	}
	return SP[playerid][SpecTimer] = SetTimerEx("SpecTime", 300, false, "ii", playerid, id);
}

stock StopSpec(playerid)
{
	if(SP[playerid][SpecID] != INVALID_PLAYER_ID)
	{
		TogglePlayerSpectating(playerid, false);
		KillTimer(SP[playerid][SpecTimer]);
		for(i, 28) PlayerTextDrawHide(playerid, SpecInfo_PTD[playerid][i]);
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

stock GetPlayerFPS(playerid)
{
    SetPVarInt(playerid,!"DrunkL",GetPlayerDrunkLevel(playerid));
    if(GetPVarInt(playerid,!"DrunkL") < 100) SetPlayerDrunkLevel(playerid,2000);
    else
    {
        if(GetPVarInt(playerid,!"LDrunkL") != GetPVarInt(playerid,!"DrunkL"))
        {
            SetPVarInt(playerid,!"FPS",(GetPVarInt(playerid,!"LDrunkL") - GetPVarInt(playerid,"DrunkL")));
            SetPVarInt(playerid,!"LDrunkL",GetPVarInt(playerid,!"DrunkL"));
            if((GetPVarInt(playerid,!"FPS") > 0) && (GetPVarInt(playerid,!"FPS") < 256)) return GetPVarInt(playerid,!"FPS") - 1;
        }
    }
    return 0;
}

// GPS Навигатор
stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ)
{
	new Float:Distance;
	Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));
	return Distance;
}

stock SetPlayerGPS(playerid, Float:X, Float:Y, Float:Z, locname[])
{
 	new Float:VPosX, Float:VPoxY, Float:VPoxZ;
    GetPlayerPos(playerid, VPosX, VPoxY, VPoxZ);

    UseGPS[playerid] = true;
    DisablePlayerRaceCheckpoint(playerid);
	SetPlayerRaceCheckpoint(playerid, 1, X, Y, Z, 0, 0, 0, 3.0);
	if(markDist[playerid] != 0.0) KillTimer(markTimer[playerid]);
	GetPlayerPos(playerid, markPlayerX[playerid], markPlayerY[playerid], markPlayerZ[playerid]);
	markDist[playerid] = GetDistanceBetweenPoints(markPlayerX[playerid], markPlayerY[playerid], markPlayerZ[playerid], X, Y, Z);
    markX[playerid] = X;
    markY[playerid] = Y;
    markZ[playerid] = Z;
	markTimer[playerid] = SetTimerEx("UpdateDist", 100, true, "i", playerid);
	new stringer[32];
	stringer[0] = EOS;
	format(stringer,sizeof(stringer),"%s", locname);
	PlayerTextDrawSetString(playerid, GPS1[playerid][0], stringer);
	for(new i; i < 24; i++) TextDrawShowForPlayer(playerid, GPS[i]);
	for(new i; i < 3; i++) PlayerTextDrawShow(playerid, GPS1[playerid][i]);

	return 1;
}

publics UpdateDist(playerid)
{
	new Float: currect_dist = GetPlayerDistanceFromPoint(playerid, markX[playerid], markY[playerid], markZ[playerid]),
		Float: percent = currect_dist / markDist[playerid] * 100,
		Float: newWidth = 71.0000 - (percent * 123.0) / 123,
		fmt_info[50];

	if(newWidth < 6.0) newWidth = 6.0;

	PlayerTextDrawDestroy(playerid, GPS1[playerid][2]);
	GPS1[playerid][2] = PlayerText:INVALID_TEXT_DRAW;

	GPS1[playerid][2] = CreatePlayerTextDraw(playerid, newWidth, 194.8221, "LD_BEAT:chit"); // пусто
	PlayerTextDrawTextSize(playerid, GPS1[playerid][2], 9.0000, 9.0000);
	PlayerTextDrawAlignment(playerid, GPS1[playerid][2], 1);
	PlayerTextDrawColor(playerid, GPS1[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, GPS1[playerid][2], 255);
	PlayerTextDrawFont(playerid, GPS1[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, GPS1[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, GPS1[playerid][2], 0);

	PlayerTextDrawShow(playerid, GPS1[playerid][2]);

	format(fmt_info, sizeof fmt_info, "%.0f метров", currect_dist);
	PlayerTextDrawSetString(playerid, GPS1[playerid][1], fmt_info);
}
//

stock SetPlayerSkills(playerid)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PI[playerid][SkillGun][0]/10);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PI[playerid][SkillGun][1]/10);
	// SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, PI[playerid][SkillGun][2]/10);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PI[playerid][SkillGun][2]/10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PI[playerid][SkillGun][3]/10);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PI[playerid][SkillGun][4]/10);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PI[playerid][SkillGun][5]/10);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PI[playerid][SkillGun][6]/10);
    return 1;
}

stock OnPlayerAmmoChange(playerid, newammo, oldammo)
{
	if(GetPVarInt(playerid, "guntime") > gettime())return 1;
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1997.0372, 1436.3494, 26.2696) || // Тир в Батырево 1
		IsPlayerInRangeOfPoint(playerid, 10.0, 2012.0372, 1436.3494, 26.2696) || // Тир в Батырево 2
		IsPlayerInRangeOfPoint(playerid, 10.0, 1975.1482, -2581.6023, 10.8275)) // Тир в Батырево 3
	{
	    if(newammo < oldammo)
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 34: //
	            {
	                if(PI[playerid][SkillGun][0] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "Snaiper", GetPVarInt(playerid,"Snaiper") +1);
		                if(GetPVarInt(playerid,"Snaiper") >= 10)
		                {
		                    if(PI[playerid][SkillGun][0] <= 9900)
		                    {
			                    PI[playerid][SkillGun][0] += 50;
			                    if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][0] += 100;
			                    SetPVarInt(playerid, "Snaiper",0);
			                }
			                else
							{
								if(PI[playerid][SkillGun][0] >= 10000) PI[playerid][SkillGun][0] = 10000;
			                    SetPVarInt(playerid, "Snaiper", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
	     					if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл Винтовки СВД повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
		            }
	            }
				case 23: //
				{
	                if(PI[playerid][SkillGun][1] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "SkillPistol", GetPVarInt(playerid,"SkillPistol") +1);
		                if(GetPVarInt(playerid,"SkillPistol") >= 10)
		                {
		                    if(PI[playerid][SkillGun][1] <= 9900)
		                    {
			                    PI[playerid][SkillGun][1] += 50;
			                    if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][1] += 100;
			                    SetPVarInt(playerid, "SkillPistol",0);
			                }
			                else
			                {
								if(PI[playerid][SkillGun][1] >= 10000) PI[playerid][SkillGun][1] = 10000;
			                    SetPVarInt(playerid, "SkillPistol", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
	     					if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл Пистолета ТТ повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
		            }
				}
	            case 24:
	            {
	                if(PI[playerid][SkillGun][2] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "SkillD", GetPVarInt(playerid,"SkillD") +1);
		                if(GetPVarInt(playerid,"SkillD") >= 10)
		                {
		                    if(PI[playerid][SkillGun][2] <= 9900)
		                    {
			                    PI[playerid][SkillGun][2] += 50;
			                    if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][2] += 100;
			                    SetPVarInt(playerid, "SkillD",0);
			                }
			                else
							{
								if(PI[playerid][SkillGun][2] >= 10000) PI[playerid][SkillGun][2] = 10000;
			                    SetPVarInt(playerid, "SkillD", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
	     					if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл Пустынный орел повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
		            }
				}
	            case 25:
	            {
	                if(PI[playerid][SkillGun][3] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "SkillShot",GetPVarInt(playerid,"SkillShot") +1);
		                if(GetPVarInt(playerid,"SkillShot") >= 10)
		                {
		                    if(PI[playerid][SkillGun][3] <= 9900)
		                    {
			                    PI[playerid][SkillGun][3] += 50;
			                    if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][3] += 100;
			                    SetPVarInt(playerid, "SkillShot",0);
			                }
			                else
							{
								if(PI[playerid][SkillGun][3] >= 10000) PI[playerid][SkillGun][3] = 10000;
			                    SetPVarInt(playerid, "SkillShot", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
		        			if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл Дробовика повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
		            }
				}
	            case 29:
	            {
	                if(PI[playerid][SkillGun][4] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "SkillMP5",GetPVarInt(playerid,"SkillMP5") +1);
		                if(GetPVarInt(playerid,"SkillMP5") >= 10)
		                {
		                    if(PI[playerid][SkillGun][4] <= 9900)
		                    {
			                    PI[playerid][SkillGun][4] += 50;
			                    if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][4] += 100;
			                    SetPVarInt(playerid, "SkillMP5",0);
			                }
			                else
							{
								if(PI[playerid][SkillGun][4] >= 10000) PI[playerid][SkillGun][4] = 10000;
			                    SetPVarInt(playerid, "SkillMP5", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
		        			if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл МП5 повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
		            }
				}
	            case 30:
	            {
	                if(PI[playerid][SkillGun][5] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "SkillAk47",GetPVarInt(playerid,"SkillAk47") +1);
		                if(GetPVarInt(playerid,"SkillAk47") >= 10)
		                {
		                    if(PI[playerid][SkillGun][5] <= 9900)
		                    {
			                    PI[playerid][SkillGun][5] += 50;
			                    if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][5] += 100;
			                    SetPVarInt(playerid, "SkillAk47",0);
			                }
			                else
							{
								if(PI[playerid][SkillGun][5] >= 10000) PI[playerid][SkillGun][5] = 10000;
			                    SetPVarInt(playerid, "SkillAk47", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
		        			if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл Автомата АК-47 повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
		            }
				}
	            case 31:
	            {
	                if(PI[playerid][SkillGun][6] >= 10000) return 1;
	                {
		                SetPVarInt(playerid, "SkillM4",GetPVarInt(playerid,"SkillM4") +1);
		                if(GetPVarInt(playerid,"SkillM4") >= 10)
		                {
		                    if(PI[playerid][SkillGun][6] <= 9900)
		                    {
			                    PI[playerid][SkillGun][6] += 50;
								if(PI[playerid][Vip] == 1) PI[playerid][SkillGun][6] += 100;
			                    SetPVarInt(playerid, "SkillM4",0);
			                }
			                else
							{
								if(PI[playerid][SkillGun][6] >= 10000) PI[playerid][SkillGun][6] = 10000;
			                    SetPVarInt(playerid, "SkillM4", 0);
						    }
						    GameTextForPlayer(playerid, "успешно", 1, 5000);
		        			if(PI[playerid][Vip] == 0) SCM(playerid, cSERVER, "Ваш скилл Винтовки М4А1 повысился на {FFFFFF}0.5%%");
	     					else SCM(playerid, cSERVER, "Ваш скилл повысился на {FFFFFF}1.0%%");
		                }
           			}
	            }
	        }
	        // SetPlayerSkills(playerid);
	        SetPVarInt(playerid, "guntime", gettime()+2);
	    }
	}
    return 1;
}

// Синхранизация анимации
stock FixAnimacion(playerid) // Фикс анимации
{
    static animlibs[131][] = {
    "AIRPORT", "Attractors", "BAR", "BASEBALL", "BD_FIRE", "BEACH", "benchpress", "BF_injection",
    "BIKED", "BIKEH", "BIKELEAP", "BIKES", "BIKES", "BIKEV", "BIKE_DBZ", "BLOWJOBZ", "BMX",
    "BOMBER", "BOX", "BSKTBALL", "BUDDY", "BUS", "CAMERA", "CAR", "CARRY", "CAR_CHAT", "CASINO",
    "CHAINSAW", "CHOPPA", "CLOTHES", "COACH", "COLT45", "COP_AMBIENT", "COP_DVBYZ", "CRACK",
    "CRIB", "DAM_JUMP", "DANCING", "DEALER", "DILDO", "DODGE", "DOZER", "DRIVEBYS", "FAT",
    "FIGHT_B", "FIGHT_C", "FIGHT_D", "FIGHT_E", "FINALE", "FINALE2", "FLAME", "Flowers", "FOOD",
    "Freeweights", "GANGS", "GHANDS", "GHETTO_DB", "goggles", "GRAFFITI", "GRAVEYARD", "GRENADE",
    "GYMNASIUM", "HAIRCUTS", "HEIST9", "INT_HOUSE", "INT_OFFICE", "INT_SHOP", "JST_BUISNESS",
    "KART", "KISSING", "KNIFE", "LAPDAN1", "LAPDAN2", "LAPDAN3", "LOWRIDER", "MD_CHASE", "MD_END",
    "MEDIC", "MISC", "MTB", "MUSCULAR", "NEVADA", "ON_LOOKERS", "OTB", "PARACHUTE", "PARK",
    "PAULNMAC", "PED", "PLAYER_DVBYS", "PLAYIDLES", "POLICE", "POOL", "POOR", "PYTHON", "QUAD",
    "QUAD_DBZ", "RAPPING", "RIFLE", "RIOT", "ROB_BANK", "ROCKET", "RUSTLER", "RYDER", "SCRATCHING",
    "SEX", "SHAMAL", "SHOP", "SHOTGUN", "SILENCED", "SKATE", "SMOKING", "SNIPER", "SPRAYCAN",
    "STRIP", "SUNBATHE", "SWAT", "SWEET", "SWIM", "SWORD", "TANK", "TATTOOS", "TEC", "TRAIN",
    "TRUCK", "UZI", "VAN", "VENDING", "VORTEX", "WAYFARER", "WEAPONS", "WUZI"};
    for(new i = 0; i < 131; i++) ApplyAnimation(playerid, animlibs[i][0], "null", 0.0, 0, 0, 0, 0, 0);
    return 1;
}
//

// ============================== [ Паблики простые ] ====================== //

// Таймеры
publics SecondUpdate()
{
	UpdateText3D();
	foreach(new i: Player)
	{
	    if(GetPVarInt(i, "timer_login")>0)
	    {
			SetPVarInt(i, "timer_login", GetPVarInt(i, "timer_login") - 1);

			new string[64];
			string_f("%s", ConvertTime(GetPVarInt(i, "timer_login")));
			PlayerTextDrawSetString(i, LoginTime_PTD[i][3], string);

	  		if(GetPVarInt(i, "timer_login") == 0)
			{
			    DeletePVar(i, "timer_login");
			    SCM(i, cRED, "Время на авторизацию истекло!");
				for(t, 4) PlayerTextDrawHide(i, LoginTime_PTD[i][t]);
			    return Tkick(i);
			}
		}
	    if(PlayerLogin[i])
		{
	        PlayerAFK[i]++;
	        if(PlayerAFK[i] >= 2)
	        {
				new string[32];
				string_f("(( AFK: %s ))", ConvertTime(PlayerAFK[i]));
				SetPlayerChatBubble(i, string, cYELLOW, 20, 1050);

				if(GetAdmin(i) < 8 || !GetAdmin(i) && PlayerAFK[i] > 15*60)
				{
					new stringer[124];
				    stringer[0] = EOS;
				    stringer_f("Игрок %s был%s отключен%s от сервера. Причина: АФК > 15:00 мин.", GetName(i), (PI[i][Sex]==1)?(""):("а"), (PI[i][Sex]==1)?(""):("а"));
				    SCMAll(cWAR, stringer);
				    SCM(i, cWAR, "Сервер отключил Вас от сервера: Причина: АФК > 15:00 мин.");
					return Tkick(i);
				}
			}

			if(PlayerAFK[i] < 2)
			{
				PI[i][GameTime] ++; // Добавляем каждую секунду
				AcI[i][acTimeGameServer] ++; // Прибовляем к общему времени за день
				if(PI[i][GameTime] >= 3600) // Прошел час
				{
					PI[i][GameTime] = 0; // Обнуляем час
					update_int_mysql(T_PLAYER, "GameTime", PI[i][GameTime], "ID", PI[i][ID]);
					PlayerPayDay(i); // Зарплата для игрока

					/*if(AcI[i][acTimeGameServer] >= 86400) // Прошли 24 часа
					{
						AcI[i][acDayGameServer]++; // Прибовляем день
						update_int_mysql(T_ACC_S, "acDayGameServer", AcI[i][acDayGameServer], "acID", AcI[i][acID]);

						AcI[i][acTimeGameServer] = 0; // Обнуляем часы
						update_int_mysql(T_ACC_S, "acTimeGameServer", AcI[i][acTimeGameServer], "acID", AcI[i][acID]);
					}*/
				}
			}

			if(TimeInfo[i]!=0)
			{
				new monthName[12], string[54], stringer[32];
				TimeInfo[i] --;
				if(TimeInfo[i]==0) { for(new t; t < 8; t++) PlayerTextDrawHide(i, GameTime_PTD[i][t]); }
				else
				{
					getdate(year_s, month_s, day_s);
					switch(month_s)
					{
						case 1: monthName = "Января";
						case 2: monthName = "Февраля";
						case 3: monthName = "Марта";
						case 4: monthName = "Апреля";
						case 5: monthName = "Мая";
						case 6: monthName = "Июня";
						case 7: monthName = "Июля";
						case 8: monthName = "Августа";
						case 9: monthName = "Сентября";
						case 10: monthName = "Октября";
						case 11: monthName = "Ноября";
						case 12: monthName = "Декабря";
					}
					string_f("%s %02d %s %04d г.", GetNameDay(), day_s, monthName, year_s);

					gettime(hour_s, minute_s, second_s);
					stringer_f("%02d ч. %02d м. %02d с.", hour_s, minute_s, second_s);

					PlayerTextDrawSetString(i, GameTime_PTD[i][1], string); PlayerTextDrawShow(i, GameTime_PTD[i][1]);
					PlayerTextDrawSetString(i, GameTime_PTD[i][5], stringer); PlayerTextDrawShow(i, GameTime_PTD[i][5]);
					PlayerTextDrawSetString(i, GameTime_PTD[i][6], ConvertTime(PI[i][GameTime])); PlayerTextDrawShow(i, GameTime_PTD[i][6]);
					PlayerTextDrawSetString(i, GameTime_PTD[i][7], ConvertTime(AcI[i][acTimeGameServer])); PlayerTextDrawShow(i, GameTime_PTD[i][7]);
				}
			}

			if(GetPlayerState(i) != PLAYER_STATE_DRIVER) // Аренда транспорта
			{
				if(PlayerRent[i] != -1 && VehicleInfo[PlayerRent[i]][vRentID] != INVALID_PLAYER_ID) // Аренда транспорта
				{
				    VehicleInfo[PlayerRent[i]][vRentTime] --;
					if(VehicleInfo[PlayerRent[i]][vRentTime] == 0) return ArendaTime(i);
					{
						new string[150];
		                string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Конец аренды: ~w~%s", ConvertTime(VehicleInfo[PlayerRent[i]][vRentTime]));
						GameTextForPlayer(i, string, 1000, 3);
					}
				}
			}

			if(DI[i][DeathStatus] && DI[i][DeathTime] != 0) // Время до больницы
			{
				DI[i][DeathTime] --;
				if(DI[i][DeathTime] == 0)
				{
					DI[i][DeathStatus] = false;
					DI[i][DeathTime] = 0;
					if(!PlayerDied[i]) PlayerDied[i] = true;
					SpawnPlayer(i);
					SCMInfo(i, "Вы были отправлены в больницу!");
				}
				new string[150];
				string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Реанимация через: ~w~%s", ConvertTime(DI[i][DeathTime]));
				GameTextForPlayer(i, string, 1000, 3);
			}

			if(PI[i][Mute])
			{
				PI[i][MuteTime] --;
				if(PI[i][MuteTime] == 0)
				{
				    PI[i][Mute] = PI[i][MuteTime] = 0;
					if(SvMutePlayerStatus(i)) SvMutePlayerDisable(i); // Разблокировка Voice
					SCM(i, cSERVER, "Доступ к чату восстоновлен!");
				}
			}

			if(PI[i][Jail])
			{
				PI[i][JailTime] --;

				if(!PI[i][JailTime])
				{
					ResetPlayerWeapons(i);
					PI[i][Jail] = PI[i][JailTime] = 0;

					if(PI[i][Spawn] == 7)
					{
						StatusGateDemorgan[i] = false;
						MoveDynamicObject(GateDemorgan[i], -1767.2485, -2870.0015, 1031.7216, 1.5);
						DestroyPickup(picDemorgan[1]);

						SCM(i, cGREEN, "Вы были освобождены из под заключения.");
						SCM(i, cYELLOW, "Впредь больше не нарушайте правила сервера!");
						PI[i][Spawn] = 1;
						// DestroyDynamicObject(GateDemorgan[i]);
					}
					else
					{
						PI[i][Spawn] = 1;
						SpawnPlayer(i);
					}
				}
			}

			if(GetPVarInt(i, "ServerGMX")>0)
			{
			    new string[64];
			    SetPVarInt(i, "ServerGMX", GetPVarInt(i, "ServerGMX") - 1);
                string_f("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Рестарт через: ~w~%s", ConvertTime(GetPVarInt(i, "ServerGMX")));
                GameTextForPlayer(i, string, 1000, 3);

		  		/*if(GetPVarInt(i, "ServerGMX") == 1)
		  		{
				    for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
					SCMAll(cWAR, "===================================================================================");
					SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! Технический РЕСТАРТ сервера!");
					SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! На сервер можно будет зайти через 30 секунд после РЕСТАРТА!");
					SCMAll(cWAR, "===================================================================================");
					// SCM(i, 0xFF0000AA, !"Нажмите F6 и введите: /q (/quit) для выхода из игры.");
				}
		  		else */
				if(GetPVarInt(i, "ServerGMX") == 0)
				{
					for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
					SCMAll(cWAR, "===================================================================================");
					SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! Технический РЕСТАРТ сервера!");
					SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! На сервер можно будет зайти через 30 секунд после РЕСТАРТА!");
					SCMAll(cWAR, "===================================================================================");
					SCM(i, 0xFF0000AA, !"Нажмите F6 и введите: /q (/quit) для выхода из игры.");

		            SaveAllServer();
                    Tkick(i);
					DeletePVar(i, "ServerGMX");
					SendRconCommand("gmx");
				}
			}
		}
	}
	if(minute_s == 0 && second_s >= 0 && second_s <= 10 && PAYDAY == true) PAYDAY = false;
   	if(minute_s == 0 && second_s >= 11 && second_s <= 45 && PAYDAY == false)
   	{
		PAYDAY = true;
   	    ServerPayDay();
   	}
   	// Рестарт сервера в 4:00 по МСК
	if(hour_s == 4 && minute_s == 0 && second_s == 0)
	{
		for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Внимание! Через 10 минут произойдет автоматический ретарт сервер!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Если Вы работаете на подработка или на работе для новичков!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Убедительная просьба сохранить все Ваши заработаные средства и дождаться перезагрузки!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Помните: За пропажу или не сохранение данных, администрация ответственности не несет!");
	}
	if(hour_s == 4 && minute_s == 5 && second_s == 0)
	{
		for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Внимание! Через 5 минут произойдет автоматический ретарт сервер!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Если Вы работаете на подработка или на работе для новичков!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Убедительная просьба сохранить все Ваши заработаные средства и дождаться перезагрузки!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Помните: За пропажу или не сохранение данных, администрация ответственности не несет!");
	}
	if(hour_s == 4 && minute_s == 8 && second_s == 0)
	{
		for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Внимание! Через 2 минуты произойдет автоматический ретарт сервер!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Если Вы работаете на подработка или на работе для новичков!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Убедительная просьба сохранить все Ваши заработаные средства и дождаться перезагрузки!");
		SCMAll(cWAR, "[ СЕРВЕР ]{FFFFFF} Помните: За пропажу или не сохранение данных, администрация ответственности не несет!");
	}
	if(hour_s == 4 && minute_s == 10 && second_s == 0)
	{
		for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
		SCMAll(cWAR, "[ СЕРВЕР ] Внимание! Проходит автоматический ретарт сервер!");
		SCMAll(cWAR, "[ СЕРВЕР ] Через 30 секунд сервер будет работать!");
		foreach(new i: Player)
		{
			AcI[i][acTimeGameServer] = 0;
			update_int_mysql(T_ACC_S, "acTimeGameServer", AcI[i][acTimeGameServer], "acID", AcI[i][acID]);
		}
		SaveAllServer(); // AcI[playerid][acTimeGameServer]
		SetTimer("AutoRestart", 5*1000, false);
	}
   	// Реклама
    if(hour_s == 0 && minute_s == 00 || hour_s == 2 && minute_s == 00 || hour_s == 4 && minute_s == 00 || hour_s == 6 && minute_s == 00 || hour_s == 8 && minute_s == 00 || hour_s == 10 && minute_s == 00 ||
	hour_s == 12 && minute_s == 00 || hour_s == 14 && minute_s == 00 || hour_s == 16 && minute_s == 00 || hour_s == 18 && minute_s == 00 || hour_s == 20 && minute_s == 00 || hour_s == 22 && minute_s == 00 && second_s == 00)
	{
		SCMAll(cYELLOW, "Уважаемые игроки напоминаем что при обнаружении бага/недоработки Вы можете его/её зафиксировать");
        SCMAll(cYELLOW, "Для отправки бага/недоработки. "SERVER"Ведите: /debug [ Описание бага/недоработки ]");
        SCMAll(cYELLOW, "Помните что за найденый критический баг/недоработку Вы получете вознагрождение!");
        new string[50];
        string_f("Приятной игры на "SERVER"%s", SI[sName]);
        SCMAll(cYELLOW, string);
	}
	return SetTimer("SecondUpdate", 1*1000, false);
}

stock UpdateText3D()
{
	new stringVagon[156];
	format(stringVagon, sizeof(stringVagon), "В вагоне "SERVER"%s{FFFFFF} | "SERVER"80.000{FFFFFF} руды", ConvertCash(SI[sMineralVagon]));
	if(!SI[sStatusVagon]) UpdateDynamic3DTextLabelText(VagonInfo, -1, stringVagon);
	else UpdateDynamic3DTextLabelText(VagonInfo, -1, stringVagon);

	new stringSkladScahta[54];
	format(stringSkladScahta, sizeof(stringSkladScahta), "Склад шахты "SERVER"%s{FFFFFF} руды", ConvertCash(SI[sMinerals]));
	UpdateDynamic3DTextLabelText(SkladScahtaInfo[0], -1, stringSkladScahta);

	new stringSkladScahta2[54];
	format(stringSkladScahta2, sizeof(stringSkladScahta2), "Шахта - хранилище: "SERVER"%s{FFFFFF} руды", ConvertCash(SI[sMinerals]));
	UpdateDynamic3DTextLabelText(SkladScahtaInfo[1], -1, stringSkladScahta2);

	for(d, sizeof(DPI))
	{
		new stringDerevo[32];
		format(stringDerevo, sizeof(stringDerevo), "%s", (!DerevoStatus[d])?(""GREY"Не повалено"):(""GREEN"Повалено"));
		UpdateDynamic3DTextLabelText(DerevoInfo[d], -1, stringDerevo);
	}

	// Система ATM - Банкомата
	for(new a = 1; a <= TOTALATM; a++)
	{
	    new str[124], string[512];
		format(str, sizeof(str), "{FFFFFF}Банкомат: "SERVER"№ %i {FFFFFF}- %s\n\n", ATMInfo[a][aID], (!ATMInfo[a][aStatus])?(""GREEN"Доступен"):(""RED"Не доступен")); strcat(string, str);
		strcat(string, ""GREY"Нажмите: [ ALT ]");
		UpdateDynamic3DTextLabelText(ATMText[a], cSERVER, string);
	}
	//

	// Система билбордов
	for(new i = 1; i <= TOTALBILBORD; i++)
	{
		if(GetString(BI[i][bText], "NULL")) format(BilBordText[i], 90, "{FFFFFF}Рекламный щит: {FF9900}№ %d{FFFFFF}\n\nЗдесь может быть ваша\n{FF9900}реклама", BI[i][bID]);
		else format(BilBordText[i], 90, "%s", BI[i][bText]);

		SetDynamicObjectMaterialText(BoldObject[i], 2, BilBordText[i], 90, "Impact", 24, 0, -32256, -16777216, 1);
	}
}

publics SetMineral(playerid) // Добыча руды
{
	DeletePVar(playerid, "StatusMine");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 1, 1);
	RemovePlayerAttachedObject(playerid, 3);
	SetPlayerAttachedObject(playerid, 4, 2936, 1, 0.184699, 0.426247, 0.0000, 259.531341, 80.949592, 0.0000, 0.476124, 0.468181, 0.470769);
	SetPVarInt(playerid, "StatusMine", 2);
	new minerals = 5 + random(25);
	PlayerMineral[playerid] = minerals;
	SCMInfo(playerid, "Отнесите добытую руду в вагон!");
	return MestaMinerals(playerid);
}

publics MovedVagon(playerid) // Движение вагона на разгрузку
{
	foreach(new i: Player)
	{
	    if(!JobMine[i]) continue;
		{
			DeletePVar(i, "StatusMine");
			SCMInfo(i, "[ Шахта ] - Вагон приехал на разгрузку!");
			SCM(i, cBLUE, "Отправляйтесь на перенос руды на склад!");
			SetPVarInt(i, "StatusMine", 3);
			MestaMinerals(i);
		}
	}
	return 1;
}

publics MovedVagonBack(playerid) // Движение вагона на загрузку
{
	foreach(new i: Player)
	{
	    if(!JobMine[i]) continue;
		{
			DeletePVar(i, "StatusMine");
			SCMInfo(i, "[ Шахта ] - Вагон приехал на загрузку!");
			SCM(i, cBLUE, "Отправляйтесь на добычу новой руды!");
			SetPVarInt(i, "StatusMine", 1);
			MestaMinerals(i);
		}
	}
	return 1;
}

publics HospitalTimer()
{
	foreach(new i: Player)
	{
	    if(PlayerLogin[i])
		{
			if(PlayerDied[i]==true)
			{
				HospitalHealth(i);
			}
		}
	}
	return SetTimer("HospitalTimer", 30*1000, false);
}

// Лифт и двери от него
publics LiftMovedUp() //
{
    if(StatusLift == 3)
    {
        StatusLift = 0;
		MoveDynamicObject(DoorsLiftUp[0], 2643.3054, 1776.5728, 3502.8611, 1.5);
		MoveDynamicObject(DoorsLiftUp[1], 2643.3054, 1773.3087, 3502.8611, 1.5);
    }
	return 1;
}
publics LiftMovedUp1()
{
    if(StatusLift == 3)
    {
        // Прикрепить двери к лифту
		AttachObjectToObject(DoorsLiftAttach[0], LiftCabin, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000);
		AttachObjectToObject(DoorsLiftAttach[1], LiftCabin, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000);
        MoveDynamicObject(LiftCabin, 2643.3535, 1774.9407, 3502.8911, 2.5);
        SetTimer("LiftMovedUp1Doors", 30000, false);
    }
	return 1;
}
publics LiftMovedUp1Doors()
{
    if(StatusLift == 3)
    {
        StatusLift = 0;
		DestroyDynamicObject(DoorsLiftAttach[0]);
        DestroyDynamicObject(DoorsLiftAttach[1]);
		MoveDynamicObject(DoorsLiftUp[0], 2643.3054, 1776.5728, 3502.8611, 0.7);
		MoveDynamicObject(DoorsLiftUp[1], 2643.3054, 1773.3087, 3502.8611, 0.7);
    }
	return 1;
}
publics LiftMovedDown()
{
    if(StatusLift == 1)
    {
        StatusLift = 2;
		MoveDynamicObject(DoorsLiftDown[0], 2643.3054, 1776.5728, 3426.8533, 1.5);
		MoveDynamicObject(DoorsLiftDown[1], 2643.3054, 1773.3087, 3426.8533, 1.5);
    }
	return 1;
}
publics LiftMovedDown1()
{
    if(StatusLift == 1)
    {
        // Прикрепить двери к лифту
		AttachObjectToObject(DoorsLiftAttach[0], LiftCabin, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000);
		AttachObjectToObject(DoorsLiftAttach[1], LiftCabin, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000);
        MoveDynamicObject(LiftCabin, 2643.3535, 1774.9407, 3426.8882, 2.5);
        SetTimer("LiftMovedDown1Doors", 30000, false);
    }
	return 1;
}
publics LiftMovedDown1Doors()
{
    if(StatusLift == 1)
    {
        StatusLift = 2;
		DestroyDynamicObject(DoorsLiftAttach[0]);
        DestroyDynamicObject(DoorsLiftAttach[1]);
		MoveDynamicObject(DoorsLiftDown[0], 2643.3054, 1776.5728, 3426.8533, 0.7);
		MoveDynamicObject(DoorsLiftDown[1], 2643.3054, 1773.3087, 3426.8533, 0.7);
    }
	return 1;
}
//

// Обновление спедометра
publics Update_Speed(playerid) // Обновление данных спидометра
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	{
		new carid = GetPlayerVehicleID(playerid);
		new speedstring[256], Float: hp, Float: fuel;

		if((carid) && IsAPlane(carid)) return 1;
		{
			GetVehicleHealth(carid, hp);
			fuel = VehicleInfo[carid][vFuel];

			PlayerTextDrawColor(playerid, Speed_PTD[playerid][1], !VehicleInfo[carid][vEngine] ? cRED : cGREEN); // Двигатель
			PlayerTextDrawShow(playerid, Speed_PTD[playerid][1]);
			PlayerTextDrawColor(playerid, Speed_PTD[playerid][2], !VehicleInfo[carid][vLights] ? cRED : cGREEN); // Фары
			PlayerTextDrawShow(playerid, Speed_PTD[playerid][2]);
			PlayerTextDrawColor(playerid, Speed_PTD[playerid][3], !VehicleInfo[carid][vDoors] ? cRED : cGREEN); // Двери
			PlayerTextDrawShow(playerid, Speed_PTD[playerid][3]);
			PlayerTextDrawColor(playerid, Speed_PTD[playerid][14], !StatusRemen[playerid] ? cRED : cGREEN); // Ремень
			PlayerTextDrawShow(playerid, Speed_PTD[playerid][14]);

			if(fuel <= 0) PlayerTextDrawHide(playerid, Speed_PTD[playerid][4]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][4]);
			if(fuel <= 10) PlayerTextDrawHide(playerid, Speed_PTD[playerid][5]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][5]);
			if(fuel <= 20) PlayerTextDrawHide(playerid, Speed_PTD[playerid][6]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][6]);
			if(fuel <= 30) PlayerTextDrawHide(playerid, Speed_PTD[playerid][7]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][7]);
			if(fuel <= 40) PlayerTextDrawHide(playerid, Speed_PTD[playerid][8]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][8]);
			if(fuel <= 50) PlayerTextDrawHide(playerid, Speed_PTD[playerid][9]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][9]);
			if(fuel <= 60) PlayerTextDrawHide(playerid, Speed_PTD[playerid][10]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][10]);
			if(fuel <= 70) PlayerTextDrawHide(playerid, Speed_PTD[playerid][11]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][11]);
			if(fuel <= 80) PlayerTextDrawHide(playerid, Speed_PTD[playerid][12]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][12]);
			if(fuel <= 90) PlayerTextDrawHide(playerid, Speed_PTD[playerid][13]);
			else PlayerTextDrawShow(playerid, Speed_PTD[playerid][13]);

			format(speedstring, sizeof(speedstring), "%.0f Л.", fuel);
			PlayerTextDrawSetString(playerid, Speed_PTD[playerid][15], speedstring);

			format(speedstring, sizeof(speedstring), "%i", VehicleSpeed(carid)); // Показать скорость игроку
			PlayerTextDrawSetString(playerid, Speed_PTD[playerid][16], speedstring);

			format(speedstring,sizeof(speedstring),"%.0f%", hp/10); // Показать здоровье транспорта игроку
			PlayerTextDrawSetString(playerid, Speed_PTD[playerid][19], speedstring);

			if(VehicleInfo[carid][vFuel] < 0.1)
			{
				GameTextForPlayer(playerid, "~r~Нет бензина", 300, 3);
				SetEngine(carid, false);
				// if(GetLights(carid)) SetLights(carid, false);
			}
			return TimerSpeed[playerid] = SetTimerEx("Update_Speed", 50, false, "i", playerid);
		}
	}
}

publics Update_Fuel(carid)
{
	if(VehicleSpeed(carid)>0) VehicleInfo[carid][vFuel] -= 1.0;
	else VehicleInfo[carid][vFuel] -= 0.5;
	return UpdateFuel[carid] = SetTimerEx("Update_Fuel", 20*1000, false, "i", carid);
}
//

// Работа Лесоповал
publics UpdateDerevo(playerid, d) // После анимации сруба дерева
{
	if(!DerevoStatus[d])
	{
		DerevoStatus[d] = true;
		DestroyDynamicObject(Derevo[d]);
		// Выдать телегу с бревнами
		SetPlayerAttachedObject(playerid, 0, 1463, 1, 0.184699, 0.426247, 0.000000, 259.531341, 80.949592, 0.000000, 0.476124, 0.468181, 0.470769); // дрова в руках
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	return 1;
}

publics UpdateDerevoPeni(d)
{
	if(DerevoStatus[d])
	{
		DerevoStatus[d] = false;
		DestroyDynamicObject(Derevo[d]);
		Derevo[d] = CreateDynamicObject(620, DPI[d][Derevo_posX], DPI[d][Derevo_posY], DPI[d][Derevo_posZ], DPI[d][Derevo_RposX], DPI[d][Derevo_RposY], DPI[d][Derevo_RposZ], 0, 0, -1, 300.0, 300.0);
	}
	return 1;
}
//

publics AutoRestart()
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;
		Tkick(i);
	}
	return SendRconCommand("gmx");
}

// ============================== [ Паблики проверки ] ====================== //

publics CheckPlayerAccBanIP(playerid) // Проверка на блокировку игрока по IP
{
	cache_get_row_count(rows);
	if(rows) return Tkick(playerid);
	{
		PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);

		for(new i = 0; i < 10; i++) SCM(playerid, -1, "");
		SCM(playerid, cSERVER, "____________________________________________________________");
	    SCM(playerid, -1, "");
	    FSCM(playerid, -1, "Добро пожаловать на сервер: "SERVER"%s", SI[sName]);
	    // SCM(playerid, -1, "Разработчик - (Основатель): "SERVER"Андрей Морозов - ( Andrei_Vladimirovich )");
	    FSCM(playerid, -1, "Группа Вконтакте: "SERVER"%s", SI[sGroup]);
	    FSCM(playerid, -1, "Сайт: "SERVER"%s", SI[sWeb]);
	    FSCM(playerid, -1, "Форум: "SERVER"%s", SI[sForum]);
	    SCM(playerid, cSERVER, "____________________________________________________________");
	    SCM(playerid, -1, "");

		GetPlayerName(playerid, GetName(playerid), 24);

		if(!GetString(SI[sPassword], "None")) return ServerTehRaboti(playerid);
		{
			new string[156];
			string_f("SELECT * FROM "T_BAN" WHERE `bName` = '%s' AND `bUnBanData` > NOW() LIMIT 1", GetName(playerid));
			mysql_tquery(mysql, string, "CheckPlayerBan", "i", playerid); // Проверка на блокировку игрока
		}
	}
	return 1;
}

publics CheckPlayerOffBan(playerid, banStatus, banNames[], Day, Reason[])
{
	cache_get_row_count(rows);
	if(!rows)
	{
		new id = GetPlayerID(banNames);

		new string[512];
		string_f(
			"INSERT INTO "T_BAN" (`bName`, `bAdmin`, `bData`, `bReason`, `bDay`, `bUnBanData`, `bStatus`) VALUES \
		('%s', '%s', NOW(), '%s', %i, NOW() + INTERVAL %d DAY, %i)", banNames, GetName(playerid), Reason, Day, Day, banStatus);
		mysql_query(mysql, string);

		if(banStatus)
		{
			new stringer[256];
			stringer_f( "UPDATE "T_PLAYER" SET `Money` = 0, `Bank` = 0 WHERE `Login` = '%s'", banNames);
			mysql_query(mysql, stringer);
		}

		string[0] = EOS;
		string_f("%s [%i] заблокировал(-а) игрока %s в Offline. Причина: %s", AdminName(playerid), AI[playerid][aNumber], banNames, Reason);
		SCMAll(cWAR, string);

		if(IsPlayerConnected(id)) Tkick(id);
		return 1;
	}
	else
	{
		new dates[32], old_date[32], admin_name[24];

		cache_get_value_name(0, "bName", banNames, 24);
		cache_get_value_name(0, "bAdmin", admin_name, 24);
		cache_get_value_name(0, "bData", old_date, 32);
		cache_get_value_name(0, "bUnBanData", dates, 32);
		cache_get_value_name(0, "bReason", Reason, 64);
		cache_get_value_name_int(0, "bDay", Day);
		cache_get_value_name_int(0, "bStatus", banStatus);

		new string[512], str[124];
		format(str, sizeof(str), "{FFFFFF}Имя игрока: "SERVER"%s\n", banNames); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Номер администратора: "SERVER"%s\n", admin_name); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Дата блокировки: "SERVER"%s\n", old_date); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Дата разблокировки: "SERVER"%s\n", dates); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Кол-во длней: "SERVER"%i\n", Day); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Причина боокировки: "SERVER"%s\n", Reason); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Причина боокировки: "SERVER"%s\n", (!banStatus)?(""WAR"Без обнуления"):(""GREEN"С обнулением")); strcat(string, str);
		SPD(playerid, dNull, d_info, ""SERVER"Инфомация о блокировке", string, "Закрыть", "");
		return 1;
	}
}

publics CheckPlayerAcc(playerid)
{
	cache_get_row_count(rows);
 	if(!rows) return DialogPlayerRegister(playerid);
	{
		cache_get_value_name_int(0, "acLastIP", AcI[playerid][acLastIP]);
		cache_get_value_name_int(0, "acPinCode", AcI[playerid][acPinCode]);
		cache_get_value_name_int(0, "acStatusPin", AcI[playerid][acStatusPin]);
		DialogPlayerLogin(playerid);
	}
	return 1;
}

publics CheckPlayerBan(playerid) // Проверка игрока на блокировку
{
	cache_get_row_count(rows);
	if(rows)
	{
		new dates[32], reason[64], old_date[32], admin_name[MAX_PLAYER_NAME];

		cache_get_value_name(0, "bAdmin", admin_name, MAX_PLAYER_NAME);
		cache_get_value_name(0, "bData", old_date, 32);
		cache_get_value_name(0, "bUnBanData", dates, 32);
		cache_get_value_name(0, "bReason", reason, 64);
		new stringer[1024];

        stringer[0] = EOS;
		format(stringer, sizeof(stringer), "{FFFFFF}\
			Ваш аккаунт был заблокирован за нарушение правил сервера.\n\n\
			Ваше игровое имя: "SERVER"%s\n\
			{FFFFFF}Имя администратора: "SERVER"%s\n\
			{FFFFFF}Дата блокировки: "SERVER"%s\n\
			{FFFFFF}Причина блокировки: "SERVER"%s\n\
			{FFFFFF}Дата разблокировки: "SERVER"%s\n\n\
			{FFFFFF}Пожалуйста, сделайте скриншот данного окна "SERVER"(F8){FFFFFF},\n\
			если вы не согласны с наказанием, то оставьте жалобу на форуме "SERVER"%s{FFFFFF}.",
		GetName(playerid), admin_name, old_date, reason, dates, SI[sForum]);
		SPD(playerid, dNull, d_info, "{FFCC00}Информация о блокировке", stringer, "Выход", "");
		return Tkick(playerid);
	}
	else
	{
 		new string[256];
		string_f("SELECT `acLastIP`, `acPinCode`, `acStatusPin` FROM "T_ACC_S" WHERE `acLogin` = '%s'", GetName(playerid));
		mysql_tquery(mysql, string, "CheckPlayerAcc", "i", playerid); // Проверка на аккаунт
	}
	return 1;
}

publics CheckEmailAcc(playerid, emails[])
{
	cache_get_row_count(rows);
	if(rows)
	{
		PlayerPlaySound(playerid, 1150,0,0,0);
		new string[1024];
		string_f("{FFFFFF}Добро пожаловать "SERVER"%s{FFFFFF} на сервер %s{FFFFFF}!\n\
		Ваш аккаунт еще не зарегистрирован на сервере.\n\n\
		Чтобы зарегистрироваться на сервере,\n\
		Вам необходимо указать адресс электронной почты.\n\n\
		Обратите внимание:\n\
			\t- Почта должна быть уникальной\n\
			\t- Почта должна содержать следующие символы ('@', '.ru', '.com')\n\n\
		"RED"Указанная Вами почта уже существует, укажите другую почту!",
		GetName(playerid), SI[sName]);
		SPD(playerid, dRegPlayerEmail, d_input, "{FFFFFF}Регистрация | Создания почты", string, "Далее >>", "Отмена");
	}
	else
	{
		new string[1024], stringMail[1024];
		new MaillCode = 6 + random(1000000);

		format(stringMail, sizeof(stringMail), "Добро пожаловать на %s. Ваш код подтверждения - %i", SI[sName], MaillCode);
		SendMail(emails, "support@redwich-rp.ru", "Подтверждение почты при регистрации!", "Redwich Games - Email Code", stringMail);

		SetPVarString(playerid, "RegMail", emails);
		SetPVarInt(playerid, "RegMailCode", MaillCode);

		FSCM(playerid, -1, "%i", MaillCode);

		string_f("{FFFFFF}На Вашу указанную почту "SERVER"%s{FFFFFF} выслан код подтверждения.\n\
		Обязательно проверьте папку "SERVER"СПАМ{FFFFFF}, бывает что туда приходит почта!\n\n\
		Укажите Ваш код ниже:", emails);
		SPD(playerid, dRegPlayerEmailPass, d_input, "{FFFFFF}Регистрация | Подтверждение почты", string, "Далее >>", "Отмена");
	}
	return true;
}

publics CheckReferalAcc(playerid, name[])
{
	cache_get_row_count(rows);
	if(rows)
	{
	    strmid(AcI[playerid][acReferal], name, 0, strlen(name), MAX_PLAYER_NAME);
	    return DialogPlayerRegisterSex(playerid);
	}
	else
	{
		PlayerPlaySound(playerid, 1150,0,0,0);
		new string[1024];
		string_f("{FFFFFF}Добро пожаловать "SERVER"%s{FFFFFF} на сервер %s{FFFFFF}!\n\
		Ваш аккаунт еще не зарегистрирован на сервере.\n\n\
		Чтобы зарегистрироваться на сервере,\n\
		Вам необходимо указать Имя игрока который приглосил Вас на сервер.\n\n\
		Обратите внимание:\n\
			"GREEN"При достижении Вами 8-го урованя, Вам и Вашему другу будет выдано по 300.000 рублей игровой валюты!\n\n\
		"RED"Указанное Имя реферала %s не найден в базе регистра!",
		GetName(playerid), SI[sName]);
		SPD(playerid, dRegPlayerReferal, d_input, "{FFFFFF}Регистрация | Реферал", string, "Далее >>", "Пропустить");
	}
	return true;
}

publics CheckFullAdmin(playerid, to_player)
{
	new fsName[24], string[250];
	GetPVarString(playerid, "faPutName", fsName, sizeof(fsName));

	cache_get_row_count(rows);
    if(!rows)
	{
		string_f("INSERT INTO "T_FULL_ADMIN" (`faName`, `faData`, `faPutName`) VALUES ('%s', NOW(), 'Sustem')", GetName(to_player), FAI[to_player][faPutName]);
		mysql_query(mysql, string);
		FSCM(playerid, cGREEN, "Вы успешно устоновили игрока %s [%d] как администратора с полным доступом!", GetName(to_player), to_player);

		SetString(FAI[to_player][faName], GetName(to_player));
		SetString(FAI[to_player][faPutName], fsName);
		DeletePVar(playerid, "faPutName");
	}
	else
	{
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		string_f("Игрок %s уже являеться администратором с полным доступом!", GetName(to_player));
		SCM(playerid, cWAR, string);
		return DeletePVar(playerid, "faPutName");
	}
	return 1;
}

publics CheckPlayerPassword(playerid)
{
	cache_get_row_count(rows);
    if(rows)
    {
		DeletePVar(playerid, "timer_login");
		for(i, 4) PlayerTextDrawHide(playerid, LoginTime_PTD[playerid][i]);

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
		StopAudioStreamForPlayer(playerid);

		new ip[16];
		GetPlayerIp(playerid, ip, sizeof(ip));

		if(AcI[playerid][acPinCode] != 0)
		{
			if(AcI[playerid][acStatusPin])
			{
				return SPD(playerid, dSetPin, d_input, ""SERVER"Защитный PIN код", ""WHITE"\
					Введите защитный "SERVER"PIN код"WHITE" для входа на сервер!",
				"Указать", "Отмена");
			}
			else
			{
				if(!GetString(AcI[playerid][acLastIP], ip))
				{
					return SPD(playerid, dSetPin, d_input, ""SERVER"Защитный PIN код", ""WHITE"\
						Введите защитный "SERVER"PIN код"WHITE" для входа на сервер!",
					"Указать", "Отмена");
				}
			}
		}
		new stringupdate[256];
		format(stringupdate, sizeof(stringupdate), "UPDATE "T_ACC_S" SET `acLastIP` = '%s', `acLastData` = NOW() WHERE `acLogin` = '%s'", ip, GetName(playerid));
		mysql_query(mysql, stringupdate);

		new string[100];
		format(string, sizeof(string),"SELECT * FROM "T_ACC_S" WHERE `acLogin` = '%s'", GetName(playerid));
		mysql_tquery(mysql, string, "LoadAccPlayer", "i", playerid);
	}
	else
	{
		PasswordError[playerid]--;
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		if(PasswordError[playerid] < 1)
		{
			DeletePVar(playerid, "timer_login");
			for(i, 4) PlayerTextDrawHide(playerid, LoginTime_PTD[playerid][i]);
			return Tkick(playerid);
		}
		new string[256];
		string_f("{FFFFFF}\
			Добро пожаловать на "SERVER"%s{FFFFFF}\n\n\
			Введите свой пароль\n\
			Попыток для ввода: "GREEN"%i", SI[sName], PasswordError[playerid]);
		return SPD(playerid, dPlayerLogin, d_pass, ""WHITE"Авторизация", string, "Ввести", "Отмена");
	}
	return 1;
}

publics CheckListAdmins(playerid)
{
	cache_get_row_count(rows);
   	if(!rows) return SPD(playerid, dAdminPanelOff, d_info, "{FFCC00}Список всех администраторов", "{FFFFFF}Действующих администраторов нет!", "<< Назад", "Закрыть");
	{
		new full, stringer[2048], string[100];
		strcat(stringer, ""SERVER"Имя\t"SERVER"Должность администратора\t"SERVER"Посленая авторизация\t"SERVER"Статус\n");
	    for(new i; i < rows; i++)
	    {
	        cache_get_value_name(i, "aName", AI[i][aName], 24);
	        cache_get_value_name_int(i, "aLevel", GetAdmin(i));
	        cache_get_value_name(i, "aData", AI[i][aData], 20);
	        cache_get_value_name(i, "aPutName", AI[i][aPutName], 24);
	        cache_get_value_name(i, "aDataVhod", AI[i][aDataVhod], 20);
	        cache_get_value_name(i, "aPrefix", AI[i][aPrefix], 12);
	        cache_get_value_name_int(i, "aReputacion", AI[i][aReputacion]);
	        cache_get_value_name_int(i, "aWarn", AI[i][aWarn]);
			full++;

	    	format(stringer, sizeof(stringer), "%s %s\t"SERVER"%d | %s {FFFFFF}\t"BLUE"%s{FFFFFF}\t%s\n", stringer, AI[i][aName], GetAdmin(i), Admin_Name[GetAdmin(i)-1], AI[i][aDataVhod], (!IsPlayerConnected(i))?(""RED"offline"):(""GREEN"online"));
			format(string,sizeof(string),"{FFFFFF} Общее колличество администраторов: "SERVER"[%i]", full);
			SetPVarInt(playerid, "ListOffAdmin", full);
		}
		SPD(playerid, dAdminPanelOff, d_tlisth, string, stringer, "<< Назад", "Закрыть");
	}
	return 1;
}

// Проверка пароля администратора
publics CheckAdminPass(playerid)
{
	new string[512];
	cache_get_row_count(rows);
	if(!rows)  // Не верно
	{
		string[0] = EOS;
		strcat(string, "{FFFFFF}Для смены пароля Вам необходимо укзать Ваш текущий пароль, чтобы понять что Вы его не забыли!\n\n");
		strcat(string, ""SERVER"После ввода правельного пароля Вам в VK или на Почту придет одноразовый код для подтверждения что Вы владелец аккаунта!\n\n");
		strcat(string, ""WAR"Пароль указан не верно!\n");
		strcat(string, ""GREY"Введите пароль в поле ниже:");
		SPD(playerid, dAdminSmenaPassCode, d_pass, ""WHITE"Смена пароля администратора | "SERVER"Старый пароль", string,	"Указать", "<< Назад");
	}
	else // Верно
	{
		string[0] = EOS;
		strcat(string, "{FFFFFF}Для смены пароля Вам необходимо укзать Ваш текущий пароль, чтобы понять что Вы его не забыли!\n\n");
		strcat(string, ""SERVER"После ввода правельного пароля Вам в VK или на Почту придет одноразовый код для подтверждения что Вы владелец аккаунта!\n\n");
		strcat(string, ""GREEN"Пароль указан верно!\n");
		strcat(string, ""GREY"Введите пароль в поле ниже:");
		SPD(playerid, dAdminSmenaPassCode, d_pass, ""WHITE"Смена пароля администратора | "SERVER"Старый пароль", string,	"Указать", "<< Назад");
	}
	return 1;
}

publics CheckOffPlayerStats(playerid, name[])
{
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "Игрок с таким Ником не найден!");
	{
		new ids = GetPlayerID(name), id = rows, stringAdmin[120], Lics[16], strSkillGun[50], str[124], statsString[1024];
	    if(IsPlayerConnected(ids)) return SEM(playerid, "Игрок в сети. Используйте: /check [ ID игрока ]");
		{
		    cache_get_value_name_int(0, "ID", PI[id][ID]);
		    cache_get_value_name(0, "Name", PI[id][Name], 24);
		    cache_get_value_name_int(0, "Sex", PI[id][Sex]);
		    cache_get_value_name_int(0, "Skin", PI[id][Skin]);
		    cache_get_value_name_int(0, "Age", PI[id][Age]);
		    cache_get_value_name_int(0, "Exp", PI[id][Exp]);
		    cache_get_value_name_int(0, "Level", PI[id][Level]);
		    cache_get_value_name_int(0, "Satiety", PI[id][Satiety]);
		    cache_get_value_name_int(0, "Job", PI[id][Job]);
		    cache_get_value_name_int(0, "Money", GetMoney(id));
		    cache_get_value_name_int(0, "Bank", GetBank(id));
		    cache_get_value_name_int(0, "Donat", PI[id][Donat]);
		    cache_get_value_name_float(0, "Health", PI[id][Health]);
		    cache_get_value_name_int(0, "Zakon", PI[id][Zakon]);
		    cache_get_value_name_int(0, "Wanted", PI[id][Wanted]);
		    cache_get_value_name_int(0, "Voenik", PI[id][Voenik]);
			cache_get_value_name(0, "Lic", Lics, 16), sscanf(Lics, "p<,>a<i>[8]", PI[id][Lic]);
		    cache_get_value_name_int(0, "Pasport", PI[id][Pasport]);
		    cache_get_value_name_int(0, "MedCard", PI[id][MedCard]);
		    cache_get_value_name_int(0, "Phone", PI[id][Phone]);
		    cache_get_value_name_int(0, "SimCard", PI[id][SimCard]);
		    cache_get_value_name_int(0, "PhoneMoney", PI[id][PhoneMoney]);
		    //
		    cache_get_value_name_int(0, "Frac", PI[id][Frac]);
		    cache_get_value_name_int(0, "FracLeader", PI[id][FracLeader]);
		    cache_get_value_name_int(0, "FracSkin", PI[id][FracSkin]);
		    cache_get_value_name_int(0, "FracRang", PI[id][FracRang]);
		    cache_get_value_name_int(0, "FracWarn", PI[id][FracWarn]);
		    cache_get_value_name_int(0, "Vip", PI[id][Vip]);
		    cache_get_value_name_int(0, "MuteTime", PI[id][MuteTime]);
		    cache_get_value_name_int(0, "Jail", PI[id][Jail]);
		    cache_get_value_name_int(0, "JailTime", PI[id][JailTime]);
		    cache_get_value_name_int(0, "Warn", PI[id][Warn]);
		    cache_get_value_name_int(0, "Family", PI[id][Family]);
		    cache_get_value_name_int(0, "ShtrafPPS", PI[id][ShtrafPPS]);
		    cache_get_value_name_int(0, "ShtrafDPS", PI[id][ShtrafDPS]);
			cache_get_value_name(0, "SkillGun", strSkillGun, 50), sscanf(strSkillGun, "p<,>a<i>[7]", PI[id][SkillGun]);
			SetPlayerSkills(ids);

			strcat(statsString, ""WHITE"");
			format(str, sizeof(str), "Имя: \t\t%s [UID: %i]\n\n", GetName(ids), PI[id][ID]); strcat(statsString, str);
			format(str, sizeof(str), "Уровень: \t%i (%i | %i)\n", PI[id][Level], PI[id][Exp], (PI[id][Level]+1)*4); strcat(statsString, str);
			format(str, sizeof(str), "Деньги (На руках | В банке): \t[ %s р. | %s р. ]\n", ConvertCash(GetMoney(id)), ConvertCash(GetBank(id))); strcat(statsString, str);
			if(PI[ids][Frac]!=0)
			{
				format(str, sizeof(str), "Организация: %s - [ %i ( %s ) ]\n\n", FracI[GetFrac(id)][fName], GetRangName[GetFrac(id)][PI[id][FracRang]-1], PI[id][FracRang]); strcat(statsString, str);
				format(str, sizeof(str), "Выговор:\t\t\t"SERVER"%d | 3{FFFFFF}\n\n", PI[id][FracWarn]); strcat(statsString,str);
			}
			/*
			strcat(statsString, "------------ Навоки владения оружием ------------\n");
			format(str, sizeof(str), "СВД: \t\t\t%d%% | 100%%\n", PI[ids][SkillGun][0]/100); strcat(statsString, str);
			format(str, sizeof(str), "Пустынный орёл: \t%d%% | 100%%\n", PI[ids][SkillGun][1]/100); strcat(statsString, str);
			format(str, sizeof(str), "Драбовик: \t\t%d%% | 100%%\n", PI[ids][SkillGun][2]/100); strcat(statsString, str);
			format(str, sizeof(str), "Пистолет ТТ: \t\t%d%% | 100%%\n", PI[ids][SkillGun][3]/100); strcat(statsString, str);
			format(str, sizeof(str), "MP5: \t\t\t%d%% | 100%%\n", PI[ids][SkillGun][4]/100); strcat(statsString, str);
			format(str, sizeof(str), "Винтовка M4A1: \t%d%% | 100%%\n", PI[ids][SkillGun][5]/100); strcat(statsString, str);
			format(str, sizeof(str), "Автомат AK-47: \t\t%d%% | 100%%\n", PI[ids][SkillGun][6]/100); strcat(statsString, str);
			strcat(statsString, "--------- Навоки владения транспортом ---------\n");
			format(str, sizeof(str), "Лицензия '"SERVER"A"WHITE"': \t\t%s\n", (PI[ids][Lic][0])?(""GREEN"Есть"WHITE""):(""RED"Нет"WHITE"")); strcat(statsString, str);
			format(str, sizeof(str), "Лицензия '"SERVER"B"WHITE"': \t\t%s\n", (PI[ids][Lic][0])?(""GREEN"Есть"WHITE""):(""RED"Нет"WHITE"")); strcat(statsString, str);
			format(str, sizeof(str), "Лицензия '"SERVER"D"WHITE"': \t\t%s\n", (PI[ids][Lic][0])?(""GREEN"Есть"WHITE""):(""RED"Нет"WHITE"")); strcat(statsString, str);
			format(str, sizeof(str), "Лицензия '"SERVER"C"WHITE"': \t\t%s\n", (PI[ids][Lic][0])?(""GREEN"Есть"WHITE""):(""RED"Нет"WHITE"")); strcat(statsString, str);
			strcat(statsString, "_______________________________________\n");
			*/
			SPD(playerid, dNull, d_info, "Статистика игрока в Offline", statsString, "Закрыть", "");

			format(stringAdmin, sizeof(stringAdmin), "[A] %s [%i] просматривает статистику иргока %s в offline.", AdminName(playerid), AI[playerid][aNumber], GetName(ids));
			SCMAdmin(cGREY, stringAdmin);
		}
	}
	return 1;
}

// Проверка администратора
publics CheckAdminLogin(playerid, name[])
{
	cache_get_row_count(rows);
	if(!rows) return 1;
	{
		new string[500];
		if(GetString(AI[playerid][aPassword], "NoPass"))
		{
			SetPVarInt(playerid, "type_alogin", 1);
			SPD(playerid, dAdminLogin, d_input, ""SERVER"Регистрация администратора", "\
				{FFFFFF}Введите пароль, который будет от панели администратора\n\n\
				{63BD4E}Примечание:\n\t\
				- Пароль должен состоять из латинских букв и цифр\n\t\
				- Размер пароля от 6 до 16 символов",
			"Принять", "Отмена");
		}
		else
		{
			SetPVarInt(playerid, "type_alogin", 0);
	  		string_f("\
				{FFFFFF}Ваш логин для входа в Панель администратора: "SERVER"%s\n\
				{FFFFFF}Ваш уровень администрирования: "SERVER"%s - (%d)\n\n\
				{FFFFFF}Введите Ваш пароль от панели администратора", GetName(playerid), Admin_Name[GetAdmin(playerid)-1], GetAdmin(playerid));
	        SPD(playerid, dAdminLogin, d_pass, ""SERVER"Доступ администратора", string, "Принять", "Отмена");
		}
	}
	return 1;
}

// Регистрация
publics CheckAdminAloginReg(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return DeletePVar(playerid, "inputtext");
	{
		new string[350], AdminPass[40];
		GetPVarString(playerid, "inputtext", AdminPass, sizeof(AdminPass));

		string_f("UPDATE "T_ADMIN" SET `aPassword` = md5('%s'), `aDataVhod` = NOW() WHERE `aName` = '%s'", AdminPass, GetName(playerid));
		mysql_query(mysql, string);

		AdminLogin[playerid] = true;

		FSCM(playerid, -1, "Ваш пароль администратора: "SERVER"%s", AdminPass);
		SCMInfo(playerid, "Сделайте скриншот кнопкой "SERVER"F8{FFFFFF} или запишпте Ваш пароль.");

		if(GetAdmin(playerid)<=10)
		{
			new stringAdmin[126];
			format(stringAdmin, sizeof(stringAdmin), "%s (%i) - [%i] "SERVER"%s"GREEN" успешно зарегистрировал%s в админ-центре!", Admin_Name[GetAdmin(playerid)-1], GetAdmin(playerid), AI[playerid][aNumber], GetName(playerid), (PI[playerid][Sex])?("ся"):("ась"));
			SCMAdmin(cGREEN, stringAdmin);
		}
	}
	return DeletePVar(playerid, "inputtext");
}

// Авторизация
publics CheckAdminAloginAuth(playerid)
{
	new string[250];
	cache_get_row_count(rows);
	if(!rows)
	{
	    AdminPasswordError[playerid]--;
		FSCM(playerid, cRED, "Неверный пароль! Неверных попыток: %d", AdminPasswordError[playerid]);
		if(AdminPasswordError[playerid] > 2)
		{
		    AdminPasswordError[playerid] = 3;
			if(GetAdmin(playerid)==MAX_ADMIN) return SCM(playerid, cWHITE, "Я бы Вас кикнул, но не могу!");

		    if(GetAdmin(playerid) < 7)
		    {
		        PlayerPlaySound(playerid, 1150, 0, 0, 0);

				string_f("Администратор "SERVER"%s{3399FF} ввел неправельный пароль от админ-центра "SERVER"%d из 3{3399FF} раз", GetName(playerid), AdminPasswordError[playerid]);
				SCMAdmin(cBLUE, string);

			    string_f("Проверьте его, возможно данный администратор взломон!");
				SCMAdmin(cSERVER, string);

				return Tkick(playerid);
			}
		}
	}
	else
	{
		AdminLogin[playerid] = true;

		if(GetAdmin(playerid)<=10)
		{
			new stringAdmin[126];
			format(stringAdmin, sizeof(stringAdmin), "%s (%i) "SERVER"%s"GREEN" успешно авторизовал%s в админ-центре!", Admin_Name[GetAdmin(playerid)-1], GetAdmin(playerid), GetName(playerid), (PI[playerid][Sex])?("ся"):("ась"));
			SCMAdmin(cGREEN, stringAdmin);
		}
		FSCM(playerid, cGREEN, "[ Информация ] {FFFFFF}Вы авторизовались как "SERVER"%s{FFFFFF}.", Admin_Name[GetAdmin(playerid)-1]);

		new query[150];
		format(query, sizeof(query), "UPDATE "T_ADMIN" SET `aDataVhod` = NOW() WHERE `aName` = '%s'", GetName(playerid));
		mysql_query(mysql, query);
	}
	return 1;
}

// Система штрафов
publics CheckInfoShtraf(playerid)
{
    cache_get_row_count(rows);
    if(!rows) return SPD(playerid, dNull, d_info, "У Вас нет штрафов!", "{FFFFFF}У Вас нет неоплаченных штрафов!", "Закрыть", "");
    {
		new string[1680], stringer[2048];
		new number, repons[200], data[40], sum, PutName[24];
		strcat(string, ""SERVER"№. Сумма\tПричина\tДата\tКем выдан\n");
	 	for(new i; i < rows; i ++)
    	{
    	    cache_get_value_name_int(i, "tNumber", number); // Номер штрафа
    	    cache_get_value_name_int(i, "tPrice", sum); // Сумма штрафа
	    	cache_get_value_name(i, "tReason", repons, 200); // Причина штрафа
	    	cache_get_value_name(i, "tData", data, 40); // Дата выписание штрафа
	    	cache_get_value_name(i, "tPutName", PutName, 24); // Кто выписал

	        format(stringer, sizeof(stringer), "{FFFFFF}\
			"SERVER"%d. "GREEN"%s рублей\t{FFFFFF}%s\t%s\t%s\n", number, ConvertCash(sum), repons, data, PutName);
			strcat(string, stringer);
	    }
		SPD(playerid, dNull, d_tlisth, "{FFFFFF}Неоплаченые штрафы!", string, "Закрыть", "");
	}
	return 1;
}

publics CheckShtrafPayNumber(playerid, number)
{
    cache_get_row_count(rows);
    if(!rows) return SEM(playerid, "Штраф с данным номером не найден!");
	{
	    new stringer[1024], repons[200], sum, data[40], id;

	    cache_get_value_name_int(0, "tNumber", number); // Номер штрафа
    	cache_get_value_name(0, "tReason", repons, 200); // Причина штрафа
	    cache_get_value_name_int(0, "tPrice", sum); // Сумма штрафа
    	cache_get_value_name(0, "tData", data, 40); // Дата выписание штрафа
    	// cache_get_value_name(0, "tPutName", PutName, 24); // Кто выписал
	    cache_get_value_name_int(0, "tID", id); //

		if(GetMoney(playerid) < sum) return SEM(playerid, "У Вас нет средств для оплаты штрафа!");
		{
			GiveMoney(playerid, -sum);

			// Информация об оплате штрафа
			format(stringer, sizeof(stringer), "\
				"SERVER"Министерство Внутренних Дел\n\n\
				{FFFFFF}Номер штрафа - "SERVER"%i\n\
				{FFFFFF}Причина штрафа - "SERVER"%s\n\
				{FFFFFF}Сумма штрафа - "GREEN"%s рублей\n\
				{FFFFFF}Дата выдачи штрафа - "SERVER"%s\n\n\
				"SERVER"Штраф успешно оплачен!", number, repons, ConvertCash(sum), data);
			SPD(playerid, dNull, d_info, "Штраф оплачен", stringer, "Закрыть", "");
			//
			if(id == 1) PI[playerid][ShtrafPPS]--, update_int_mysql(T_PLAYER, "ShtrafPPS", PI[playerid][ShtrafPPS], "ID", PI[playerid][ID]);
			if(id == 2) PI[playerid][ShtrafDPS]--, update_int_mysql(T_PLAYER, "ShtrafDPS", PI[playerid][ShtrafDPS], "ID", PI[playerid][ID]);

			new string[100];
			format(string, 100, "DELETE FROM "T_TICKETS" WHERE `tNumber` = '%d'", number);
			mysql_query(mysql, string);
		}
    }
	return 1;
}

publics AllShtrafPay(playerid)
{
	if(cache_get_row_count(rows)>0)
	{
		new sum;
		cache_get_value_index_int(0, 0, sum); // Сумма штрафа
  		if(GetMoney(playerid) < sum)  return SEM(playerid, "У Вас нет средств для оплаты штрафов!");
		{
			new shtrafi = PI[playerid][ShtrafPPS]+PI[playerid][ShtrafDPS];
			new string[512];
			// Информация об оплате штрафа
			string_f("\
				{0087DB}Министерство Внутренних Дел\n\n\
				{FFFFFF}Штрафы от ППС - "SERVER"%d шт.\n\
				{FFFFFF}Штрафы от ДПС - "SERVER"%d шт.\n\
				{FFFFFF}Колличество штрафов - "SERVER"%d шт.\n\
				{FFFFFF}Общая сумма штрафов - "SERVER"%s рублей\n\n\
				{0087DB}Вы желаете оплатить все Ваши штрафы?",
			PI[playerid][ShtrafPPS], PI[playerid][ShtrafDPS], shtrafi, ConvertCash(sum));
			SPD(playerid, dPayShtrafAll, d_info, "Оплатить все штрафы?", string, "Оплатить", "Нет");
			SetPVarInt(playerid, "ShtrafSumma", sum);
    	}
	}
	return 1;
}

publics CheckAdminName(playerid, names[])
{
	new str[1024];
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "Администратор не найден!");
	{
        cache_get_value_name(0, "aName", AI[rows][aName], 24);
        cache_get_value_name_int(0, "aLevel", GetAdmin(rows));
        cache_get_value_name(0, "aData", AI[rows][aData], 20);
        cache_get_value_name(0, "aPutName", AI[rows][aPutName], 24);
        cache_get_value_name(0, "aDataVhod", AI[rows][aDataVhod], 20);
        cache_get_value_name(0, "aPrefix", AI[rows][aPrefix], 12);
        cache_get_value_name_int(0, "aReputacion", AI[rows][aReputacion]);
        cache_get_value_name_int(0, "aWarn", AI[rows][aWarn]);

		SetPVarString(playerid, "RemoveAdminName", AI[rows][aName]);

		new stringer[256];
		stringer[0] = EOS;
		// format(str, sizeof(str), "{FFFFFF}Имя администратора: {3399FF}%s\n", AI[rows][aName]); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Уровень администратора: "SERVER"%d - %s\n", GetAdmin(rows), Admin_Name[GetAdmin(rows)-1]); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}На посту администратора с: "SERVER"%s\n", AI[rows][aData]); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Выговоры администратора: "SERVER"%d из 3\n", AI[rows][aWarn]); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Репутация администратора: "SERVER"%d балла(-ов)\n\n", AI[rows][aReputacion]); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Вы действительно собераетесь снять "SERVER"%s{FFFFFF} с поста администратора?", AI[rows][aName]); strcat(stringer, str);
		SPD(playerid, dRemoveAdmin, d_info, "Снятие администратора с поста!", stringer, "Да", "Нет");
	}
	return 1;
}

publics CheckBanAcc(playerid, BanName[], Reason[])
{
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "Игрок с таким Именем не заблокирован(-а)!");
	{
		new stringUnBan[120];
		format(stringUnBan, sizeof(stringUnBan), "DELETE FROM "T_BAN" WHERE `bName` = '%s'", BanName);
		mysql_query(mysql, stringUnBan);

		new string[124];
		string_f("[A] %s [%i] разблокировал(-а) игрока %s. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], BanName, Reason);
		SCMAdmin(cGREEN, string);

		string[0] = EOS;
		string_f("[A] %s [%i] разблокировал(-а) игрока %s. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], BanName, Reason);
		SCMAll(cWAR, string);
		FSCM(playerid, -1, "Вы успешно разблокировали игрока "SERVER"%s"WHITE". Причина: "BLUE"%s", BanName, Reason);
	}
	return 1;
}

publics CheckBanList(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "Список пуст!");
	{
		new string[1024], str[254];
		strcat(string, "UID. Имя\tДата блокировки - Дата разблокировки\tКем заблокирован(-а)\tПричина\n");
		for(new i; i < rows; i++)
		{
			cache_get_value_name(i, "bName", BanI[rows][bName], 24);
			cache_get_value_name(i, "bAdmin", BanI[rows][bAdmin], 24);
			cache_get_value_name(i, "bData", BanI[rows][bData], 32);
			cache_get_value_name(i, "bReason", BanI[rows][bReason], 64);
			cache_get_value_name_int(i, "bDay", BanI[rows][bDay]);
			cache_get_value_name(i, "bUnBanData", BanI[rows][bUnBanData], 32);
			cache_get_value_name_int(i, "bStatus", BanI[rows][bStatus]);

			format(str, sizeof(str), "[%i]. %s\t%s - %s\t%s\t%s\n", i, BanI[rows][bName], BanI[rows][bData], BanI[rows][bUnBanData], BanI[rows][bAdmin], BanI[rows][bReason]);
			strcat(string, str);
		}
		SPD(playerid, dNull, d_tlisth, ""SERVER"Список заблокированных игроков", string, "Выбрать", "Закрыть");
	}
	return 1;
}

publics CheckOffMute(playerid, mName[], mTime, mReason[])
{
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "Игрок не найден!");
	{
		new string[128];
		string_f("UPDATE "T_PLAYER" SET `Mute` = '1', `MuteTime` = '%i' WHERE `Name` = '%s' LIMIT 1", mTime*60, mName);
		mysql_query(mysql, string);

		string[0] = EOS;
		string_f("[A] %s [#%i] выдал(-а) иргоку %s блокировку чата на %i мин. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], mName, mTime, mReason);
		SCMAdmin(cRED, string);

		if(!GetString(AcI[rows][acVkID], "NULL"))
		{
			string[0] = EOS;
			string_f("%s [#%i] выдал(-а) Вам блокировку чата на %i мин. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], mTime, mReason);
			SCMVk(AcI[rows][acVkID], string);
		}
	}
	return 1;
}

publics CheckPlayerTK(playerid)
{
	cache_get_row_count(rows);
	new string[2048], str[512], Data[32], Info[256];
	new frac = GetPVarInt(playerid, "InfoFrac");
	if(rows)
    {
	    format(str, sizeof(str), "{FFFFFF}История работы "SERVER"%s {FFFFFF}в "SERVER"%s\n\n", GetName(playerid), FracI[frac][fName]);
		strcat(string, str);

		for(new i; i < rows; i++)
    	{
        	cache_get_value_name(i, "Data", Data, 32);
        	cache_get_value_name(i, "Info", Info, 256);

			format(str, sizeof(str), ""SERVER"%i. {FFFFFF}%s - %s\n", i+1, Data, Info);
			strcat(string, str);
		}
	}
	else
	{
		format(str, sizeof(str), "{FFFFFF}\
			История работы "SERVER"%s {FFFFFF}в "SERVER"%s\n\n\
			{FFFFFF}Информация отсутствует!", GetName(playerid), FracI[frac][fName]);
		strcat(string, str);
	}
	SPD(playerid, dTkOff, d_info, ""SERVER"Информация", string, "<< Назад", "");
	DeletePVar(playerid, "InfoFrac");
	return DeletePVar(playerid, "ShowTK");
}

publics CheckFamilyName(playerid, name[])
{
	new stringer[1024], str[350];
	cache_get_row_count(rows);
	if(rows)
    {
		format(str, sizeof(str), "{FFFFFF}Здравствуйте уважаем%s %s{FFFFFF}! Вы желаете создать семью?\n\n", (PI[playerid][Sex]==1)?("ый"):("ая"), GetName(playerid)); strcat(stringer, str);
		format(str, sizeof(str), "Если да, то помните что в Нашей области уже зарегистрировано "SERVER"%d семей{FFFFFF}.\n\n", TOTALFAM); strcat(stringer, str);
		strcat(stringer, "Для создание семьи Вам потребуються некоторые документы и гос пошлина в размере "SERVER"1.200.000 рублей{FFFFFF}, список ниже:\n\n");
		format(str, sizeof(str), ""SERVER"1. {FFFFFF}Паспорт: %s\n", (!PI[playerid][Pasport])?("{FF0000}-"):("{63BD4E}+"));	strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"2. {FFFFFF}Прописка в области от "SERVER"25 лет{FFFFFF}: %s\n", (PI[playerid][Level]<25)?("{FF0000}-"):("{63BD4E}+")); strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"3. {FFFFFF}Сумма гос пошлины"SERVER"1.200.000 рублей{FFFFFF}: %s\n", ConvertCash((GetMoney(playerid)>1199999))?("{63BD4E}Есть"):("{FF0000}Нет")); strcat(stringer, str);
		format(str, sizeof(str), "Семья под именем "SERVER"%s{FFFFFF} уже существует, придусайте другое название!", name); strcat(stringer, str);
		return SPD(playerid, dCreateFamily, d_input, "Создание семьи", stringer, "Создатть", "Отмена");
	}
	else
	{
    	GiveMoney(playerid, -1200000);
    	FracI[FRAC_AO][fBank] += 1200000;

	    TOTALFAM++;
		SetString(FamI[TOTALFAM][famName], name);
		SetString(FamI[TOTALFAM][famCreator], GetName(playerid));
		FamI[TOTALFAM][famMembers] ++;
		FSCM(playerid, cBLUE,"Вы создали семью '№%d - %s'. Команды семьи: /mm » Команды сервера » Семья", TOTALFAM, name);

		new string[512];
		format(string, 512, "INSERT INTO "T_FAMILY" (`famID`, `famName`, `famCreator`, `famData`, `famMembers`) VALUES (%d, '%s', '%s', NOW(), %d)", TOTALFAM, name, GetName(playerid), FamI[TOTALFAM][famMembers]);
		mysql_query(mysql, string);

	    PI[playerid][Family] = TOTALFAM;
		update_int_mysql(T_PLAYER, "Family", PI[playerid][Family], "ID", PI[playerid][ID]);
		mysql_tquery(mysql, "SELECT * FROM "T_FAMILY"", "LoadFamily", "");
	}
	return 1;
}

publics CheckReferalList(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "На Ваш ник никто не регистрировался!");
	{
		new str[124], string[1024];

		strcat(string, ""SERVER"№. {ffffff}Имя\t{ffffff}Дата регистрации\n");
		for(new i; i < rows; i ++)
		{
			new id = GetPlayerID(AcI[rows][acLogin]);
			cache_get_value_name(i, "acLogin", AcI[id][acLogin], 24);
			cache_get_value_name(i, "acRegData", AcI[id][acRegData], 20);

			format(str, sizeof(str), ""SERVER"%d. {FFFFFF}%s\t"BLUE"%s\n", TotalPlayersCount[playerid] + 1, GetName(id), AcI[id][acRegData]); strcat(string, str);
			TotalPlayersCount[playerid] ++;
		}
		TotalPlayers[playerid] += rows;
		LastPlayers[playerid] = rows;

		if(rows == 10) strcat(string, "{24c697}Далее >>\n");
		if(FirstOpenCMD[playerid] && TotalPlayers[playerid] > 10)  strcat(string, "{afafaf}<< Назад");
		if(!FirstOpenCMD[playerid]) FirstOpenCMD[playerid] = true;

		SPD(playerid, dReferalList, d_tlisth, "Ваши рефералы", string, "Выбрать", "Отмена");
	}
	return 1;
}

publics CheckPlayerOnline(playerid, name[])
{
	cache_get_row_count(rows);
	if(!rows) return SEM(playerid, "Данный игрок не найден!");
	{
		new str[256], string[1024], oDay[7], oDayAll;
		cache_get_value_name(0, "oName", name, 24);
		cache_get_value_name_int(0, "oDay_1", oDay[0]);
		cache_get_value_name_int(0, "oDay_2", oDay[1]);
		cache_get_value_name_int(0, "oDay_3", oDay[2]);
		cache_get_value_name_int(0, "oDay_4", oDay[3]);
		cache_get_value_name_int(0, "oDay_5", oDay[4]);
		cache_get_value_name_int(0, "oDay_6", oDay[5]);
		cache_get_value_name_int(0, "oDay_7", oDay[6]);
		oDayAll = oDay[0] + oDay[1] + oDay[2] + oDay[3] + oDay[4] + oDay[5] + oDay[6];
		format(str, sizeof(str), "{FFFFFF}Онлайн игрока "SERVER"%s {FFFFFF}за неделю!\n\n", name), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Понедельник:\t"SERVER"%s\n", ConvertTime(oDay[0])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Вторник:\t\t"SERVER"%s\n", ConvertTime(oDay[1])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Среда:\t\t\t"SERVER"%s\n", ConvertTime(oDay[2])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Четверг:\t\t"SERVER"%s\n", ConvertTime(oDay[3])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Пятница:\t\t"SERVER"%s\n", ConvertTime(oDay[4])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Суббота:\t\t"SERVER"%s\n", ConvertTime(oDay[5])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Воскресенье:\t"SERVER"%s\n\n", ConvertTime(oDay[6])), strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Общий онлайн за неделю: \t\t"SERVER"%s", ConvertTime(oDayAll)), strcat(string, str);
		SPD(playerid, dNull, d_info, "Недельный онлайн", string, "Закрыть", "");
	}
	return 1;
}

publics CheckPlayerCards(playerid) // Система банковских карт
{
	cache_get_row_count(rows);
	if(!rows) return SPD(playerid, dCreateCard, d_info, ""SERVER"Получение карты", ""RED"У Вас еще нет ни одной карт!\n\n"WHITE" Вы желаете получить "SERVER"дебитовую "WHITE"банковскую карту?", "Получить", "Отмена");
	{
		new string[1024], str[124];
		strcat(string, "№. Номер карты\tСрок годности\tСтатус\tБаланс\n");
		for(new c; c < rows; c++)
		{
			cache_get_value_name_int(c, "bpcID", BPC[c][bpcID]); //
			cache_get_value_name(c, "bpcOwner", BPC[c][bpcOwner], 24); // Владелец карты
			cache_get_value_name(c, "bpcNumber", BPC[c][bpcNumber], 22); // Номер карты
			cache_get_value_name(c, "bpcData", BPC[c][bpcData], 8); // Дата окончания карты
			cache_get_value_name_int(c, "bpcCode", BPC[c][bpcCode]); // Код безопасности карты
			cache_get_value_name_int(c, "bpcPinCod", BPC[c][bpcPinCod]); // PIN код карты
			cache_get_value_name_int(c, "bpcMoney", BPC[c][bpcMoney]); //
			cache_get_value_name_int(c, "bpcStatus", BPC[c][bpcStatus]); //Статус карты

			if(!BPC[c][bpcNumber]) continue;
			format(str, sizeof(str),  ""SERVER"%i. {FFFFFF}%s\t"BLUE"%s\t"WHITE"%i\t"GREEN"%s рублей\n", c+1, BPC[c][bpcNumber], BPC[c][bpcData], BPC[c][bpcStatus], ConvertCash(BPC[c][bpcMoney]));
			strcat(string, str);
		}
		// if(rows < MAX_PLAYER_CARD) strcat(string, ""YELLOW"Получить новую банковскую карту");
		SPD(playerid, dBankCardMenu, d_tlisth, ""WHITE"Меню банка | "SERVER"Меню управления картами", string, "Выбрать", "<< Назад");
	}
	return 1;
}

publics CheckPodarki(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return 1;
	{
		new string[1024], str[512], Float: pos[4], i = rows;
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		
		strcat(string, "№ подарка\tРасстояние\n");		
		Podarok[i][podID] = DistancePointToPoint(pos[0], pos[1], pos[2], Podarok[i][podPosX], Podarok[i][podPosY], Podarok[i][podPosZ]);
		format(str, sizeof(str), ""SERVER"%i. {FFFFFF}Подарок\t"SERVER"%s м.\n", i, ConvertCash(Podarok[i][podID])); strcat(string, str);
		SPD(playerid, dNull, d_tlisth, "{FFFFFF}Список "SERVER" подарков", string, "Закрыть", "");
	}
	return 1;
}

// ============================== [ Паблики загрузки ] ====================== //

// Загрузка данныйх сервера
publics LoadSettingServer()
{
	new time = GetTickCount();
	cache_get_row_count(rows);
	if(!rows)
	{
		mysql_tquery(mysql, "INSERT INTO "T_SERVER" \
		(`sName`, `sNumber`, `sObnova`, `sVersion`, `sWeb`, `sDonate`, `sForum`, `sGroup`, `sMapName`, `sLanguage`, `sPassword`, `sRconPass`, `sBonusMoney`, `sBonusLevel`, `sBonusDonat`, `sAdminPay`) VALUES \
		('Redwich RP', '1', 'None', 'v 0.0.1', 'redwich-rp.ru', 'redwich-rp.ru/donate', 'forum.redwich-rp.ru', 'vk.com/redwich_rp', 'Criminal Russia', 'Russian', 'None', 'Redwich2545864', '15000', '1', '0', '5000')");
	}
	else
	{
        cache_get_value_name(0, "sName", SI[sName], 32);
        cache_get_value_name_int(0, "sNumber", SI[sNumber]);
        cache_get_value_name(0, "sNameServer", SI[sNameServer], 32);
        cache_get_value_name(0, "sObnova", SI[sObnova], 32);
        cache_get_value_name(0, "sVersion", SI[sVersion], 32);
        cache_get_value_name(0, "sWeb", SI[sWeb], 32);
        cache_get_value_name(0, "sDonate", SI[sDonate], 32);
        cache_get_value_name(0, "sForum", SI[sForum], 32);
        cache_get_value_name(0, "sGroup", SI[sGroup], 32);
        cache_get_value_name(0, "sMapName", SI[sMapName], 32);
        cache_get_value_name(0, "sLanguage", SI[sLanguage], 32);
        cache_get_value_name(0, "sPassword", SI[sPassword], 32);
        cache_get_value_name(0, "sRconPass", SI[sRconPass], 32);
        cache_get_value_name_int(0, "sBonusMoney", SI[sBonusMoney]);
        cache_get_value_name_int(0, "sBonusLevel", SI[sBonusLevel]);
        cache_get_value_name_int(0, "sBonusDonat", SI[sBonusDonat]);
        cache_get_value_name_int(0, "sAdminPay", SI[sAdminPay]);
        cache_get_value_name_int(0, "sBankAdmin", SI[sBankAdmin]);
        cache_get_value_name_int(0, "sX_Server", SI[sX_Server]);
        cache_get_value_name_int(0, "sX_Exp", SI[sX_Exp]);
        cache_get_value_name_int(0, "sX_JobPay", SI[sX_JobPay]);
        cache_get_value_name_int(0, "sX_PayDay", SI[sX_PayDay]);
        cache_get_value_name_int(0, "sX_Donat", SI[sX_Donat]);
        cache_get_value_name_int(0, "sEvent", SI[sEvent]);
		// Работа Шахтера
        cache_get_value_name_int(0, "sStatusVagon", SI[sStatusVagon]);
        cache_get_value_name_int(0, "sMineralVagon", SI[sMineralVagon]);
        cache_get_value_name_int(0, "sMinerals", SI[sMinerals]);
		//
        cache_get_value_name_int(0, "sSkladDerevo", SI[sSkladDerevo]);

		new nam[80], ver[32], web[32], r_pass[32], map[32], lan[32];
		print("\n  ______________________ [ Загрузка базы данныйх MySQL ] _____________________\n");

		if(GetString(SI[sObnova], "None")) format(nam, sizeof(nam), "hostname %s", SI[sName]);
	    else if(GetString(SI[sObnova], "None") && SI[sX_PayDay] >= 2) format(nam, sizeof(nam), "hostname %s | X%i PayDay", SI[sName], SI[sX_PayDay]);
	    else if(!GetString(SI[sObnova], "None") && SI[sX_PayDay] >= 2) format(nam, sizeof(nam), "hostname %s | %s | X%i PayDay", SI[sName], SI[sObnova], SI[sX_PayDay]);
		else format(nam, sizeof(nam), "hostname %s | %s", SI[sName], SI[sObnova]); // Название проекта
		SendRconCommand(nam);

		format(ver, sizeof(ver), "%s", SI[sVersion]);
		SetGameModeText(ver); // Версия обновления - мода

		format(web, sizeof(web), "weburl %s", SI[sWeb]);
		SendRconCommand(web); // URL сайта проекта

		format(r_pass, sizeof(r_pass), "rcon_password %s", SI[sRconPass]);
		SendRconCommand(r_pass); // Главный пароль сервера

		format(map, sizeof(map), "mapname %s", SI[sMapName]);
		SendRconCommand(map); // Название карты

		format(lan, sizeof(lan), "language %s", SI[sLanguage]);
		SendRconCommand(lan); // Язык проекта

		// Работа Шахтера
		if(!SI[sStatusVagon]) // Вагон на зазгрузке
		{
			MineralVagon = CreateDynamicObject(1770, 2634.3223, 1969.8330, 3427.7935, 0.0000, 0.0000, 0.0000, 5, 5, -1, 300.0, 300.0);
			VagonInfo = CreateDynamic3DTextLabel("_", -1, 2634.3223, 1969.8330, 3427.7935+1.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5);
		}
		else // Вагон на разгрузке на склад
		{
			MineralVagon = CreateDynamicObject(1770, 2634.3223, 1802.3330, 3427.7935, 0.0000, 0.0000, 0.0000, 5, 5, -1, 300.0, 300.0);
			VagonInfo = CreateDynamic3DTextLabel("_", -1, 2634.3223, 1802.3330, 3427.7935+1.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5);
		}
		//
	}
	return printf("-> Настройки сервера загружены: %i мс%s", GetTickCount() - time, (!GetString(SI[sPassword], "None"))?(" - Сервер закрыт на технические работы!"):(" "));
}

// Экономика
publics LoadEkonomika()
{
    new time = GetTickCount();
	cache_get_row_count(rows);
	if(!rows)
	{
		mysql_tquery(mysql, "INSERT INTO "T_EKONOM" (`eiNalogFrac`, `eiScahtaPay`, `eiDriveMineralsPay`, `eiDrovosekPay`, `eiGruzPay`, `eiRadarPay`) VALUES(1, 5, 35, 35, 3, 500)");
        // LoadEkonom();
	}
	else
	{
		cache_get_value_name_int(0, "eiNalogFrac", EI[eiNalogFrac]);
		cache_get_value_name_int(0, "eiScahtaPay", EI[eiScahtaPay]);
		cache_get_value_name_int(0, "eiDriveMineralsPay", EI[eiDriveMineralsPay]);
		cache_get_value_name_int(0, "eiDrovosekPay", EI[eiDrovosekPay]);
		cache_get_value_name_int(0, "eiGruzPay", EI[eiGruzPay]);
		cache_get_value_name_int(0, "eiRadarPay", EI[eiRadarPay]);
 	}
	return printf("-> Экономика загружна: за %i мс", GetTickCount() - time);
}
//


publics LoadAccPlayer(playerid)
{
	cache_get_row_count(rows);
    if(!rows) return SEM(playerid, "Ваши данные не загружены. Обратитесь в технический раздел!"), Tkick(playerid);
    {
        cache_get_value_name_int(0,  "acID", AcI[playerid][acID]);
	    cache_get_value_name_int(0, "acOnline", AcI[playerid][acOnline]);
	    cache_get_value_name(0, "acLogin", AcI[playerid][acLogin], 24);
	    cache_get_value_name(0, "acPassword", AcI[playerid][acPassword], 40);
	    cache_get_value_name_int(0, "acServer", AcI[playerid][acServer]);
	    cache_get_value_name(0, "acEmail", AcI[playerid][acEmail], 24);
	    cache_get_value_name_int(0, "acCheckEmail", AcI[playerid][acCheckEmail]);
	    cache_get_value_name(0, "acReferal", AcI[playerid][acReferal], 24);
	    cache_get_value_name(0, "acRegIP", AcI[playerid][acRegIP], 16);
	    cache_get_value_name(0, "acRegData", AcI[playerid][acRegData], 20);
	    cache_get_value_name(0, "acLastIP", AcI[playerid][acLastIP], 16);
	    cache_get_value_name(0, "acLastData", AcI[playerid][acLastData], 20);
	    cache_get_value_name_int(0, "acPinCode", AcI[playerid][acPinCode]);
	    cache_get_value_name_int(0, "acStatusPin", AcI[playerid][acStatusPin]);
		cache_get_value_name(0, "acVkID", AcI[playerid][acVkID], 32);
	    cache_get_value_name_int(0, "acStatusGoogle", AcI[playerid][acStatusGoogle]);
		cache_get_value_name(0, "acGoogleCode", AcI[playerid][acGoogleCode], 32);
	    cache_get_value_name_int(0, "acTimeGameServer", AcI[playerid][acTimeGameServer]);
	    cache_get_value_name_int(0, "acDayGameServer", AcI[playerid][acDayGameServer]);

		new stringFullAdmin[100]; // Проверка на админа с полным доступом
		format(stringFullAdmin, sizeof(stringFullAdmin), "SELECT * FROM "T_FULL_ADMIN" WHERE `faName` = '%s'", AcI[playerid][acLogin]);
	    mysql_tquery(mysql, stringFullAdmin, "LoadFullAdmin", "i", playerid);

		new stringAdmin[124]; // Проверка на админа
		format(stringAdmin, sizeof(stringAdmin), "SELECT * FROM "T_ADMIN" WHERE `aName` = '%s'", AcI[playerid][acLogin]);
	    mysql_tquery(mysql, stringAdmin, "LoadPlayerAdmin", "i", playerid);

		// Загрузка Навоки работ!
		new stringJS[120];
		format(stringJS, sizeof(stringJS), "SELECT * FROM "T_JOB_SKILL" WHERE `jName` = '%s'", AcI[playerid][acLogin]);
	    mysql_tquery(mysql, stringJS, "LoadJobSkill", "i", playerid);

		new stringPersonaj[124]; // Проверка
		format(stringPersonaj, sizeof(stringPersonaj), "SELECT * FROM "T_PLAYER" WHERE `Name` = '%s'", AcI[playerid][acLogin]);
	    mysql_tquery(mysql, stringPersonaj, "LoadPlayerPersonaj", "i", playerid);
    }
	return 1;
}

publics LoadFullAdmin(playerid) // Загрузка администратора с полным доступом
{
	cache_get_row_count(rows);
    if(!rows) return 1;
	{
        cache_get_value_name_int(0, "faID", FAI[playerid][faID]);
        cache_get_value_name(0, "faName", FAI[playerid][faName], 24);
        cache_get_value_name(0, "faData", FAI[playerid][faData], 24);
        cache_get_value_name(0, "faPutName", FAI[playerid][faPutName], 24);
	}
 	return 1;
}

publics LoadPlayerAdmin(playerid) // Загрузка администратора
{
	cache_get_row_count(rows);
    if(!rows) return 1;
    {
		new Admin_Setting[32];
        cache_get_value_name_int(0, "aID", AI[playerid][aID]);
        cache_get_value_name_int(0, "aNumber", AI[playerid][aNumber]);
        cache_get_value_name(0, "aName", AI[playerid][aName], 24);
        cache_get_value_name(0, "aPassword", AI[playerid][aPassword], 40);
        cache_get_value_name_int(0, "aLevel", GetAdmin(playerid));
        cache_get_value_name(0, "aData", AI[playerid][aData], 20);
        cache_get_value_name(0, "aPutName", AI[playerid][aPutName], 24);
        cache_get_value_name(0, "aDataVhod", AI[playerid][aDataVhod], 20);
        cache_get_value_name(0, "aPrefix", AI[playerid][aPrefix], 12);
        cache_get_value_name_int(0, "aReputacion", AI[playerid][aReputacion]);
        cache_get_value_name_int(0, "aWarn", AI[playerid][aWarn]);
		cache_get_value_name(0, "aSetting", Admin_Setting, sizeof(Admin_Setting)), sscanf(Admin_Setting, "p<,>a<i>[12]", AI[playerid][aSetting]);
        cache_get_value_name_int(0, "aBlock", AI[playerid][aBlock]);

		switch(GetAdmin(playerid))
		{
			case 1..MAX_ADMIN:
			{
				FSCM(playerid, cGREEN, "[ Информация ]{FFFFFF} Вы вошли как администратор - "SERVER"%d уровня ( %s ){FFFFFF}!", GetAdmin(playerid), Admin_Name[GetAdmin(playerid)-1]);
				SCMInfo(playerid, "Для авторизации в административный центр введите: "SERVER"/alogin");
		 	}
		}
	}
 	return 1;
}

// Система - Паспорта
publics LoadPasport(playerid)
{
	if(!cache_get_row_count(rows))
	{
	    if(PI[playerid][Pasport] == 1)
		{
			PI[playerid][Pasport] = 0;
			update_int_mysql(T_PLAYER, "Pasport", PI[playerid][Pasport], "ID", PI[playerid][ID]);
		}
	}
	else
	{
        cache_get_value_name(0, "pasName", PsI[playerid][pasName], 24);
        cache_get_value_name_int(0, "pasSeria", PsI[playerid][pasSeria]);
        cache_get_value_name_int(0, "pasNumber", PsI[playerid][pasNumber]);
        cache_get_value_name(0, "pasData", PsI[playerid][pasData], 24);
        cache_get_value_name(0, "pasGorod", PsI[playerid][pasGorod], 24);
        cache_get_value_name(0, "pasDataRojdenia", PsI[playerid][pasDataRojdenia], 24);
	}
	return 1;
}

publics LoadMedCard(playerid)
{
 	cache_get_row_count(rows);
 	if(rows)
 	{
		cache_get_value_name_int(0, "mcID", MC[playerid][mcID]);
		cache_get_value_name(0, "mcName", MC[playerid][mcName], 24);
		cache_get_value_name(0, "mcData", MC[playerid][mcData], 32);
		cache_get_value_name_int(0, "mcStatus", MC[playerid][mcStatus]);
		cache_get_value_name(0, "mcDataClose", MC[playerid][mcDataClose], 32);

		FSCM(playerid, -1, "Срок Вашей Мадкарты "BLUE"30 д. "WHITE"до: "SERVER"%s", MC[playerid][mcDataClose]);
	}
	else
 	{
		SCMInfo(playerid, "Срок Вашей Мадкарты истек!");

    	if(PI[playerid][MedCard])
		{
			PI[playerid][MedCard] = 0;
			update_int_mysql(T_PLAYER, "MedCard", PI[playerid][MedCard], "ID", PI[playerid][ID]);
		}

		new stringMedCard[100];
		format(stringMedCard, sizeof(stringMedCard), "DELETE FROM "T_MEDCARD" WHERE `mcName` = '%s'", GetName(playerid));
		mysql_query(mysql, stringMedCard);
	}
	return 1;
}



// Загрузка данных игрока
publics LoadPlayerPersonaj(playerid)
{
	// getdate(year_s, month_s, day_s);
	new strSkillGun[50];
	cache_get_row_count(rows);
    if(!rows) return SEM(playerid, "Ваши данные не загружены. Обратитесь в технический раздел!"), Tkick(playerid);
    {
        new Lics[16];
	    cache_get_value_name_int(0, "ID", PI[playerid][ID]);
		cache_get_value_name(0, "Name", GetName(playerid), 24);
	    cache_get_value_name_int(0, "Status", PI[playerid][Status]);
	    cache_get_value_name_int(0, "Sex", PI[playerid][Sex]);
	    cache_get_value_name_int(0, "Spawn", PI[playerid][Spawn]);
	    cache_get_value_name_float(0, "PosX", PI[playerid][Pos][0]);
	    cache_get_value_name_float(0, "PosY", PI[playerid][Pos][1]);
	    cache_get_value_name_float(0, "PosZ", PI[playerid][Pos][2]);
	    cache_get_value_name_float(0, "PosA", PI[playerid][Pos][3]);
	    cache_get_value_name_int(0, "Int", PI[playerid][Int]);
	    cache_get_value_name_int(0, "World", PI[playerid][World]);
	    cache_get_value_name_int(0, "Skin", PI[playerid][Skin]);
	    cache_get_value_name_int(0, "Age", PI[playerid][Age]);
	    cache_get_value_name_int(0, "Exp", PI[playerid][Exp]);
	    cache_get_value_name_int(0, "Level", PI[playerid][Level]);
	    cache_get_value_name_int(0, "Satiety", PI[playerid][Satiety]);
	    cache_get_value_name_int(0, "Job", PI[playerid][Job]);
	    cache_get_value_name_int(0, "GameTime", PI[playerid][GameTime]);
	    cache_get_value_name_int(0, "Money", PI[playerid][Money]);
	    cache_get_value_name_int(0, "Bank", PI[playerid][Bank]);
	    cache_get_value_name_int(0, "Donat", PI[playerid][Donat]);
	    cache_get_value_name_float(0, "Health", PI[playerid][Health]);
	    cache_get_value_name_int(0, "Zakon", PI[playerid][Zakon]);
	    cache_get_value_name_int(0, "Wanted", PI[playerid][Wanted]);
	    cache_get_value_name_int(0, "Voenik", PI[playerid][Voenik]);
		cache_get_value_name(0, "Lic", Lics, 16), sscanf(Lics, "p<,>a<i>[8]", PI[playerid][Lic]);
	    cache_get_value_name_int(0, "Poshlina", PI[playerid][Poshlina]);
	    cache_get_value_name_int(0, "Pasport", PI[playerid][Pasport]);
	    cache_get_value_name_int(0, "MedCard", PI[playerid][MedCard]);
	    cache_get_value_name_int(0, "Phone", PI[playerid][Phone]);
	    cache_get_value_name_int(0, "SimCard", PI[playerid][SimCard]);
	    cache_get_value_name_int(0, "PhoneMoney", PI[playerid][PhoneMoney]);
	    cache_get_value_name_int(0, "Frac", PI[playerid][Frac]);
	    cache_get_value_name_int(0, "FracLeader", PI[playerid][FracLeader]);
	    cache_get_value_name_int(0, "FracSkin", PI[playerid][FracSkin]);
	    cache_get_value_name_int(0, "FracRang", PI[playerid][FracRang]);
	    cache_get_value_name_int(0, "FracWarn", PI[playerid][FracWarn]);
	    cache_get_value_name_int(0, "ShtrafPPS", PI[playerid][ShtrafPPS]);
	    cache_get_value_name_int(0, "ShtrafDPS", PI[playerid][ShtrafDPS]);
	    cache_get_value_name_int(0, "Vip", PI[playerid][Vip]);
	    cache_get_value_name_int(0, "Mute", PI[playerid][Mute]);
	    cache_get_value_name_int(0, "MuteTime", PI[playerid][MuteTime]);
	    cache_get_value_name_int(0, "Jail", PI[playerid][Jail]);
	    cache_get_value_name_int(0, "JailTime", PI[playerid][JailTime]);
	    cache_get_value_name_int(0, "Warn", PI[playerid][Warn]);
	    cache_get_value_name_int(0, "Family", PI[playerid][Family]);
		cache_get_value_name(0, "SkillGun", strSkillGun, 50), sscanf(strSkillGun, "p<,>a<i>[7]", PI[playerid][SkillGun]);

		if(!PlayerLogin[playerid]) PlayerLogin[playerid] = true;
		SCM(playerid, cSERVER, "Приятной игры на Нашем сервере.");

		SetPlayerScore(playerid, PI[playerid][Level]);
		SetPlayerWantedLevel(playerid, PI[playerid][Wanted]);

		if(PI[playerid][Mute] && !SvMutePlayerStatus(playerid)) SvMutePlayerEnable(playerid); // Блокировка Voice
		if(!PI[playerid][Mute] && SvMutePlayerStatus(playerid)) SvMutePlayerDisable(playerid); // Разблокировка Voice

		// Загрузка Паспорта!
		if(PI[playerid][Pasport])
		{
		    new stringPass[120];
			format(stringPass, sizeof(stringPass), "SELECT * FROM "T_PASPORT" WHERE `pasName` = '%s'", GetName(playerid));
		    mysql_tquery(mysql, stringPass, "LoadPasport", "i", playerid);
		}

		if(PI[playerid][MedCard])
		{
			new stringMedCard[100]; // Проверка на счет в банке
			format(stringMedCard, sizeof(stringMedCard), "SELECT * FROM "T_MEDCARD" WHERE `mcName` = '%s' AND `mcDataClose` > NOW()", GetName(playerid));
		    mysql_tquery(mysql, stringMedCard, "LoadMedCard", "i", playerid);
		}

		if(PI[playerid][Vip])
		{
		    new stringVip[150];
		    format(stringVip, sizeof(stringVip), "SELECT * FROM "T_VIP" WHERE `pvName` = '%s' AND `pvDataClose` > NOW()", GetName(playerid));
		    mysql_tquery(mysql, stringVip, "LoadPlayerVip", "i", playerid);
		}
		
		/*if(TOTALPODARKI == MAX_PODARKI)
		{*/
		new stringPodarok[150];
    	format(stringPodarok, sizeof(stringPodarok), "SELECT * FROM "T_PODAROK" WHERE `spName` = '%s'", GetName(playerid));
    	mysql_tquery(mysql, stringPodarok, "LoadPlayerPodarok", "i", playerid);
		//}
		LoadPlayersMesage(playerid);
	}
	return 1;
}

stock LoadPlayersMesage(playerid)
{
	// PlayerLogin[playerid] = true;
	// PI[playerid][Timer] = SetTimerEx("UpdatePlayer", 1000, true, "i", playerid);
	if(PI[playerid][Jail])
	{
	    if(PI[playerid][Spawn] == 5) PI[playerid][Spawn] = 5;
	    else if(PI[playerid][Spawn] == 6) PI[playerid][Spawn] = 6;
	    else if(PI[playerid][Spawn] == 7)
	    {
			PI[playerid][Spawn] = 7; // Деморган
			StatusGateDemorgan[playerid] = true;
			GateDemorgan[playerid] = CreateDynamicObject(19302, -1765.7485, -2870.0015, 1031.7216, 0.0, 0.0, 0.0, 1, playerid+2, -1, 300.0, 300.0); //
		}
		SpawnPlayer(playerid);
	}
    else DialogPlayerSpawn(playerid);

	if(!AcI[playerid][acStatusPin])
	{
		SCM(playerid, -1, " ");
	    SCM(playerid, cSERVER, "Система: Внимание! У Вас не устоновлен PIN-код!");
	    SCM(playerid, cSERVER, "Система: Для защиты своего аккаунта устоновите PIN-код - (/mn > Настройки аккаунта > Настройки безопасности > Графический PIN код)");
		SCM(playerid, -1, " ");
	}

	if(!AcI[playerid][acStatusGoogle])
	{
		SCM(playerid, -1, " ");
	    SCM(playerid, cSERVER, "Система: Внимание! У Вас не устоновлен Google Authenticator.");
	    SCM(playerid, cSERVER, "Система: Для защиты своего аккаунта устоновите Google Authenticator!");
	    SCM(playerid, cSERVER, "Система: /mn > Настройки аккаунта > Настройки безопасности > Google Authenticator");
		SCM(playerid, -1, " ");
	}

	// Штрафы
	if(PI[playerid][ShtrafPPS])
	{
		SCM(playerid, -1, " ");
		FSCM(playerid, cRED, "У Вас есть неоплаченных %d из 30 штрафов.", PI[playerid][ShtrafPPS]);
		SCM(playerid, cRED, "Оплалить их можно в любом отделении банка, или Вас арустую на 15 суток сотрудники Полиции.");
		SCM(playerid, cBLUE, "Посмотреть все свом штрафы. Введите: /tickets");
		SCM(playerid, -1, " ");
	}
	if(PI[playerid][ShtrafDPS])
	{
		SCM(playerid, -1, " ");
		FSCM(playerid, cRED, "У Вас есть неоплаченных %d из 30 штрафов.", PI[playerid][ShtrafDPS]);
		SCM(playerid, cRED, "Оплалить их можно в здании ГИБДД, или в любом отделении банка, если не хотите чтобы у Вас отобрали права!");
		SCM(playerid, cBLUE, "Посмотреть все свом штрафы. Введите: /tickets");
		SCM(playerid, -1, " ");
	}
	//

	if(GetAdmin(playerid) || PI[playerid][FracLeader])
	{
		new ip[16];
		GetPlayerIp(playerid, ip, sizeof(ip));

	    new str[124];
	    format(str, sizeof(str), "%s %s [%d] зашел в игру. (RegIP: %s -- LastIP: %s)",
		(!GetAdmin(playerid)&&PI[playerid][FracLeader])?("Лидер"):(GetAdmin(playerid)&&GetAdmin(playerid)<7)?(AdminName(playerid)):("Администратор"), GetName(playerid), playerid, AcI[playerid][acRegIP], AcI[playerid][acLastIP], ip);
	    SCMAdmin(cRED, str);
	}

	if(PI[playerid][Family])
	{
		new string[128];
		string_f("Family: "SERVER"%s", FamI[PI[playerid][Family]][famName]);
		FamI[PI[playerid][Family]][famText] = CreateDynamic3DTextLabel(string, -1, 0.0, 0.0, 0.0, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1);
		Attach3DTextLabelToPlayer(FamI[PI[playerid][Family]][famText], playerid, 0.0, 0.0, 0.0);
	}
	SetPlayerSkills(playerid);
	return 1;
}

publics LoadCars()
{
	cache_get_row_count(TOTALCARS);
	if(!TOTALCARS) return 1;
	{
		new time = GetTickCount();
		for(new i; i < TOTALCARS; i++)
		{
			new CarSlot[45], CarSlotID[75];
			cache_get_value_name_int(i, "cID", CPI[i][cID]);
			cache_get_value_name(i, "cOwner", CPI[i][cOwner], 24);
			cache_get_value_name_int(i, "cModel", CPI[i][cModel]);
			cache_get_value_name_int(i, "cColor1", CPI[i][cColor1]);
			cache_get_value_name_int(i, "cColor2", CPI[i][cColor2]);
			cache_get_value_name_int(i, "cPainJob", CPI[i][cPainJob]);
			cache_get_value_name_int(i, "cTypePrice", CPI[i][cTypePrice]);
			cache_get_value_name_int(i, "cPrice", CPI[i][cPrice]);
			cache_get_value_name_float(i, "cPosX", CPI[i][cPosX]);
			cache_get_value_name_float(i, "cPosY", CPI[i][cPosY]);
			cache_get_value_name_float(i, "cPosZ", CPI[i][cPosZ]);
			cache_get_value_name_float(i, "cPosA", CPI[i][cPosA]);
			cache_get_value_name_int(i, "cInt", CPI[i][cInt]);
			cache_get_value_name_int(i, "cWorld", CPI[i][cWorld]);
			cache_get_value_name(i, "cNumber", CPI[i][cNumber], 15);
			cache_get_value_name_float(i, "cHealth", CPI[i][cHealth]);
			cache_get_value_name(i, "cKey", CPI[i][cKey], 24);
			cache_get_value_name_int(i, "cLimit", CPI[i][cLimit]);
			cache_get_value_name_int(i, "cDoors", CPI[i][cDoors]);
			cache_get_value_name_int(i, "cFuelType", CPI[i][cFuelType]);
			cache_get_value_name_float(i, "cFuel", CPI[i][cFuel]);
			cache_get_value_name_float(i, "cMilage", CPI[i][cMilage]);
			cache_get_value_name(i, "cCompanentSlot", CarSlot, 45), sscanf(CarSlot, "p<,>a<i>[14]", CPI[i][cCompanentSlot]);
			cache_get_value_name(i, "cCompanentID", CarSlotID, 75), sscanf(CarSlotID, "p<,>a<i>[14]", CPI[i][cCompanentID]);

			if(CPI[i][cPosX] != 0.0 && CPI[i][cPosY] != 0.0 && CPI[i][cPosY] != 0.0) continue;

			CarsID[i] = J_AddStaticVehicleEx(CPI[i][cModel], CPI[i][cPosX], CPI[i][cPosY], CPI[i][cPosZ], CPI[i][cPosA], CPI[i][cColor1], CPI[i][cColor2], 1200);
			SetVehicleHealth(CarsID[i], CPI[i][cHealth]);
			LinkVehicleToInterior(CarsID[i], CPI[i][cInt]);
			SetVehicleVirtualWorld(CarsID[i], CPI[i][cWorld]);
			SetLock(CarsID[i], CPI[i][cDoors]);
			ChangeVehiclePaintjob(CarsID[i], CPI[i][cPainJob]);
		}
		printf("-> Транспорт загружен: %i, за %i мс",  TOTALCARS, GetTickCount() - time);
	}
	return 1;
}

publics LoadPlayerVip(playerid)
{
	new string[512];
	cache_get_row_count(rows);
	if(rows)
    {
		cache_get_value_name(0, "pvName", PV[playerid][pvName], 24);
		cache_get_value_name(0, "pvData", PV[playerid][pvData], 32);
		cache_get_value_name(0, "pvDataClose", PV[playerid][pvDataClose], 32);
		cache_get_value_name_int(0, "pvData", PV[playerid][pvLevel]);

		SCM(playerid, -1, "");
		FSCM(playerid, -1, "Дата окончания "SERVER"VIP{FFFFFF} статуса: "BLUE"%s", PV[playerid][pvDataClose]);
		SCM(playerid, -1, "");
	}
	else
	{
		SCM(playerid, -1, "");
		SCM(playerid, cWAR, "Ваш VIP статус закончился!");
		PI[playerid][Vip] = 0;
		update_int_mysql(T_PLAYER, "Vip", PI[playerid][Vip], "ID", PI[playerid][ID]);

		string_f("DELETE FROM "T_VIP" WHERE `Name` = '%s'", GetName(playerid));
		mysql_query(mysql, string);
	}
	return 1;
}

// Система посадочных мест
publics LoadSeatDowns()
{
	cache_get_row_count(TOTALDOWNS);
	if(!TOTALDOWNS) return 1;
	{
		new time = GetTickCount();
		for(new i; i < TOTALDOWNS; i++)
		{
		   	cache_get_value_name_int(i, "SeatID", SeatI[i][SeatDownID]);
      		cache_get_value_name_float(i, "SeatX", SeatI[i][SeatDownX]);
		   	cache_get_value_name_float(i, "SeatY", SeatI[i][SeatDownY]);
		   	cache_get_value_name_float(i, "SeatZ", SeatI[i][SeatDownZ]);
		   	cache_get_value_name_float(i, "SeatA", SeatI[i][SeatDownA]);

			SeatI[i][SeatInfo] = CreateDynamic3DTextLabel("Сесть\n\t"SERVER"ALT", -1, SeatI[i][SeatDownX], SeatI[i][SeatDownY], SeatI[i][SeatDownZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		}
		printf("-> Места для сидений загружено: %d, за %i мс", TOTALDOWNS, GetTickCount() - time);
	}
	return 1;
}
//

// Система наказаний
publics LoadHistory(playerid)
{
	cache_get_row_count(ListHistory[playerid]);
    if(!ListHistory[playerid]) return SEM(playerid, "У Вас нет наказаний!");
	{
	   	new string[1024], str[512];
	    for(new i ; i < ListHistory[playerid]; i++)
	    {
		  	cache_get_value_name_int(i, "lhID", LH[i][lhID]);
	        cache_get_value_name(i, "lhData", LH[i][lhName], 24);
	        cache_get_value_name(i, "lhData", LH[i][lhData], 20);
	        cache_get_value_name(i, "lhText", LH[i][lhText], 256);

			format(str, sizeof(str), ""RED"%i. [%s] - %s\n", LH[i][lhID], LH[i][lhData], LH[i][lhText]);
			strcat(string, str);
			if(ListHistory[playerid] >= 30) SPD(playerid, dNull, d_info, ""RED"История наказаний", string, "Далее >>", "Закрыть");
			else SPD(playerid, dNull, d_info, ""RED"История наказаний", string, "Закрыть", "");
        }
	}
    return 1;
}

publics LoadFrac() // Система организации
{
	cache_get_row_count(TOTALFRAC);
    if(!TOTALFRAC)
    {
 		for(new i = TOTALFRAC; i < 11; i++)
		{
			new string[1024];
	        string_f("INSERT INTO "T_FRAC" \
				(`fID`, `fName`, `fPosExitX`, `fPosExitY`, `fPosExitZ`, `fPosExitA`, `fPosEnterX`, `fPosEnterY`, `fPosEnterZ`, `fPosEnterA`) VALUES \
				(%i, '%s', %.02f, %.02f, %.02f, %.02f, %.02f, %.02f, %.02f, %.02f)",
			FracInfos[i][fracID], FracInfos[i][fracLogin],
			FracInfos[i][fracExitPosX], FracInfos[i][fracExitPosY], FracInfos[i][fracExitPosZ], FracInfos[i][fracExitPosA],
			FracInfos[i][fracEnterPosX], FracInfos[i][fracEnterPosY], FracInfos[i][fracEnterPosZ], FracInfos[i][fracEnterPosA]);
			mysql_tquery(mysql, string);
		}
	}
	else
 	{
 	    new time = GetTickCount();
 		for(new f = 1; f <= TOTALFRAC; f++)
		{
			cache_get_value_name_int(f-1, "fID", FracI[f][fID]);
			cache_get_value_name(f-1, "fName", FracI[f][fName], 32);
			cache_get_value_name(f-1, "fLeader", FracI[f][fLeader], 24);
			cache_get_value_name_int(f-1, "fBank", FracI[f][fBank]);
			cache_get_value_name_int(f-1, "fMembers", FracI[f][fMembers]);

			cache_get_value_name_float(f-1, "fPosExitX", FracI[f][fPosExit][0]);
			cache_get_value_name_float(f-1, "fPosExitY", FracI[f][fPosExit][1]);
			cache_get_value_name_float(f-1, "fPosExitZ", FracI[f][fPosExit][2]);
			cache_get_value_name_float(f-1, "fPosExitA", FracI[f][fPosExit][3]);

			cache_get_value_name_float(f-1, "fPosEnterX", FracI[f][fPosEnter][0]);
			cache_get_value_name_float(f-1, "fPosEnterY", FracI[f][fPosEnter][1]);
			cache_get_value_name_float(f-1, "fPosEnterZ", FracI[f][fPosEnter][2]);
			cache_get_value_name_float(f-1, "fPosEnterA", FracI[f][fPosEnter][3]);

			cache_get_value_name_float(f-1, "fPosSpawnX", FracI[f][fPosSpawn][0]);
			cache_get_value_name_float(f-1, "fPosSpawnY", FracI[f][fPosSpawn][1]);
			cache_get_value_name_float(f-1, "fPosSpawnZ", FracI[f][fPosSpawn][2]);
			cache_get_value_name_float(f-1, "fPosSpawnA", FracI[f][fPosSpawn][3]);

			cache_get_value_name_float(f-1, "fPosSkinX", FracI[f][fPosSkin][0]);
			cache_get_value_name_float(f-1, "fPosSkinY", FracI[f][fPosSkin][1]);
			cache_get_value_name_float(f-1, "fPosSkinZ", FracI[f][fPosSkin][2]);

			if(FracI[f][fID] != FRAC_OPGB || FracI[f][fID] != FRAC_OPGY || FracI[f][fID] != FRAC_MAFIAH || FracI[f][fID] != FRAC_MAFIAR)
			{
				cache_get_value_name_float(f-1, "fPosInfoX", FracI[f][fPosInfo][0]);
				cache_get_value_name_float(f-1, "fPosInfoY", FracI[f][fPosInfo][1]);
				cache_get_value_name_float(f-1, "fPosInfoZ", FracI[f][fPosInfo][2]);
			}
			cache_get_value_name_float(f-1, "fPosGunX", FracI[f][fPosGun][0]);
			cache_get_value_name_float(f-1, "fPosGunY", FracI[f][fPosGun][1]);
			cache_get_value_name_float(f-1, "fPosGunZ", FracI[f][fPosGun][2]);

			cache_get_value_name_float(f-1, "fPosLoadGunX", FracI[f][fPosLoadGun][0]);
			cache_get_value_name_float(f-1, "fPosLoadGunY", FracI[f][fPosLoadGun][1]);
			cache_get_value_name_float(f-1, "fPosLoadGunZ", FracI[f][fPosLoadGun][2]);

			/*for(new fFloat; fFloat < 3; fFloat++)
			{
	            if(FracI[f][fPosEnter][fFloat] == 0.0) continue;
	            if(FracI[f][fPosExit][fFloat] == 0.0) continue;
	            if(FracI[f][fPosSpawn][fFloat] == 0.0) continue;
	            if(FracI[f][fPosSkin][fFloat] == 0.0) continue;
	            if(FracI[f][fPosGun][fFloat] == 0.0) continue;
	            if(FracI[f][fPosLoadGun][fFloat] == 0.0) continue;
            }*/

			// Вход в организацию
			picFracEnter[f] = CreateDynamicPic(1318, 23, FracI[f][fPosExit][0], FracI[f][fPosExit][1], FracI[f][fPosExit][2], 0, 0);

			new string[124];
			string_f("%s\n\n{BBBBBB}Нажмите: Alt", FracI[f][fName]);
			infoFracEnter[f] = CreateDynamic3DTextLabel(string, cSERVER, FracI[f][fPosExit][0], FracI[f][fPosExit][1], FracI[f][fPosExit][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

			// Выход из организации
			picFracExit[f] = CreateDynamicPic(1318, 23, FracI[f][fPosEnter][0], FracI[f][fPosEnter][1], FracI[f][fPosEnter][2], FracI[f][fID], FracI[f][fID]);
			infoFracExit[f] = CreateDynamic3DTextLabel(""SERVER"Выход\n\n{BBBBBB}Нажмите: Alt", -1, FracI[f][fPosEnter][0], FracI[f][fPosEnter][1], FracI[f][fPosEnter][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[f][fID]);

			// Информация в организации
            if(FracI[f][fPosInfo][0] == 0 || FracI[f][fPosInfo][1] == 0 || FracI[f][fPosInfo][2] == 0) continue;

			if(FracI[f][fPosInfo][0] != 0.0 && FracI[f][fPosInfo][1] != 0.0 && FracI[f][fPosInfo][2] != 0.0)
				picFracInfo[f] = CreateDynamicPic(1239, 23, FracI[f][fPosInfo][0], FracI[f][fPosInfo][1], FracI[f][fPosInfo][2], FracI[f][fID], FracI[f][fID]);
            if(FracI[f][fPosInfo][0] != 0.0 && FracI[f][fPosInfo][1] != 0.0 && FracI[f][fPosInfo][2] != 0.0)
				infoFracInfo[f] = CreateDynamic3DTextLabel(""SERVER"Информационный отдел\n\n{BBBBBB}Нажмите: Alt", cSERVER, FracI[f][fPosInfo][0], FracI[f][fPosInfo][1], FracI[f][fPosInfo][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[f][fID]);

			// Раздевалка в организации
			picFracSkin[f] = CreateDynamicPic(1275, 23, FracI[f][fPosSkin][0], FracI[f][fPosSkin][1], FracI[f][fPosSkin][2], FracI[f][fID], FracI[f][fID]);
			infoFracSkin[f] = CreateDynamic3DTextLabel(""SERVER"Раздевалка\n\n{BBBBBB}Нажмите: Alt", cSERVER, FracI[f][fPosSkin][0], FracI[f][fPosSkin][1], FracI[f][fPosSkin][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[f][fID]);

			// Оружейная в организации
			if(FracI[f][fID] == FRAC_SMP) picFracGun[f] = CreateDynamicPic(11738, 23, FracI[f][fPosGun][0], FracI[f][fPosGun][1], FracI[f][fPosGun][2], FracI[f][fID], FracI[f][fID]);
			else if(FracI[f][fID] == FRAC_SMI) picFracGun[f] = CreateDynamicPic(1253, 23, FracI[f][fPosGun][0], FracI[f][fPosGun][1], FracI[f][fPosGun][2], FracI[f][fID], FracI[f][fID]);
			else picFracGun[f] = CreateDynamicPic(353, 23, FracI[f][fPosGun][0], FracI[f][fPosGun][1], FracI[f][fPosGun][2], FracI[f][fID], FracI[f][fID]);
			infoFracGun[f] = CreateDynamic3DTextLabel(""SERVER"Склад", cSERVER, FracI[f][fPosGun][0], FracI[f][fPosGun][1], FracI[f][fPosGun][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FracI[f][fID]);

			// Загрузка материалов
			infoLoadGun[f] = CreateDynamic3DTextLabel(""SERVER"Загрузка материалов\n\n{BBBBBB}Нажмите: Гудок", -1, FracI[f][fPosLoadGun][0], FracI[f][fPosLoadGun][1], FracI[f][fPosLoadGun][2]+0.80, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0);

		}
		printf("-> Организации загружены: %i, за %i мс",  TOTALFRAC, GetTickCount() - time);
	}
	return 1;
}
//
publics LoadCarFrac()
{
	new time = GetTickCount();
	new Cache: result = mysql_query(mysql, "select * from "T_CARFRAC"");
	cache_get_row_count(TOTALCARFRAC);
	if(!TOTALCARFRAC) return 1;
	{
		for(new i; i < TOTALCARFRAC; i++)
		{
			cache_get_value_name_int(i, "fcID", FC[i][fcID]);
			cache_get_value_name_int(i, "fcFrac", FC[i][fcFrac]);
			cache_get_value_name_int(i, "fcRang", FC[i][fcRang]);
			cache_get_value_name_int(i, "fcModel", FC[i][fcModel]);
			cache_get_value_name_int(i, "fcInt", FC[i][fcInt]);
			cache_get_value_name_int(i, "fcWorld", FC[i][fcWorld]);
			cache_get_value_name_int(i, "fcPrice", FC[i][fcPrice]);
			cache_get_value_name_float(i, "fcPosX", FC[i][fcPos][0]);
			cache_get_value_name_float(i, "fcPosY", FC[i][fcPos][1]);
			cache_get_value_name_float(i, "fcPosZ", FC[i][fcPos][2]);
			cache_get_value_name_float(i, "fcPosA", FC[i][fcPos][3]);
			cache_get_value_name_int(i, "fcLock", FC[i][fcLock]);
			cache_get_value_name_float(i, "fcFuel", FC[i][fcFuel]);
			cache_get_value_name_float(i, "fcHealth", FC[i][fcHealth]);
			cache_get_value_name_int(i, "fcColor1", FC[i][fcColor][0]);
			cache_get_value_name_int(i, "fcColor2", FC[i][fcColor][1]);
			cache_get_value_name_int(i, "fcPaintJob", FC[i][fcPaintJob]);
			cache_get_value_name_int(i, "fcSirena", FC[i][fcSirena]);

			if(FC[i][fcPos][0] == 0 && FC[i][fcPos][1] == 0 && FC[i][fcPos][2] == 0) continue;
			if(!FC[i][fcModel]) continue;

			FCar[i] = AddStaticVehicleFrac(FC[i][fcModel], FC[i][fcFrac], FC[i][fcRang], FC[i][fcPos][0], FC[i][fcPos][1], FC[i][fcPos][2], FC[i][fcPos][3], FC[i][fcColor][0], FC[i][fcColor][1], 1200, FC[i][fcSirena]);
			ChangeVehicleColor(FCar[i], FC[i][fcColor][0], FC[i][fcColor][1]);
			SetVehicleHealth(FCar[i], FC[i][fcHealth]);
			LinkVehicleToInterior(FCar[i], FC[i][fcInt]);
			SetVehicleVirtualWorld(FCar[i], FC[i][fcWorld]);
			ChangeVehiclePaintjob(FCar[i], FC[i][fcPaintJob]);
		}
		printf("-> Транспорт организаций загружен: %d, за %i мс", TOTALCARFRAC, GetTickCount() - time);
	}
	return cache_delete(result);
}

publics LoadCarFracID(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return 1;
	{
		new f = rows;
		cache_get_value_name_int(0, "fcID", FC[f][fcID]);
		cache_get_value_name_int(0, "fcFrac", FC[f][fcFrac]);
		cache_get_value_name_int(0, "fcRang", FC[f][fcRang]);
		cache_get_value_name_int(0, "fcModel", FC[f][fcModel]);
		cache_get_value_name_int(0, "fcInt", FC[f][fcInt]);
		cache_get_value_name_int(0, "fcWorld", FC[f][fcWorld]);
		cache_get_value_name_int(0, "fcPrice", FC[f][fcPrice]);
		cache_get_value_name_float(0, "fcPosX", FC[f][fcPos][0]);
		cache_get_value_name_float(0, "fcPosY", FC[f][fcPos][1]);
		cache_get_value_name_float(0, "fcPosZ", FC[f][fcPos][2]);
		cache_get_value_name_float(0, "fcPosA", FC[f][fcPos][3]);
		cache_get_value_name_int(0, "fcLock", FC[f][fcLock]);
		cache_get_value_name_float(0, "fcFuel", FC[f][fcFuel]);
		cache_get_value_name_float(0, "fcHealth", FC[f][fcHealth]);
		cache_get_value_name_int(0, "fcColor1", FC[f][fcColor][0]);
		cache_get_value_name_int(0, "fcColor2", FC[f][fcColor][1]);
		cache_get_value_name_int(0, "fcPaintJob", FC[f][fcPaintJob]);
		cache_get_value_name_int(0, "fcSirena", FC[f][fcSirena]);

		FCar[f] = AddStaticVehicleFrac(FC[f][fcModel], FC[f][fcFrac], FC[f][fcRang], FC[f][fcPos][0], FC[f][fcPos][1], FC[f][fcPos][2], FC[f][fcPos][3], FC[f][fcColor][0], FC[f][fcColor][1], 1200, FC[f][fcSirena]);
		ChangeVehicleColor(FCar[f], FC[f][fcColor][0], FC[f][fcColor][1]);
		SetVehicleHealth(FCar[f], FC[f][fcHealth]);
		LinkVehicleToInterior(FCar[f], FC[f][fcInt]);
		SetVehicleVirtualWorld(FCar[f], FC[f][fcWorld]);
		ChangeVehiclePaintjob(FCar[f], FC[f][fcPaintJob]);

		FSCM(playerid, -1, "Транспорт "SERVER"%i - (%i){FFFFFF} для организации "SERVER"''%s''{FFFFFF} успешно зоздан!", FC[f][fcID], FC[f][fcModel], FracI[FC[f][fcFrac]][fName]);
	}
	return 1;
}

publics LoadAvtoParkFrac(playerid, fracid)
{
 	cache_get_row_count(fracid);
	if(!fracid) return SEM(playerid, "У Вашей организации еще нет автопарка!");
	{
		new str[124], string[1024], cars=0;
		string[0] = EOS;
		strcat(string, "№. Модель (ID)\tОрганизация\tДоступен\tТопливо\n");
		for(new i; i < fracid; i++)
		{
			cache_get_value_name_int(i, "fcID", FC[i][fcID]);
			cache_get_value_name_int(i, "fcFrac", FC[i][fcFrac]);
			cache_get_value_name_int(i, "fcRang", FC[i][fcRang]);
			cache_get_value_name_int(i, "fcModel", FC[i][fcModel]);
			cache_get_value_name_int(i, "fcInt", FC[i][fcInt]);
			cache_get_value_name_int(i, "fcWorld", FC[i][fcWorld]);
			cache_get_value_name_int(i, "fcPrice", FC[i][fcPrice]);
			cache_get_value_name_float(i, "fcPosX", FC[i][fcPos][0]);
			cache_get_value_name_float(i, "fcPosY", FC[i][fcPos][1]);
			cache_get_value_name_float(i, "fcPosZ", FC[i][fcPos][2]);
			cache_get_value_name_float(i, "fcPosA", FC[i][fcPos][3]);
			cache_get_value_name_int(i, "fcLock", FC[i][fcLock]);
			cache_get_value_name_float(i, "fcFuel", FC[i][fcFuel]);
			cache_get_value_name_float(i, "fcHealth", FC[i][fcHealth]);
			cache_get_value_name_int(i, "fcColor1", FC[i][fcColor][0]);
			cache_get_value_name_int(i, "fcColor2", FC[i][fcColor][1]);
			cache_get_value_name_int(i, "fcPaintJob", FC[i][fcPaintJob]);
			cache_get_value_name_int(i, "fcSirena", FC[i][fcSirena]);

			if(FC[i][fcFrac] != GetFrac(playerid)) continue;
			cars++;
			format(str, sizeof(str), ""SERVER"%i. {FFFFFF}[ %i ] %s (%i)\t"SERVER"%s [%i]\t"WHITE"%.3f м.\n",
			cars, FC[i][fcModel], VehStats[FC[i][fcModel]-400][vName], FCar[i], GetRangName[FC[i][fcFrac]][FC[i][fcRang]-1], FC[i][fcRang], VehicleInfo[FCar[i]][vFuel]);
			strcat(string, str);

			ShowFracCar[playerid][cars] = FCar[i];
		}
		SPD(playerid, dSettingCarFrac, d_tlisth, ""SERVER"Автопарк организации", string, "Выбрать", "<< Назад");
	}
	return 1;
}

// Система семьи
publics LoadFamily()
{
	cache_get_row_count(TOTALFAM);
    if(!TOTALFAM) return 1;
 	{
		new time = GetTickCount();
		for(new i = 1; i <= TOTALFAM; i++)
		{
			cache_get_value_name_int(i-1, "famID", FamI[i][famID]);
			cache_get_value_name(i-1, "famName", FamI[i][famName], 24);
			cache_get_value_name(i-1, "famCreator", FamI[i][famCreator], 24);
			cache_get_value_name(i-1, "famZam", FamI[i][famZam], 24);
			cache_get_value_name(i-1, "famData", FamI[i][famData], 32);
			cache_get_value_name_int(i-1, "famHouse", FamI[i][famHouse]);
			cache_get_value_name_int(i-1, "famBank", FamI[i][famBank]);
			cache_get_value_name_int(i-1, "famInt", FamI[i][famInt]);
			cache_get_value_name_int(i-1, "famWorld", FamI[i][famWorld]);
			cache_get_value_name_float(i-1, "famSpawnX", FamI[i][famSpawn][0]);
			cache_get_value_name_float(i-1, "famSpawnY", FamI[i][famSpawn][1]);
			cache_get_value_name_float(i-1, "famSpawnZ", FamI[i][famSpawn][2]);
			cache_get_value_name_float(i-1, "famSpawnA", FamI[i][famSpawn][3]);
			cache_get_value_name_int(i-1, "famMembers", FamI[i][famMembers]);
		}
		return printf("-> Семьи загружены: %i, за %i мс",  TOTALFAM, GetTickCount() - time);
	}
}
//

// Система билбордов
publics LoadBilbord()
{
    new time = GetTickCount();
 	cache_get_row_count(TOTALBILBORD);
    if(!TOTALBILBORD) return 1;
	{
		for(new i = 1; i <= TOTALBILBORD; i++)
		{
			cache_get_value_name_int(i-1, "bID", BI[i][bID]);
			cache_get_value_name_int(i-1, "bType", BI[i][bType]);
			cache_get_value_name_int(i-1, "bPrice", BI[i][bPrice]);
			cache_get_value_name(i-1, "bOwner", BI[i][bOwner], 24);
			cache_get_value_name(i-1, "bFon", BI[i][bFon], 8);
			cache_get_value_name(i-1, "bText", BI[i][bText], 90);
			cache_get_value_name_float(i-1, "bPosX", BI[i][bPos][0]);
			cache_get_value_name_float(i-1, "bPosY", BI[i][bPos][1]);
			cache_get_value_name_float(i-1, "bPosZ", BI[i][bPos][2]);
			cache_get_value_name_float(i-1, "bPosA", BI[i][bPos][3]);

			if(BI[i][bPos][0] == 0.0 && BI[i][bPos][1] == 0.0 && BI[i][bPos][2] == 0.0) continue;

			BoldObject[i] = CreateDynamicObjectEx(3613, BI[i][bPos][0], BI[i][bPos][1], BI[i][bPos][2],   0.00000, 0.00000, BI[i][bPos][3], 500.000, 500.000);

			if(GetString(BI[i][bText], "NULL")) format(BilBordText[i], 90, "{FFFFFF}Рекламный щит: {FF9900}№ %d{FFFFFF}\nЗдесь может быть ваша\n{FF9900}реклама", BI[i][bID]);
			else format(BilBordText[i], 90, "%s", BI[i][bText]);
			SetDynamicObjectMaterialText(BoldObject[i], 2, BilBordText[i], 90, "Impact", 24, 0, -32256, -16777216, 1);

			new string[32];
			string_f("Рекламный щит: "SERVER"№ %i", BI[i][bID]);
			BildInfo[i] = CreateDynamic3DTextLabel(string, cSERVER, BI[i][bPos][0], BI[i][bPos][1], BI[i][bPos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		}
		return printf("-> Рекламные щиты загружены: %i, за %i мс",  TOTALBILBORD, GetTickCount() - time);
	}
}

publics LoadBilBord_ID(playerid)
{
 	cache_get_row_count(rows);
    if(!rows) return 1;
	{
		new i = rows;
		cache_get_value_name_int(0, "bID", BI[i][bID]);
		cache_get_value_name_int(0, "bType", BI[i][bType]);
		cache_get_value_name_int(0, "bPrice", BI[i][bPrice]);
		cache_get_value_name(0, "bOwner", BI[i][bOwner], 24);
		cache_get_value_name(0, "bFon", BI[i][bFon], 8);
		cache_get_value_name(0, "bText", BI[i][bText], 90);
		cache_get_value_name_float(0, "bPosX", BI[i][bPos][0]);
		cache_get_value_name_float(0, "bPosY", BI[i][bPos][1]);
		cache_get_value_name_float(0, "bPosZ", BI[i][bPos][2]);
		cache_get_value_name_float(0, "bPosA", BI[i][bPos][3]);

		BoldObject[i] = CreateDynamicObjectEx(3613, BI[i][bPos][0], BI[i][bPos][1], BI[i][bPos][2],   0.00000, 0.00000, BI[i][bPos][3], 500.000, 500.000);
		if(GetString(BI[i][bText], "NULL")) format(BilBordText[i], 90, "{FFFFFF}Рекламный щит: {FF9900}№ %d{FFFFFF}\nЗдесь может быть ваша\n{FF9900}реклама", BI[i][bID]);
		else format(BilBordText[i], 90, "%s", BI[i][bText]);
		SetDynamicObjectMaterialText(BoldObject[i], 2, BilBordText[i], 90, "Impact", 24, 0, -32256, -16777216, 1);

		new string[32];
		string_f("Рекламный щит: "SERVER"№ %i", BI[i][bID]);
		BildInfo[i] = CreateDynamic3DTextLabel(string, cWHITE, BI[i][bPos][0], BI[i][bPos][1], BI[i][bPos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

		FSCM(playerid, -1, "[BilBord] Рекламный щит № %i успешно установлен!", BI[i][bID]);
	}
	return 1;
}
//

// Система банковских карт
publics LoadPlayerCard(playerid)
{
 	cache_get_row_count(rows);
    if(!rows) return 1;
	{
		new NumeberCards[20], DataCards[5];
		cache_get_value_name_int(0, "bpcID", BPC[playerid][bpcID]); //
		cache_get_value_name(0, "bpcOwner", BPC[playerid][bpcOwner], 24); // Владелец карты
		cache_get_value_name(0, "bpcNumber", NumeberCards, 20), sscanf(NumeberCards, "p< >a<i>[4]", BPC[playerid][bpcNumber]); // Номер карты
		cache_get_value_name(0, "bpcData", DataCards, 5), sscanf(DataCards, "p</>a<i>[2]", BPC[playerid][bpcData]); // Дата окончания карты
		cache_get_value_name_int(0, "bpcCode", BPC[playerid][bpcCode]); // Код безопасности карты
		cache_get_value_name_int(0, "bpcPinCod", BPC[playerid][bpcPinCod]); // PIN код карты
		cache_get_value_name_int(0, "bpcMoney", BPC[playerid][bpcMoney]); //
		cache_get_value_name_int(0, "bpcStatus", BPC[playerid][bpcStatus]); //Статус карты

		if(!BPC[playerid][bpcStatus]) { }
	}
	return 1;
}


// Система бизнеса - Таксопарка
publics LoadTaxopark()
{
 	cache_get_row_count(rows);
    if(!rows) return 1;
	{
		cache_get_value_name_int(0, "tiID", TI[tiID]); // Новер таксопарка
		cache_get_value_name(0, "tiOwner", TI[tiOwner], 24); // Владелец таксопарка
		cache_get_value_name(0, "tiName", TI[tiName], 32); // Название таксопарка
		cache_get_value_name_int(0, "tiType", TI[tiType]); // Тип продажи таксопарка
		cache_get_value_name_int(0, "tiPrice", TI[tiPrice]); // Цена продажи таксопарка
		cache_get_value_name_int(0, "tiNalogs", TI[tiNalogs]); // Налоги таксопарка
		cache_get_value_name_int(0, "tiBank", TI[tiBank]); // Банк таксопарка
		// Место входа таксопарка
		cache_get_value_name_float(0, "tiPosX", TI[tiPos][0]); //
		cache_get_value_name_float(0, "tiPosY", TI[tiPos][1]); //
		cache_get_value_name_float(0, "tiPosZ", TI[tiPos][2]); //
		cache_get_value_name_float(0, "tiPosA", TI[tiPos][3]); //
		// Место информации таксопарка
		cache_get_value_name_float(0, "tiInfoX", TI[tiInfo][0]); //
		cache_get_value_name_float(0, "tiInfoY", TI[tiInfo][1]); //
		cache_get_value_name_float(0, "tiInfoZ", TI[tiInfo][2]); //
		// Меню управления таксопарка
		cache_get_value_name_float(0, "tiMenuX", TI[tiMenu][0]); //
		cache_get_value_name_float(0, "tiMenuY", TI[tiMenu][1]); //
		cache_get_value_name_float(0, "tiMenuZ", TI[tiMenu][2]); //
		//
		cache_get_value_name_int(0, "tiMembers", TI[tiMembers]); // Кол-во работников таксопарка

		if(TI[tiPos][0] != 0 && TI[tiPos][1] != 0 && TI[tiPos][2]) TI[tiPickup][0] = CreateDynamicPic(1318, 23, TI[tiPos][0], TI[tiPos][1], TI[tiPos][2], 0, 0);
		if(TI[tiInfo][0] != 0 && TI[tiInfo][1] != 0 && TI[tiInfo][2]) TI[tiPickup][1] = CreateDynamicPic(1239, 23, TI[tiInfo][0], TI[tiInfo][1], TI[tiInfo][2], TI[tiID], TI[tiID]);
		if(TI[tiMenu][0] != 0 && TI[tiMenu][1] != 0 && TI[tiMenu][2]) TI[tiPickup][2] = CreateDynamicPic(1239, 23, TI[tiMenu][0], TI[tiMenu][1], TI[tiMenu][2], TI[tiID], TI[tiID]);

		printf("-> Таксопарк [№ %i] успешно загружен.", TI[tiID]);
	}
	return 1;
}

publics LoadCarTaxopark()
{
    new time = GetTickCount();
 	cache_get_row_count(TOTALCARTAXI);
    if(!TOTALCARTAXI) return 1;
	{
	    for(new i; i < TOTALCARTAXI; i++)
		{
			cache_get_value_name_int(i, "tcID", TC[i][tcID]);
			cache_get_value_name_int(i, "tcKlass", TC[i][tcKlass]);
			cache_get_value_name_int(i, "tcModel", TC[i][tcModel]);
			cache_get_value_name_int(i, "tcColor1", TC[i][tcColor][0]);
			cache_get_value_name_int(i, "tcColor2", TC[i][tcColor][1]);
			cache_get_value_name_float(i, "tcPosX", TC[i][tcPos][0]);
			cache_get_value_name_float(i, "tcPosY", TC[i][tcPos][1]);
			cache_get_value_name_float(i, "tcPosZ", TC[i][tcPos][2]);
			cache_get_value_name_float(i, "tcPosA", TC[i][tcPos][3]);
			cache_get_value_name_int(i, "tcInt", TC[i][tcInt]);
			cache_get_value_name_int(i, "tcWorld", TC[i][tcWorld]);
			cache_get_value_name_int(i, "tcLock", TC[i][tcLock]);
			cache_get_value_name_float(i, "tcHealth", TC[i][tcHealth]);
			cache_get_value_name_float(i, "tcFuel", TC[i][tcFuel]);
			cache_get_value_name_float(i, "tcMilige", TC[i][tcMilige]);

			if(TC[i][tcPos][0] == 0 && TC[i][tcPos][1] == 0 && TC[i][tcPos][2] == 0) continue;
			if(!TC[i][tcModel]) continue;

			CarTaxi[i] = AddStaticVehicleEx(TC[i][tcModel], TC[i][tcPos][0], TC[i][tcPos][1], TC[i][tcPos][2], TC[i][tcPos][3], TC[i][tcColor][0], TC[i][tcColor][1], 1200);
			ChangeVehicleColor(CarTaxi[i], TC[i][tcColor][0], TC[i][tcColor][1]);
			SetVehicleHealth(CarTaxi[i], TC[i][tcHealth]);
			LinkVehicleToInterior(CarTaxi[i], TC[i][tcInt]);
			SetVehicleVirtualWorld(CarTaxi[i], TC[i][tcWorld]);
			VehicleInfo[CarTaxi[i]][vFuel] = TC[i][tcFuel];

			if(TC[i][tcKlass]==1) CarTaxiInfo[i] = CreateDynamic3DTextLabel("Такси\n{FFFFFF}Ниский класс", cYELLOW, 0, 0, 2.0, 10.0, INVALID_PLAYER_ID, CarTaxi[i]);
			else CarTaxiInfo[i] = CreateDynamic3DTextLabel("Такси\n{FFFFFF}Средний класс", cYELLOW, 0, 0, 2.0, 10.0, INVALID_PLAYER_ID, CarTaxi[i]);
			Attach3DTextLabelToVehicle(CarTaxiInfo[i], CarTaxi[i], 0.0, 0.0, 2.0);
		}
		printf("-> Транспорт таксопарка загружен: %i, за %i мс", TOTALCARTAXI, GetTickCount() - time);
	}
	return 1;
}
//

// Система подарков
publics LoadPodarki()
{
    new time = GetTickCount();
 	cache_get_row_count(TOTALPODARKI);
    if(!TOTALPODARKI) return 1;
	{
	    for(new i = 1; i <= TOTALPODARKI; i++)
		{
			cache_get_value_name_int(i-1, "podID", Podarok[i][podID]);
			cache_get_value_name_int(i-1, "podPic", Podarok[i][podPic]);
			cache_get_value_name_int(i-1, "podStatus", Podarok[i][podStatus]);
			cache_get_value_name_float(i-1, "podPosX", Podarok[i][podPosX]);
			cache_get_value_name_float(i-1, "podPosY", Podarok[i][podPosY]);
			cache_get_value_name_float(i-1, "podPosZ", Podarok[i][podPosZ]);
			cache_get_value_name_int(i-1, "podWorld", Podarok[i][podWorld]);
			cache_get_value_name_int(i-1, "podInt", Podarok[i][podInt]);
			
			picPodarok[i] = CreateDynamicPic(Podarok[i][podPic], 23, Podarok[i][podPosX], Podarok[i][podPosY], Podarok[i][podPosZ], Podarok[i][podWorld], Podarok[i][podInt]);
		}
		printf("-> Подарки загружены: %i, за %i мс", TOTALPODARKI, GetTickCount() - time);
	}
	return 1;
}

publics LoadPlayerPodarok(playerid)
{
 	cache_get_row_count(rows);
    if(!rows)
	{
	    new string[120];
		string_f("INSERT INTO "T_PODAROK" (`spName`) VALUES ('%s')", GetName(playerid));
		mysql_tquery(mysql, string);
	}
	else
	{
	    new podarokStatus[64];
		cache_get_value_name_int(0, "spID", SerP[playerid][spID]);
		cache_get_value_name(0, "spName", SerP[playerid][spName], 32);
		cache_get_value_name_int(0, "spCount", SerP[playerid][spCount]);
		cache_get_value_name(0, "spStatus", podarokStatus, 64), sscanf(podarokStatus, "p<,>a<i>[30]", SerP[playerid][spStatus]);
	}
	return 1;
}

stock SetPrizePodarok(playerid, i)
{
	if(SerP[playerid][spCount] != 30)
	{
		SerP[playerid][spCount] ++;
		SerP[playerid][spStatus][i] = 1;

		if(SerP[playerid][spCount] == 30)
		{
			new string[32];
			string_f("Поздравляем игрока %s с находкой всех 30-ти подарков!", GetName(playerid));
			SCMAll(cYELLOW, string);
		}
		
		new string[248];
		string_f("UPDATE "T_PODAROK" SET `spCount` = %i, `spStatus` = '%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i' WHERE `spName` = '%s'",
		SerP[playerid][spCount],
		SerP[playerid][spStatus][0], SerP[playerid][spStatus][1], SerP[playerid][spStatus][2], SerP[playerid][spStatus][3], SerP[playerid][spStatus][4],
		SerP[playerid][spStatus][5], SerP[playerid][spStatus][6], SerP[playerid][spStatus][7], SerP[playerid][spStatus][8], SerP[playerid][spStatus][9],
		SerP[playerid][spStatus][10], SerP[playerid][spStatus][11], SerP[playerid][spStatus][12], SerP[playerid][spStatus][13], SerP[playerid][spStatus][14],
		SerP[playerid][spStatus][15], SerP[playerid][spStatus][16], SerP[playerid][spStatus][17], SerP[playerid][spStatus][18], SerP[playerid][spStatus][19],
		SerP[playerid][spStatus][20], SerP[playerid][spStatus][21], SerP[playerid][spStatus][22], SerP[playerid][spStatus][23], SerP[playerid][spStatus][24],
		SerP[playerid][spStatus][25], SerP[playerid][spStatus][26], SerP[playerid][spStatus][27], SerP[playerid][spStatus][28], SerP[playerid][spStatus][29],
		SerP[playerid][spName]);
		mysql_tquery(mysql, string);
		FSCM(playerid, cSERVER, "Вы нашли %i из %i подарков", SerP[playerid][spCount], TOTALPODARKI);
		
		switch(random(100))
		{
		    case 0..1: // 1 %
		    {
				new DO = 100 + random(99);
                GiveDonat(playerid, DO);
                FSCM(playerid, cSERVER,  "Вы получили %s ДО", ConvertCash(DO));
			}
		    case 2..12: // 10%
		    {
				new Cash = 250000 + random(249999);
                GiveMoney(playerid, Cash);
                FSCM(playerid, cSERVER,  "Вы получили %s рублей", ConvertCash(Cash));
			}
		    case 13..33: // 20%
		    {
				new Cash = 100000 + random(99999);
                GiveMoney(playerid, Cash);
                FSCM(playerid, cSERVER,  "Вы получили %s рублей", ConvertCash(Cash));
			}
			case 34..64: // 30%
			{
				new Cash = 50000 + random(49999);
                GiveMoney(playerid, Cash);
                FSCM(playerid, cSERVER,  "Вы получили %s рублей", ConvertCash(Cash));
			}
			case 65..100: // 35%
			{
				new Cash = 25000 + random(24999);
                GiveMoney(playerid, Cash);
                FSCM(playerid, cSERVER,  "Вы получили %s рублей", ConvertCash(Cash));
			}
		}
	}
	return 1;
}
//

// Система Промо-кода
publics LoadPromo()
{
    new time = GetTickCount();
 	cache_get_row_count(TOTALPROMO);
    if(!TOTALPROMO) return 1;
	{
	    for(new i; i < TOTALPROMO; i++)
		{
			cache_get_value_name_int(i, "prID", PrI[i][prID]);
			cache_get_value_name(i, "prName", PrI[i][prName], 32);
			cache_get_value_name_int(i, "prActive", PrI[i][prActive]);
			cache_get_value_name_int(i, "prLevelDown", PrI[i][prLevelDown]);
			cache_get_value_name_int(i, "prLevelMax", PrI[i][prLevelMax]);
			cache_get_value_name(i, "prCreateAdmin", PrI[i][prCreateAdmin], 24);
			cache_get_value_name(i, "prCreateData", PrI[i][prCreateData], 20);
			cache_get_value_name_int(i, "prPrizExp", PrI[i][prPrizExp]);
			cache_get_value_name_int(i, "prPrizLevel", PrI[i][prPrizLevel]);
			cache_get_value_name_int(i, "prPrizMoney", PrI[i][prPrizMoney]);
			cache_get_value_name_int(i, "prPrizDonat", PrI[i][prPrizDonat]);
			cache_get_value_name_int(i, "prPrizVip", PrI[i][prPrizVip]);
			cache_get_value_name_int(i, "prPrizCar", PrI[i][prPrizCar]);
			cache_get_value_name_int(i, "prPrizHouse", PrI[i][prPrizHouse]);
			cache_get_value_name_int(i, "prStatus", PrI[i][prStatus]);
		}
		printf("-> Промо-коды загружены: %i, за %i мс", TOTALPROMO, GetTickCount() - time);
	}
	return 1;
}
//

publics LoadJobSkill(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return 1;
	{
	    new jExps[512], jLevels[124];
		cache_get_value_name_int(0, "jID", JS[playerid][jID]);
		cache_get_value_name(0, "jName", JS[playerid][jName], 24);
		cache_get_value_name(0, "jExp", jExps, 512), sscanf(jExps, "p<,>a<i>[10]", JS[playerid][jExp]);
		cache_get_value_name(0, "jLevel", jLevels, 124), sscanf(jLevels, "p<,>a<i>[10]", JS[playerid][jLevel]);
	}
	return 1;
}

// Система ATM - Банкомата
publics LoadATM()
{
	new time = GetTickCount();
	cache_get_row_count(TOTALATM);
	if(!TOTALATM) return 1;
	{
		for(new a = 1; a <= TOTALATM; a++)
		{
			cache_get_value_name_int(a-1, "aID", ATMInfo[a][aID]);
			cache_get_value_name_int(a-1, "aPrice", ATMInfo[a][aPrice]);
			cache_get_value_name(a-1, "aOwner", ATMInfo[a][aOwner], 24);
			cache_get_value_name_int(a-1, "aBank", ATMInfo[a][aBank]);
			cache_get_value_name_int(a-1, "aMoney", ATMInfo[a][aMoney]);
			cache_get_value_name_int(a-1, "aStatus", ATMInfo[a][aStatus]);
			cache_get_value_name_float(a-1, "aPosX", ATMInfo[a][aPos][0]);
			cache_get_value_name_float(a-1, "aPosY", ATMInfo[a][aPos][1]);
			cache_get_value_name_float(a-1, "aPosZ", ATMInfo[a][aPos][2]);
			cache_get_value_name_float(a-1, "aPosA", ATMInfo[a][aPos][3]);

			if(ATMInfo[a][aPos][0] == 0.0 && ATMInfo[a][aPos][1] == 0.0 && ATMInfo[a][aPos][2] == 0.0) continue;

			ATMObject[a] = CreateDynamicObject(2942, ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2], 0.0, 0.0, ATMInfo[a][aPos][3]);
	        SetObjectMaterialText(ATMObject[a], "\nБанкомат", 2, OBJECT_MATERIAL_SIZE_256x256, "Tahoma", 48, 1, 0xFF000000, 0xFFFFFF00, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			ATMIcon[a] = CreateDynamicMapIcon(ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2], 52, 0, 0, 0, -1, 20.0);
			ATMText[a] = CreateDynamic3DTextLabel(" ", cSERVER, ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2]+1.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	    }
		printf("-> Банкоматы загружены: %d, за %i мс", TOTALATM, GetTickCount() - time);
	}
	return 1;
}

publics LoadATM_ID(playerid)
{
	cache_get_row_count(rows);
	if(!rows) return 1;
	{
		new a = rows;
		cache_get_value_name_int(0, "aID", ATMInfo[a][aID]);
		cache_get_value_name_int(0, "aPrice", ATMInfo[a][aPrice]);
		cache_get_value_name(0, "aOwner", ATMInfo[a][aOwner], 24);
		cache_get_value_name_int(0, "aBank", ATMInfo[a][aBank]);
		cache_get_value_name_int(0, "aMoney", ATMInfo[a][aMoney]);
		cache_get_value_name_int(0, "aStatus", ATMInfo[a][aStatus]);
		cache_get_value_name_float(0, "aPosX", ATMInfo[a][aPos][0]);
		cache_get_value_name_float(0, "aPosY", ATMInfo[a][aPos][1]);
		cache_get_value_name_float(0, "aPosZ", ATMInfo[a][aPos][2]);
		cache_get_value_name_float(0, "aPosA", ATMInfo[a][aPos][3]);

		ATMObject[a] = CreateDynamicObject(2942, ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2], 0.0, 0.0, ATMInfo[a][aPos][3]);
		SetObjectMaterialText(ATMObject[a], "\nБанкомат", 2, OBJECT_MATERIAL_SIZE_256x256, "Tahoma", 48, 1, 0xFF000000, 0xFFFFFF00, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		ATMIcon[a] = CreateDynamicMapIcon(ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2], 52, 0, 0, 0, -1, 20.0);
		ATMText[a] = CreateDynamic3DTextLabel(" ", cSERVER, ATMInfo[a][aPos][0], ATMInfo[a][aPos][1], ATMInfo[a][aPos][2]+1.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);

        FSCM(playerid, cYELLOW,"Вы установили банкомат №%d", ATMInfo[a][aID]);
	}
	return 1;
}
//

// Радар
publics LoadRadar()
{
	new time = GetTickCount(), string[1024];
 	cache_get_row_count(TOTALRADAR);
	if(!TOTALRADAR) return 1;
	{
		for(new i = 1; i <= TOTALRADAR; i++)
		{
			cache_get_value_name_int(i-1, "r_id", RI[i][r_id]);
			cache_get_value_name(i-1, "r_name", RI[i][r_name], 24);
			cache_get_value_name_int(i-1, "r_type", RI[i][r_type]);
			cache_get_value_name_int(i-1, "r_speed", RI[i][r_speed]);
			cache_get_value_name_float(i-1, "r_x", RI[i][r_x]);
			cache_get_value_name_float(i-1, "r_y", RI[i][r_y]);
			cache_get_value_name_float(i-1, "r_z", RI[i][r_z]);
			cache_get_value_name_float(i-1, "r_a", RI[i][r_a]);
			cache_get_value_name_int(i-1, "r_money", RI[i][r_money]);

			string_f("\
				{FFFFFF}Радар "SERVER"№%d{FFFFFF}\n\n\
				{FFFFFF}Максимальная скорость: "SERVER"%d{FFFFFF} КМ/Ч\n\
				{FFFFFF}Стоимость штрафа: "SERVER"%s рублей",
			RI[i][r_id], RI[i][r_speed], ConvertCash(EI[eiRadarPay]));

			RI[i][r_label] = CreateDynamic3DTextLabel(string, -1, RI[i][r_x], RI[i][r_y], RI[i][r_z]+4.0, 10.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
			RI[i][r_object] = CreateDynamicObject(18880, RI[i][r_x], RI[i][r_y], RI[i][r_z], 0.0, 0.0, RI[i][r_a]);
			RI[i][r_area] = CreateDynamicSphere(RI[i][r_x], RI[i][r_y], RI[i][r_z], 30.0);
		}
		printf("-> Радары загружены: %d, за %i мс", TOTALRADAR, GetTickCount() - time);
	}
	return 1;
}
//

publics LoadMusorki()
{
	new time = GetTickCount();
 	cache_get_row_count(TOTALMUSORKI);
	if(!TOTALMUSORKI) return 1;
	{
		for(new i = 1; i <= TOTALMUSORKI; i++)
		{
			cache_get_value_name_int(i-1, "mID", MI[i][mID]);
			cache_get_value_name_float(i-1, "mPosX", MI[i][mPos][0]);
			cache_get_value_name_float(i-1, "mPosY", MI[i][mPos][1]);
			cache_get_value_name_float(i-1, "mPosZ", MI[i][mPos][2]);
			cache_get_value_name_float(i-1, "mPosA", MI[i][mPos][3]);
			cache_get_value_name_int(i-1, "mType", MI[i][mType]);
			cache_get_value_name_int(i-1, "mStatus", MI[i][mStatus]);

			MI[i][mObject] = CreateDynamicObject(1345, MI[i][mPos][0], MI[i][mPos][1], MI[i][mPos][2], 0.0, 0.0, MI[i][mPos][3], 0, 0, 0, 300.0, 300.0);

			new stringMusorka[80];
			format(stringMusorka, sizeof(stringMusorka), "Мусорный бак: "SERVER"№ %i\n\n"GREY"Нажмите: [ ALT ]", MI[i][mID]);
			MI[i][mInfo] = Create3DTextLabel(stringMusorka, cWHITE, MI[i][mPos][0], MI[i][mPos][1], MI[i][mPos][2]+2, 5.0, 0, 1);
		}
		printf("-> Мусорки загружены: %d, за %i мс", TOTALMUSORKI, GetTickCount() - time);
	}
	return 1;
}
//

// ============================== [ Команды для игроков ] =================== //

CMD:menu(playerid) return DialogPlayerMenu(playerid);
CMD:mn(playerid) return callcmd::menu(playerid);
CMD:mm(playerid) return callcmd::menu(playerid);

CMD:showpass(playerid, params[])
{
	new str[250], string[150], stringer[512];
	if(!PI[playerid][Pasport]) return SEM(playerid, "У Вас нет паспорта, получить его можно в Паспортном столе! ''"SERVER"/gps > Общественные места > Паспортный стол{FFFFFF}''");
	{
	    extract params -> new player:to_playerid; else return SEM(playerid, "Используйте: /showpass [ ID игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(!ProxDetectorS(3, playerid, to_playerid))return SEM(playerid, "Вы далеко друг от друга!");
		{
			stringer[0] = EOS;
			strcat(stringer, ""BLUE"Выдан: УМВД РОССИИ ПО НИЖЕГОРОДСКОЙ ОБЛ. г. Южный{FFFFFF}\n\n");
			format(str, sizeof(str), "{FFFFFF}Имя_Фамилия: \t\t\t"SERVER"%s\n", PsI[playerid][pasName]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Серия: \t\t\t\t\t"SERVER"%d\n", PsI[playerid][pasSeria]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Номер: \t\t\t\t"SERVER"%d\n\n", PsI[playerid][pasNumber]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Пол: \t\t\t\t\t"SERVER"%s\n", (PsI[playerid][pasSex]==1)?("Муж."):("Жен.")); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Дата рождения: \t\t\t"SERVER"%s\n", PsI[playerid][pasDataRojdenia]); strcat(stringer, str);
			// format(str, sizeof(str), "{FFFFFF}Возраст: \t\t"SERVER"%d лет, год(-а)\n", PI[playerid][Age]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Дата выдачи: \t\t\t\t"SERVER"%s\n", PsI[playerid][pasData]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Место рождения: \t\t\t"SERVER"г.%s\n", PsI[playerid][pasGorod]); strcat(stringer, str);
		    SPD(to_playerid, dNull, d_info, ""SERVER"Паспорт РФ", stringer, "Закрыть", "");
		    string_f("показал(-а) свой паспорт игроку %s", GetName(to_playerid));
			MeAction(playerid, string);
			DoAction(playerid, "Паспорт показан в открытом виде.");
			FSCM(playerid, cGREEN, "[ Информация ]{FFFFFF} Вы показали паспорт игроку "SERVER"%s [ID: %d]", GetName(to_playerid), to_playerid);
		}
	}
	return 1;
}

CMD:showlic(playerid, params[])
{
	extract params -> new to_playerid; else return SEM(playerid, "Введите: /showlic [ ID игрока ]");
	if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
	if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
	if(!ProxDetectorS(3, playerid, to_playerid))return SEM(playerid, "Вы далеко друг от друга!");
	{
		new stringer[512], str[128];
		format(str, sizeof(str), "{FFFFFF}Лицензии игрока "SERVER"%s{FFFFFF}\n\n", GetName(playerid)); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'A'\t\t\t%s\n", (!PI[playerid][Lic][0])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'B'\t\t\t%s\n", (!PI[playerid][Lic][1])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'C'\t\t\t%s\n", (!PI[playerid][Lic][2])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'D'\t\t\t%s\n", (!PI[playerid][Lic][3])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		strcat(stringer, "{FFFFFF}_______________________________\n\n");
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'Водный'\t\t%s\n", (!PI[playerid][Lic][4])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'Воздушный'\t%s\n", (!PI[playerid][Lic][5])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'Оружие'\t\t%s\n", (!PI[playerid][Lic][6])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		format(str, sizeof(str), "{FFFFFF}Категория "SERVER"'Бизнес'\t\t%s", (!PI[playerid][Lic][7])?(""WAR"Нет"):("{63BD4E}Есть")); strcat(stringer, str);
		SPD(to_playerid, dNull, d_info, ""SERVER"Лицензии", stringer, "Закрыть", "");
		new string[48];
		string_f("показал(-а) свои лицензии игроку %s", GetName(to_playerid)); MeAction(playerid, string);
		DoAction(playerid, "Лицензии показаны в открытом виде.");
	}
	return 1;
}

CMD:showmc(playerid, params[])
{
	if(PI[playerid][MedCard]) return SEM(playerid, "У Вас нет Мед карты!");
	{
		extract params -> new to_playerid; else return SEM(playerid, "Введите: /showmc [ ID игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(!ProxDetectorS(3, playerid, to_playerid))return SEM(playerid, "Вы далеко друг от друга!");
		{
			new stringer[512], str[124];
			strcat(stringer, ""BLUE"Выдана: МИНЗДРАВ РОССИИ ПО НИЖЕГОРОДСКОЙ ОБЛ. г. Южный{FFFFFF}\n\n");
			format(str, sizeof(str), "{FFFFFF}Имя_Фамилия: \t\t"SERVER"%s\n", MC[playerid][mcName]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Дата получения: \t\t"SERVER"%s\n", MC[playerid][mcData]); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Состояние: \t\t"SERVER"%s\n\n", (!MC[playerid][mcStatus])?("Неизвестно"):(MC[playerid][mcStatus] == 1)?("Здоров(-а)"):("Не здоров(-а)")); strcat(stringer, str);
			format(str, sizeof(str), "{FFFFFF}Дата окончания: \t\t"SERVER"%s", MC[playerid][mcDataClose]); strcat(stringer, str);
			SPD(to_playerid, dNull, d_info, ""SERVER"Медецынская карта", stringer, "Закрыть", "");

			FSCM(playerid, cGREEN, "[ Информация ]{FFFFFF} Вы показали свою Мед Карту игроку "SERVER"%s [ID: %d]", GetName(to_playerid), to_playerid);
			new string[124];
			string_f("показал(-а) свою Мед Карту игроку %s", GetName(to_playerid));
			MeAction(playerid, string);
			DoAction(playerid, "Мед Карта показана в открытом виде.");
		}
	}
	return 1;
}

CMD:showskillgun(playerid, params[])
{
	extract params -> new to_playerid; else return SEM(playerid, "Введите: /showskillgun [ ID игрока ]");
	if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
	if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
	{
		new string[512], str[124];
		format(str, sizeof(str), "СВД: \t\t\t%d%% | 100%%\n", PI[playerid][SkillGun][0]/100); strcat(string, str);
		format(str, sizeof(str), "Пустынный орёл: \t%d%% | 100%%\n", PI[playerid][SkillGun][1]/100); strcat(string, str);
		format(str, sizeof(str), "Драбовик: \t\t%d%% | 100%%\n", PI[playerid][SkillGun][2]/100); strcat(string, str);
		format(str, sizeof(str), "Пистолет ТТ: \t\t%d%% | 100%%\n", PI[playerid][SkillGun][3]/100); strcat(string, str);
		format(str, sizeof(str), "MP5: \t\t\t%d%% | 100%%\n", PI[playerid][SkillGun][4]/100); strcat(string, str);
		format(str, sizeof(str), "Винтовка M4A1: \t%d%% | 100%%\n", PI[playerid][SkillGun][5]/100); strcat(string, str);
		format(str, sizeof(str), "Автомат AK-47: \t\t%d%% | 100%%\n", PI[playerid][SkillGun][6]/100); strcat(string, str);
		SPD(to_playerid, dNull, d_info, ""SERVER"Навоки владения оружием", string, "Закрыть", "");
	}
	return 1;
}
CMD:ssg(playerid, params[]) return callcmd::showskillgun(playerid, params);

CMD:showjob(playerid, params[])
{
    extract params -> new player:to_player; else return SEM(playerid, "Введите: /showjob [ ID Игрока ]");
	if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
	if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
	{
		new stringer[1024], str[128];
		format(str, sizeof(str), ""SERVER"- Водитель автобуса{FFFFFF} - Выполнено рейсов: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][0], JS[playerid][jLevel][0]*10, JS[playerid][jLevel][0]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Таксист{FFFFFF} - Выполнено заказов: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][1], JS[playerid][jLevel][1]*20, JS[playerid][jLevel][1]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Механик{FFFFFF} - Выполнено починок: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][2], JS[playerid][jLevel][2]*30, JS[playerid][jLevel][2]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Мусорщик{FFFFFF} - Собрано мусора: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][3], JS[playerid][jLevel][3]*40, JS[playerid][jLevel][3]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Электрик{FFFFFF} - Выполнено заявок: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][4], JS[playerid][jLevel][4]*50, JS[playerid][jLevel][4]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Пилот{FFFFFF} - Выполнено рейсов: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][5], JS[playerid][jLevel][5]*60, JS[playerid][jLevel][5]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Дальнобойщик{FFFFFF} - Выполнено перевозок: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][6], JS[playerid][jLevel][6]*60, JS[playerid][jLevel][6]), strcat(stringer, str);
		format(str, sizeof(str), ""SERVER"- Инкасатор{FFFFFF} - Обслуженно банкоматов: ("SERVER"%d{FFFFFF} | "SERVER"%d{FFFFFF}) - "SERVER"%d уровень\n",
			JS[playerid][jExp][7], JS[playerid][jLevel][7]*60, JS[playerid][jLevel][7]), strcat(stringer, str);
		SPD(to_player, dNull, d_info, ""SERVER"Навоки работ", stringer, "Закрыть", "");
	}
	return 1;
}

CMD:rep(playerid, params[])
{
    extract params -> new to_player, string:text[90]; else return SEM(playerid, "Введите: /rep(ort) [ ID нарушителя ] [ Текст нарушения ]");
	if(to_player == playerid) return SEM(playerid, "Введите: /rep(ort) [ ID нарушителя ] [ Текст нарушения ]");
	if(strlen(text) > 32) return SEM(playerid, "Слишком большой текст!");
	if(GetPVarInt(playerid,"AntiFloodRep2") > gettime() && !PI[playerid][Vip]) return SEM(playerid, "Отправить вопрос раз в 90 секунд");
	else if(GetPVarInt(playerid,"AntiFloodRep2") > gettime() && PI[playerid][Vip]) return SEM(playerid, "Отправить вопрос раз в 45 секунд");
	{
		SCMInfo(playerid, "Вы успешно подали жалобу, ожидайте ответа!");
		if(PI[playerid][Vip]) SetPVarInt(playerid, "AntiFloodRep2", gettime() + 45);
		else SetPVarInt(playerid, "AntiFloodRep2", gettime() + 90);

	    new string[256];
		string_f("[A] Жалоба от %s [%d]:{E5BF26} ID: %d - %s", GetName(playerid), playerid, to_player, text);
		SCMAdmin(cGREEN, string);

		foreach(new i: Player) { if(GetAdmin(i)) GameTextForPlayer(playerid,"~g~Report ++",3000,1); }
	}
	return 1;
}
CMD:report(playerid, params[]) return callcmd::rep(playerid, params);

CMD:gps(playerid)
{
	if(GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0) return SEM(playerid, "Спутник не может найти Ваше местоположение!");
    if(UseGPS[playerid])
	{
		DisablePlayerRaceCheckpoint(playerid);
		UseGPS[playerid] = false;
		for(new i; i < 24; i++) TextDrawHideForPlayer(playerid, GPS[i]);
		for(new i; i < 3; i++) PlayerTextDrawHide(playerid, GPS1[playerid][i]);
		PlayerTextDrawHide(playerid, GPS1[playerid][2]);
		PlayerTextDrawDestroy(playerid, GPS1[playerid][2]);
		GPS1[playerid][2] = PlayerText:INVALID_TEXT_DRAW;
		KillTimer(markTimer[playerid]);
	}
	SPD(playerid, dGPS, d_list, ""SERVER"GPS-Навигатор", "\
	"SERVER"1. {FFFFFF} Общественные места\n\
	"SERVER"2. {FFFFFF} Подработки\n\
	"SERVER"3. {FFFFFF} Организации\n",
	"Выбрать", "Закрыть");
	return 1;
}

CMD:togphone(playerid, params[])
{
    if(!PI[playerid][Phone]) return SEM(playerid, "У вас нет мобильного телефона!");
	{
		if(pCuff[playerid][pCuffee] == playerid) return SEM(playerid, "Вы в наручниках!");
		if(StatusPhone[playerid])
		{
			StatusPhone[playerid] = false;
			SCM(playerid, cRED, "Вы выключили телефон");
			SetPlayerChatBubble(playerid, (PI[playerid][Sex]==1)?("выключил телефон"):("выключила телефон"), cPURPLE, 13.0, 10000);
		}
		else
		{
			StatusPhone[playerid] = true;
			SCM(playerid, cGREEN, "Вы включили телефон");
			SetPlayerChatBubble(playerid, (PI[playerid][Sex]==1)?("включил телефон"):("включила телефон"), cPURPLE, 13.0, 10000);
		}
	}
    return 1;
}

CMD:tickets(playerid)
{
	if(!PI[playerid][ShtrafPPS] && !PI[playerid][ShtrafDPS]) return SEM(playerid, "У Вас нет неоплаченных штрафов!");
	{
		new str[512], stringer[254];
		stringer[0] = EOS;
		strcat(stringer, ""SERVER"Категория штрафов\t"SERVER"Колличество\n");
		format(str,sizeof(str),""SERVER"1. {FFFFFF}Штрафы от ППС\t"SERVER"%d шт.\n", PI[playerid][ShtrafPPS]); strcat(stringer, str);
		format(str,sizeof(str),""SERVER"2. {FFFFFF}Штрафы от ДПС\t"SERVER"%d шт.\n", PI[playerid][ShtrafDPS]); strcat(stringer, str);
		SPD(playerid, dShtrafInfo, d_tlisth, ""SERVER"Мои штрафы", stringer, "Выбрать", "Закрыть");
	}
	return 1;
}

// Система мероприятий
CMD:gotomp(playerid)
{
	if(!MP[mpTP]) return 1;
	{
		if(!MP[mpStatsus]) return SEM(playerid, "Мероприятие сейчас не проводится!");
		if(MP[mpStatsus] && PI[playerid][Jail]) return SEM(playerid, "В данный момнен Вы не можете участвовать в мероприятиях!");
		{
		    new Float: x, Float: y, Float: z, Float: fa;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, fa);
		    MpInt[playerid] = GetPlayerInterior(playerid);
		    MpWorld[playerid] = GetPlayerVirtualWorld(playerid);
			MpCords[playerid][0] = x; MpCords[playerid][1] = y;
			MpCords[playerid][2] = z; MpCords[playerid][3] = fa;

			SetPlayerPos(playerid, MP[mpCord][0], MP[mpCord][1], MP[mpCord][2]);
			SetPlayerFacingAngle(playerid, MP[mpCord][3]);
			SetPlayerInterior(playerid, MP[mpInt]);
			SetPlayerVirtualWorld(playerid, MP[mpWorld]);
			SetCameraBehindPlayer(playerid);

			if(!MP[mpPlayerStatsus][playerid])
			{
				MP[mpPlayerStatsus][playerid]=true;
				MP[mpOnline] ++;
			}
			if(MP[mpComands] == 1) MP[mpComands][playerid] = 1;
			else MP[mpComands][playerid] = random(2);

			SCMInfo(playerid, "Вы телепортировались на мероприятие. Если хотите покинуть его! Введите: "SERVER"/endmp");
		}
	}
	return 1;
}

CMD:endmp(playerid)
{
	if(!MP[mpStatsus]) return SEM(playerid, "Мероприятие сейчас не проводится!");
	if(!MP[mpPlayerStatsus]) return SEM(playerid, "Вы не находитесь на мероприятии!");
	{
	    if(MpCords[playerid][0] != 0.0 && MpCords[playerid][1] != 0.0 && MpCords[playerid][2] != 0.0)
	    {
	    	SetPlayerPos(playerid, MpCords[playerid][0], MpCords[playerid][1], MpCords[playerid][2]);
	    	SetPlayerFacingAngle(playerid, MpCords[playerid][3]);
			SetPlayerInterior(playerid, MpInt[playerid]);
			SetPlayerVirtualWorld(playerid, MpWorld[playerid]);
			SetCameraBehindPlayer(playerid);
		}
		if(MP[mpPlayerStatsus][playerid]) MP[mpPlayerStatsus][playerid]=false;
		MP[mpOnline] --;

		SCMInfo(playerid, "Вы успешно покинули мероприятие.");
	}
	return 1;
}

CMD:donat(playerid) return DialogDonatInfo(playerid);

CMD:mytk(playerid)
{
	new frac[50];
	if(!GetFrac(playerid)) frac = "Отсутствует";
	else format(frac, 50, "%s", FracI[GetFrac(playerid)][fName]);

    new string[1024];
	string_f("{FFFFFF}\
		Трудовая книжка\n\n\
		Имя и Фамилия: "SERVER"%s{FFFFFF}\n\
		Организация: "SERVER"%s{FFFFFF}\n\
		Работа / Должность: "SERVER"%s",
	GetName(playerid), frac, (!GetFrac(playerid))?Job_Name[PI[playerid][Job]]:GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1]);
	SPD(playerid, dMyTK, d_info, ""SERVER"Информация", string, "История", "Закрыть");
	return 1;
}

CMD:myhistory(playerid)
{
    // Загрузка история наказаний
	new stringLH[120];
	format(stringLH, sizeof(stringLH), "SELECT * FROM "T_HISTORY" WHERE `lhName` = '%s'", GetName(playerid));
    mysql_tquery(mysql, stringLH, "LoadHistory", "i", playerid);
	return 1;
}
CMD:mh(playerid) return callcmd::myhistory(playerid);

CMD:stats(playerid, params[]) return DialogPlayerStats(playerid, playerid);

CMD:time(playerid)
{
	for(new i; i < 8; i++) PlayerTextDrawShow(playerid, GameTime_PTD[playerid][i]);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		TimeInfo[playerid] = 8;
		if(!JobMine[playerid] || !JobLesorub[playerid] || !DI[playerid][DeathStatus])
		{
			ClearAnimations(playerid, true);
			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		}
		MeAction(playerid, "просматривает время на руке");
		// FSCM(playerid, -1, "%s", GetNameDay());
	}
	return 1;
}
CMD:t(playerid) return callcmd::time(playerid);

CMD:healme(playerid, params[])
{
    // Проверки
	new Float:shealth = PI[playerid][Health];
	GetPlayerHealth(playerid, shealth);
	if(shealth >= 100) return SEM(playerid, "Вы не нуждаетесь в лечении!");
	if(shealth <= 50) SetPlayerHealth(playerid, shealth+50);
	else SetPlayerHealth(playerid, 100);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid,"PED","gum_eat",4.0,0,0,0,0,0,1);
		SetPlayerAttachedObject(playerid, 8, 2709, 5,  0.186999, 0.037000, 0.022999,  -102.499969, -179.900024, -91.400024,  1.000000, 1.000000, 1.000000);
	}
	SetPlayerChatBubble(playerid,"использует аптечку", cPURPLE, 30.0, 1000);
    GameTextForPlayer(playerid, "~b~+50 HP", 100, 1);
	return 1;
}

CMD:id(playerid, params[])
{
	new ids[11];
	if(sscanf(params, "u", ids)) return SEM(playerid, "Используйте: /id [ ID или Часть Имени игрока ]");
    // if(strlen(params) < 3) return SEM(playerid, "Укажите как минимум 3 символа для поиска!");
	if(strlen(params) < 3) if((params[0] >= 'а' && params[0] <= 'я') || (params[0] >= 'А' && params[0] <= 'Я')) return SEM(playerid, "Имя игрока должно быть на латинице (EN)!");
	{
		new i, insert_pos, string[128];
		while (ids[i] != INVALID_PLAYER_ID)
		{
			// if(GetAdmin(ids[i])) break;

			GetPlayerName(ids[i], string, sizeof(string));

			insert_pos = strfind(string, params, true);
			if (insert_pos != -1)
			{
				strins(string, "{FFFFFF}", strlen(params) + insert_pos);
				strins(string, ""SERVER"", insert_pos);
			}

			string_f("[%d] %s | Уровень: %d", ids[i], string, PI[ids[i]][Level]);
			SendClientMessage(playerid, -1, string);

			++i;
			break;
		}
		if(i == 0) return SEM(playerid, "Игроков с подходящим Иминем нет!");
	}
	return 1;
}

CMD:int(playerid) { FSCM(playerid, cWHITE, "Вы находитесь в [ Интерьере ] "SERVER"№: %d", GetPlayerInterior(playerid)); return 1; }
CMD:world(playerid) { FSCM(playerid, cWHITE, "Вы находитесь в [ Виртуальном мире ] "SERVER"№: %d", GetPlayerVirtualWorld(playerid)); return 1; }

CMD:admins(playerid)
{
	if(!GetAdmin(playerid) && !PI[playerid][Vip]) return SEM(playerid, "Вы не VIP игрок.");
	{
		SCM(playerid, cGREEN, "Администраторы в сети:");
		foreach(new i : Player)
		{
			new string[512], sAFK[32];
			if(!PlayerLogin[i] || !GetAdmin(playerid) /* || GetAdmin(i) >= 7*/) continue;

			if(PlayerAFK[i]>=1) format(sAFK, 32, "- {FF0000}AFK: %s", ConvertTime(PlayerAFK[i]));
			else sAFK = " ";

			string_f("%s #%d{FFFFFF} - Репутация: %i\n", Admin_Name[GetAdmin(i)-1], AI[i][aNumber], AI[i][aReputacion], sAFK);
			SCM(playerid, cWHITE, string);
		}
	}
	return 1;
}

CMD:pay(playerid, params[])
{
	new string[200], fmt_text[50];
	if(PI[playerid][Level]<2) return SEM(playerid, "Передача денег возможна только со 2 уровня!");
	{
		extract params -> new to_playerid, cash; else return SEM(playerid, "Используйте: /pay [ ID Игрока ] [ Кол-во денег ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(to_playerid == playerid) return SEM(playerid, "Вы не можете передать деньги себе!");
		if(cash < 1 || GetMoney(playerid) < cash) return SEM(playerid, "У Вас нет столько денег!");
		if(!ProxDetectorS(3, playerid, to_playerid))return SEM(playerid, "Вы далеко друг от друга!");
		if(!GetAdmin(playerid) && !PI[playerid][Vip] && cash > 10000) return SEM(playerid, "Передовать за раз можно только до 10 000 рублей");
		if(!GetAdmin(playerid) && PI[playerid][Vip] && cash > 50000) return SEM(playerid, "Передовать за раз можно только до 50 000 рублей");
		if(GetAdmin(playerid) && cash > 5000000) return SEM(playerid, "Передовать за раз можно только 5 000 000 рублей");
		{
			string_f("достал%s деньги и передал%s их %s", (PI[playerid][Sex]==1)?(""):("а"), (PI[playerid][Sex]==1)?(""):("а"), GetName(to_playerid));
			MeAction(playerid, string);

			FSCM(playerid, cBLUE, "Вы передали игроку %s [%d] %s рублей", GetName(to_playerid), to_playerid, ConvertCash(cash));
			FSCM(to_playerid, cBLUE, "Игрок %s [%d] передал Вам %s рублей", GetName(playerid), playerid, ConvertCash(cash));

			format(fmt_text, sizeof fmt_text, "-%d", cash);
			SetPlayerChatBubble(playerid, fmt_text, 0xFF6600FF, 10.0, 5000);
			GiveMoney(playerid, -cash);

			format(fmt_text, sizeof fmt_text, "+%d", cash);
			SetPlayerChatBubble(to_playerid, fmt_text, 0x00CC00FF, 10.0, 5000);
			GiveMoney(to_playerid, cash);

			ApplyAnimation(playerid, "INT_SHOP", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
		}
	}
	return 1;
}

CMD:do(playerid, params[])
{
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);
    extract params -> new string:text[90]; else return SEM(playerid, "Используйте: /do [действие]");
	if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
    DoAction(playerid, text);
	return 1;
}
CMD:me(playerid, params[])
{
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);
    extract params -> new string:text[90]; else return SEM(playerid, "Используйте: /me [действие]");
	if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
    MeAction(playerid, text);
	return 1;
}

CMD:try(playerid, params[])
{
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);
    extract params -> new string:text[90]; else return SEM(playerid, "Используйте: /try [действие]");
	if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
    TryAction(playerid, text);
	return 1;
}

CMD:s(playerid, params[])
{
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);

	new string[144];
	extract params -> new string:text[90]; else return SEM(playerid, "Используйте /s [текст]");
	if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
	{
		string_f( "%s крикнул: %s", GetName(playerid), params[0]);
		ProxDetectorText(30.0, playerid, string, cWHITE, cWHITE, cWHITE, cWHITE, cWHITE);
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1,0,0,0,0,0);
		SetPlayerChatBubble(playerid, text, cWHITE, 25, 7500);
	}
 	return 1;
}

CMD:w(playerid, params[])
{
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);
	extract params -> new string:text[90]; else return SEM(playerid, "Введите: /w [текст]");
	if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
	new string[128];
	string_f("%s шепчет: %s", GetName(playerid), text);
	SendStreamMessage(1.2, playerid, string, 0xBDB76BFF);
	SetPlayerChatBubble(playerid,text,cWHITE,1.2,10000);
	return 1;
}

CMD:b(playerid, params[])
{
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);
	extract params -> new string:text[90]; else return SEM(playerid, "Используйте: /b [ NonRP текст ]");
	if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
	{
		new string[128], strings[128];
		string_f("(( %s [%d]: %s ))", GetName(playerid), playerid, params);
		format(strings, sizeof(strings), "(( %s ))", params);
		ProxDetectorText(20.0, playerid, string, cWHITE, cWHITE, cWHITE, cWHITE, cWHITE);
		SetPlayerChatBubble(playerid, strings, cWHITE, 20.0, 7000);
	}
	return 1;
}
CMD:n(playerid, params[]) return callcmd::b(playerid, params);

CMD:v(playerid,params[])
{
	new string[128];
	if(!PI[playerid][Vip]) return SEM(playerid, CMDOff);
    if(PI[playerid][Mute]) return SCMMute(playerid, 1);
	//if(!PI[playerid][Settings][4]) return SEM(playerid, "Ваш VIP чат отключён!");
	{
		extract params -> new string:text[90]; else return SEM(playerid, "Введите: /v [ Текст ]");
		if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
		{
			string_f("[V] %s: %s", GetName(playerid), text);
			SCMVip(cSERVER, string);
		}
	}
	return 1;
}

CMD:vb(playerid,params[])
{
	new string[128];
	if(!PI[playerid][Vip]) return SEM(playerid, CMDOff);
   	if(PI[playerid][Mute]) return SCMMute(playerid, 1);
	// if(!PI[playerid][Settings][4]) return SEM(playerid, "Ваш VIP чат отключён!");
	{
		extract params -> new string:text[90]; else return SEM(playerid, "Введите: /vb [ Текст ]");
		if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
		{
			string_f("(( [V] %s [%d]: %s ))", GetName(playerid), playerid, params[0]);
			SCMVip(cSERVER, string);
		}
	}
	return 1;
}

CMD:jobleave(playerid)
{
    if(!PI[playerid][Vip]) return SEM(playerid, "Вы не VIP игрок!");
	if(!PI[playerid][Job]) return SEM(playerid, "Вы ни где не работаете!");
	{
	    FSCM(playerid, cRED, "Вы успешно уволились с работы '%s'", Job_Name[PI[playerid][Job]]);
	    PI[playerid][Job] = 0;
		update_int_mysql(T_PLAYER, "Job", PI[playerid][Job], "ID", PI[playerid][ID]);
 	}
	return 1;
}
CMD:jleave(playerid) return callcmd::jobleave(playerid);

CMD:unrend(playerid, params[])
{
    if(PlayerRent[playerid] == -1) return SEM(playerid, "Вы не арендуете транспорт!");
    {
		new string[250], carid = PlayerRent[playerid];
		string_f("{FFFFFF}\
			Вы желаете завершить аренду транспорта - "SERVER"%s (%d){FFFFFF}\n\
			Для подтверждения нажмите кнопку "SERVER"\"Завершить\"{FFFFFF} или "GREY"\"Отмена\"{FFFFFF} если передумали.",
			VehStats[VehicleInfo[carid][vModel]-400], carid);
		SPD(playerid, dArendaCarOff, d_info, ""SERVER"Завершить аренду транспорта", string, "Завершить", "Отмена");
	}
	return 1;
}

CMD:leaders(playerid)
{
	new phones[40], str[512], string[1024];
	foreach(new i: Player)
	{
		if(!PI[i][SimCard]) phones = "Нет номера";
		else format(phones, 40, "%i", PI[i][SimCard]);

		if(!PlayerLogin[i] /*|| GetAdmin(i)*/) continue;

	    if(!PI[i][FracLeader] && PI[i][FracRang] < 9)
	    {
			SPD(playerid, dNull, d_info, ""SERVER"Лидеры и замы онлайн", "{FFFFFF}Список лидеров и заместителей пуст!", "Закрыть", "");
			continue;
		}
		if(PI[i][FracLeader] || GetFrac(i) && PI[i][FracRang] == 9)
		{
			if(PlayerAFK[i] > 1)
			{
				strcat(string, ""SERVER"Должность [ Организация ]\tИмя\tТелефон\t{FF0000}На паузе\n");
				format(str, sizeof(str), "{FFFFFF}%s "SERVER"[ %s ]{FFFFFF}\t%s\t%s\t%s\n",
				GetRangName[GetFrac(i)][PI[i][FracRang]-1], FracI[GetFrac(i)][fName], GetName(i), phones, ConvertTime(PlayerAFK[i]));
				strcat(string, str);
			}
			else
			{
				strcat(string, ""SERVER"Должность [ Организация ]\tИмя\tТелефон\n");
				format(str, sizeof(str), "{FFFFFF}%s "SERVER"[ %s ]{FFFFFF}\t%s\t%s\n",
				GetRangName[GetFrac(i)][PI[i][FracRang]-1], FracI[GetFrac(i)][fName], GetName(i), phones);
				strcat(string, str);
			}
			SPD(playerid, dNull, d_tlisth, ""SERVER"Лидеры и замы онлайн", string, "Закрыть", "");
  		}
	}
	return 1;
}

CMD:engine(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	{
		if(IsAVelik(vehicleid)) return 1;
		if(!IsPlayerInVehicle(playerid, vehicleid)) return 1;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		{
			new Float: health;
			GetVehicleHealth(vehicleid, health);

			if(health <= 250) return SEM(playerid, "Транспорт поломан, вызовите механика!");
			{
				if(!GetEngine(vehicleid)) SetEngine(vehicleid, true);
				else SetEngine(vehicleid, false);
			}
		}
	}
	return 1;
}
CMD:en(playerid) return callcmd::engine(playerid);

CMD:fare(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return 1;

    new carid = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(carid);

    if(IsAVelik(model) && IsAPlane(model)) return 1;

    if(!GetLights(carid)) SetLights(carid, true);
    else SetLights(carid, false);
    PlayerPlaySound(playerid, 4604, 0.0, 0.0, 0.0);
	return 1;
}

CMD:open(playerid) // Шлакбаумы и ворота (двери)
{
	if(!PlayerLogin[playerid]) return SEM(playerid, CMDOff);
	{
		new string[124];
		if(GetPVarInt(playerid, "Off_Flood") > gettime()) return 1;
		{
			// ============== [ Шлакбаумы ] ==============
			if(!GetAdmin(playerid)) return 1;
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, 2352.4412, -1434.6554, 80.4771)) //
				{
					if(!StatusShlakAdminZone)
					{
						StatusShlakAdminZone = true;
						MoveObject(ShlakAdminZone, 2352.4412, -1434.6554, 80.4771-0.005, 0.007, 0.0, -0.0, 90.0);
						SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusShlakAdminZone = false;
						MoveObject(ShlakAdminZone, 2352.4412, -1434.6554, 80.4771+0.005, 0.007, 0.0, -90.0, 90.0);
						SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
					}
				}
			}
			// Для ДПС
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2754.6743, -1381.1575, 23.3802)) //
			{
				if(GetFrac(playerid) == FRAC_DPS && PI[playerid][FracRang] <= 4 && GetAdmin(playerid) <= 4) return 1;
				{
					if(!MostShlakMove[0])
					{
						MostShlakMove[0] = true;
						MeAction(playerid, "закрывает шлакбаум №1");
						MoveObject(Shlak[0], 2754.6743, -1381.1575, 23.3802-0.005, 0.007, 0.0, -0.0, 0.0);
						string_f("[R] %s %s: "BLUE"Закрывает {FFFFFF}шлакбаум "SERVER"№1{FFFFFF} на мосту г. Южный!", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
						SCMFrac(GetFrac(playerid), cGREEN, string);
						DoAction(playerid, "Шлакбаум №1 закрыт");
					}
					else
					{
						MostShlakMove[0] = false;
						MeAction(playerid, "открывает шлакбаум №1");
						MoveObject(Shlak[0], 2754.6743, -1381.1575, 23.3802+0.005, 0.007, 0.0, -90.0, 0.0);
						string_f("[R] %s %s: "RED"Открывает {FFFFFF}шлакбаум "SERVER"№1{FFFFFF} на мосту г. Южный!", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
						SCMFrac(GetFrac(playerid), cGREEN, string);
						DoAction(playerid, "Шлакбаум №1 открыт");
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2740.0195, -1023.6168, 23.4042)) //
			{
				if(GetFrac(playerid) == FRAC_DPS && PI[playerid][FracRang] <= 4 && GetAdmin(playerid) <= 4) return 1;
				{
					if(!MostShlakMove[1])
					{
						MostShlakMove[1] = true;
						MeAction(playerid, "закрывает шлакбаум №2");
						MoveObject(Shlak[1], 2740.0195, -1023.6168, 23.4042-0.005, 0.007, 0.0, 0.0, 0.0);
						string_f("[R] %s %s: "BLUE"Открывает {FFFFFF}шлакбаум "SERVER"№2{FFFFFF} на мосту г. Южный!", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
						SCMFrac(GetFrac(playerid), cGREEN, string);
						DoAction(playerid, "Шлакбаум №2 закрыт");
					}
					else
					{
						MostShlakMove[1] = false;
						MoveObject(Shlak[1], 2740.0195, -1023.6168, 23.4042+0.005, 0.007, 0.0, 90.0, 0.0);
						string_f("[R] %s %s: "RED"Закрывает {FFFFFF}шлакбаум "SERVER"№2{FFFFFF} на мосту г. Южный!", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
						SCMFrac(GetFrac(playerid), cGREEN, string);
						DoAction(playerid, "Шлакбаум №2 закрыт");
					}
				}
			}
			//
			// Банк Батырево
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1850.7980, 2034.5994, 15.7245)) //
			{
				if(PI[playerid][Job] != JOB_INCASATOR || !JobDuty[playerid][JOB_INCASATOR] && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusShlakBank_B)
					{
						StatusShlakBank_B = true;
						MoveObject(ShlakBank_B, 1850.7980, 2034.5994, 15.7245-0.005, 0.007, 0.0, 0.0, 0.0);
						SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusShlakBank_B = false;
						MoveObject(ShlakBank_B, 1850.7980, 2034.5994, 15.7245+0.005, 0.007, 0.0, 90.0, 0.0);
						SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
					}
				}
			}
			// Работа шахтера
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1744.4830, 2274.2385, 15.6521)) //
			{
				if(!JobMineDrive[playerid] && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusShlakScahta)
					{
						StatusShlakScahta = true;
						MoveObject(ShlakScahta, 1744.4830, 2274.2385, 15.6521-0.005, 0.007, 0.0, 0.0, 90.0);
						SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusShlakScahta = false;
						MoveObject(ShlakScahta, 1744.4830, 2274.2385, 15.6521+0.005, 0.007, 0.0, 90.0, 90.0);
						SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
					}
				}
			}
			//
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 193.0664, 1463.8977, 11.7851)) // шлакбаум Автошколы Арзамас
			{
				if(!StatusShlakAS)
				{
					StatusShlakAS = true;
					MoveObject(ShlakAS, 193.0664, 1463.8977, 11.7851-0.005, 0.007, 0.0, -0.0, -102.0000);
					SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
				}
				else
				{
					StatusShlakAS = false;
					MoveObject(ShlakAS, 193.0664, 1463.8977, 11.7851+0.005, 0.007, 0.0, -90.0, -102.0000);
					SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
				}
			}
			// Работа Лесоповал

			//
			// Работа - Механик
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2410.7341, -740.6060, 12.1157)) // Работа - Механик
			{
				if(!StatusShlakMechanic)
				{
					StatusShlakMechanic = true;
					MoveDynamicObject(ShlakMechanic, 2410.7341, -740.6060, 12.1157-0.005, 0.007, 0.0, -0.0, 180.0000);
					SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
				}
				else
				{
					StatusShlakMechanic = false;
					MoveDynamicObject(ShlakMechanic, 2410.7341, -740.6060, 12.1157+0.005, 0.007, 0.0, -90.0, 180.0000);
					SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
				}
			}
			//
			/* ============================================== [ Организации ] ============================================== */
			// 1 - АО
			// 2 - ППС
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2579.8154, -2438.6951, 21.6222)) //
			{
				if(GetFrac(playerid) != FRAC_PPS && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusShlakPPS)
					{
						StatusShlakPPS = true;
						MoveObject(ShlakPPS, 2579.8154, -2438.6951, 21.6222-0.012, 0.007, 0.0, -0.0, -90.0);
						SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusShlakPPS = false;
						MoveObject(ShlakPPS, 2579.8154, -2438.6951, 21.6222+0.012, 0.007, 0.0, -90.0, -90.0);
						SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
					}
				}
			}
			// 3 - ДПС
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 127.0617, 1254.6843, 11.8142)) //
			{
				if(GetFrac(playerid) != FRAC_DPS && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusShlakDPS)
					{
						StatusShlakDPS = true;
						MoveObject(ShlakDPS, 127.0617, 1254.6843, 11.8142-0.012, 0.007, 0.0, -0.0, 258.500);
						SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusShlakDPS = false;
						MoveObject(ShlakDPS, 127.0617, 1254.6843, 11.8142+0.012, 0.007, 0.0, -90.0, 258.500);
						SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
					}
				}
			}
			// 4 - ФСБ
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1876.8981, 2106.5049, 15.6724)) //
			{
				if(!StatusShlakFSB[0])
				{
					StatusShlakFSB[0] = true;
					MoveObject(ShlakFSB[0], 1876.8981, 2106.5049, 15.6724-0.012, 0.007, 0.0, -0.0, -90.0);
					SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
				}
				else
				{
					StatusShlakFSB[0] = false;
					MoveObject(ShlakFSB[0], 1876.8981, 2106.5049, 15.6724+0.012, 0.007, 0.0, -90.0, -90.0);
					SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1876.4420, 2126.0066, 15.6724)) //
			{
				if(GetFrac(playerid) != FRAC_FSB && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusShlakFSB[1])
					{
						StatusShlakFSB[1] = true;
						MoveObject(ShlakFSB[1], 1876.4420, 2126.0066, 15.6724-0.012, 0.007, 0.0, -0.0, -90.0);
						SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusShlakFSB[1] = false;
						MoveObject(ShlakFSB[1], 1876.4420, 2126.0066, 15.6724+0.012, 0.007, 0.0, -90.0, -90.0);
						SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
					}
				}
			}
			// 5 - ВЧ
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1710.0144, 1676.9567, 15.0787)) //
			{
				// if(GetFrac(playerid) != FRAC_VH && GetAdmin(playerid) <= 4) return 1;
				if(!StatusShlakSkladVH)
				{
					StatusShlakSkladVH = true;
					MoveObject(ShlakSkladVH, 1710.0144, 1676.9567, 15.0787-0.005, 0.007, 0.0, -0.0, 180.0);
					SetPlayerChatBubble(playerid, "открывает шлакбаум", cPURPLE, 13.0, 10000);
				}
				else
				{
					StatusShlakSkladVH = false;
					MoveObject(ShlakSkladVH, 1710.0144, 1676.9567, 15.0787+0.005, 0.007, 0.0, -90.0, 180.0);
					SetPlayerChatBubble(playerid, "закрывает шлакбаум", cPURPLE, 13.0, 10000);
				}
			}
			// 6 - СМП
			// 7 - СМИ
			// 8 - ОПГ-Б
			// 9 - ОПГ-Ю
			// 10 - Ч-Мафия
			// 11 - Р-Мафия
			/* ============================================================================================================= */
			// ===========================================
			// =============== [ Ворота ] ================
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1774.8990, 2243.7041, 15.0242)) // Шахта
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(!StatusGateScahta)
					{
						StatusGateScahta = true;
						MoveObject(GateScahta, 1774.8990, 2243.7041, 15.0242, 1.5);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusGateScahta = false;
						MoveObject(GateScahta, 1766.3990, 2243.7041, 15.0242, 1.5);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
				else
				{
					if(!StatusGateAdminHouse)
					{
						StatusGateAdminHouse = true;
						MoveObject(GateAdminHouse, 2455.5928, -1449.5453, 82.3704, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusGateAdminHouse = false;
						MoveObject(GateAdminHouse, 2455.5928, -1452.0453, 82.3704, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			// Завод
			if(IsPlayerInRangeOfPoint(playerid, 10.0, -1063.8147, 2178.3989, 39.8456)) //
			{
				if(GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusGateZavod)
					{
						StatusGateZavod = true;
						MoveDynamicObject(GateZavod, -1063.8147, 2167.3989, 39.8456, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusGateZavod = false;
						MoveDynamicObject(GateZavod, -1063.8147, 2178.3989, 39.8456, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			//
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2455.5928, -1452.0453, 82.3704)) // Ворота Админ-дома
			{
				if(!GetAdmin(playerid)) return SEM(playerid, "На данную территорию Вам въезд запрещен!");
				{
					if(!StatusGateAdminHouse)
					{
						StatusGateAdminHouse = true;
						PlayerPlaySound(playerid, 1165, 0.0, 0.0, 0.0);
						MoveObject(GateAdminHouse, 2455.5928, -1441.5453, 82.3704, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);

					}
					else
					{
						StatusGateAdminHouse = false;
						PlayerPlaySound(playerid, 1165, 0.0, 0.0, 0.0);
						MoveObject(GateAdminHouse, 2455.5928, -1452.0453, 82.3704, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			//
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2476.2942, -763.6030, 14.0767)) //
			{
				if(!StatusGateMechanic[0])
				{
					StatusGateMechanic[0] = true;
					MoveDynamicObject(GateMechanic[0], 2467.2722, -763.6030, 14.0767, 1.1);
					SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);
				}
				else
				{
					StatusGateMechanic[0] = false;
					MoveDynamicObject(GateMechanic[0], 2476.2942, -763.6030, 14.0767, 1.1);
					SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2476.1941, -740.2364, 14.0767)) //
			{
				if(GetJob(playerid) != JOB_MEHANIC && GetAdmin(playerid) <= 4) return 1;
				// if(GetJob(playerid) == JOB_MEHANIC && !JobDuty[playerid][PI[playerid][Job]]) return SEM(playerid, "Вы должны выйти на работу!");
				{
					if(!StatusGateMechanic[1])
					{
						StatusGateMechanic[1] = true;
						MoveDynamicObject(GateMechanic[1], 2470.1379, -740.2265, 14.0767, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);
					}
					else
					{
						StatusGateMechanic[1] = false;
						MoveDynamicObject(GateMechanic[1], 2476.1941, -740.2364, 14.0767, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			//
			/* ============================================== [ Организации ] ============================================== */
			// 1 - АО
			// 2 - ППС
			// 3 - ДПС
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 158.3769, 1210.2625, 12.6767)) // Ворота ДПС
			{
				if(GetFrac(playerid) != FRAC_DPS && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusGateDPS)
					{
						StatusGateDPS = true;
						MoveObject(GateDPS, 159.8228, 1217.3729, 12.6767, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);

					}
					else
					{
						StatusGateDPS = false;
						MoveObject(GateDPS, 158.3769, 1210.2625, 12.6767, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			// 4 - ФСБ
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1827.1215, 2129.5105, 17.6036)) // Ворота ФСБ
			{
				if(GetFrac(playerid) != FRAC_DPS && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusGateFSB)
					{
						StatusGateFSB = true;
						MoveDynamicObject(GateFSB, 1827.1215, 2120.0105, 17.6036, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);

					}
					else
					{
						StatusGateFSB = false;
						MoveDynamicObject(GateFSB, 1827.1215, 2129.5105, 17.6036, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			// 5 - ВЧ
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1891.1333, 1722.0508, 17.4127)) // Ворота ВЧ при въезде
			{
				if(GetFrac(playerid) != FRAC_VH && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusGateVH[0])
					{
						StatusGateVH[0] = true;
						MoveDynamicObject(GateVH[0], 1891.1333, 1733.0508, 17.4127, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);

					}
					else
					{
						StatusGateVH[0] = false;
						MoveDynamicObject(GateVH[0], 1891.1333, 1722.0508, 17.4127, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			//
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 1653.7750, 1682.6362, 17.1327)) // Ворота ВЧ для спец технике
			{
				if(GetFrac(playerid) != FRAC_VH && GetAdmin(playerid) <= 4) return 1;
				{
					if(!StatusGateVH[1])
					{
						StatusGateVH[1] = true;
						MoveDynamicObject(GateVH[1], 1653.7750, 1671.6362, 17.1327, 1.1);
						SetPlayerChatBubble(playerid, "открывает ворота", cPURPLE, 13.0, 10000);

					}
					else
					{
						StatusGateVH[1] = false;
						MoveDynamicObject(GateVH[1], 1653.7750, 1682.6362, 17.1327, 1.1);
						SetPlayerChatBubble(playerid, "закрывает ворота", cPURPLE, 13.0, 10000);
					}
				}
			}
			// 6 - СМП
			// 7 - СМИ
			// 8 - ОПГ-Б
			// 9 - ОПГ-Ю
			// 10 - Ч-Мафия
			// 11 - Р-Мафия
			/* ============================================================================================================= */
			// ===========================================
			SetPVarInt(playerid, "Off_Flood", gettime()+2);
		}
	}
	return 1;
}

CMD:cancel(playerid)
{
	if(GetPVarInt(playerid, "MedCardStatus") != 1 || GetPVarInt(playerid, "KeyHeal") != 1 || InviteFrac[playerid] != -1 || InviteFamily[playerid] != -1)
		return SEM(playerid, "У Вас нет активных предложений!");
	{
		if(GetPVarInt(playerid, "KeyHeal") == 1) // Отклонить личение
		{
			new targetid = GetPVarInt(playerid, "PlayerHeal");
			SCM(playerid, cRED, "Вы отказались от предложения");
			SCM(targetid, cRED, "Игрок отказался от предложения");
			DeletePVar(playerid, "PlayerHeal");
			DeletePVar(playerid, "MoneyHeal");
			DeletePVar(playerid, "KeyHeal");
			return 1;
		}
		else if(GetPVarInt(playerid, "MedCardStatus") == 1) // Отклонить мед-карту
		{
			new targetid = GetPVarInt(playerid, "PlayerMedCard");
			SCM(playerid, cRED, "Вы отказались от предложения");
			SCM(targetid, cRED, "Игрок отказался от предложения");
			DeletePVar(playerid, "MedCardStatus");
			DeletePVar(playerid, "MedCardCash");
			DeletePVar(playerid, "PlayerMedCard");
			return 1;
		}
		else if(InviteFrac[playerid] == 1) // Отклонить принятие в организацию
		{
			new id = InviteFrac[playerid];
			MeAction(playerid, "отложил(-а) заявление и ручку передав человеку на против");
			DoAction(playerid, "Заявление с ручкой отложено.");

			MeAction(id, "взял(-а) не подписанное заявление и ручку у человека на против");
			DoAction(id, "Не подписанное заявление без даты и подпеси в руке.");

			InviteFrac[playerid] = -1;
			return 1;
		}
		else if(InviteFamily[playerid] == 1) // Отклонить принятие в семью
		{
			FSCM(InviteFamily[playerid], cWAR, "Игрок %s отклонил Ваше предложение вступить в семью!", GetName(playerid));
			FSCM(playerid, cWAR, "Вы отклонили предложение вступить в семью '%s'!", FamI[PI[playerid][Family]][famName]);

			InviteFamily[playerid] = -1;
		}
	}
	return 1;
}

// ============================== [ Команды для организации ] =============== //

CMD:showud(playerid, params[])
{
	if(!FracGoss(playerid)) return SEM(playerid, CMDOff);
	extract params -> new player:to_playerid; else return SEM(playerid, "Используй: /showud [ ID Игрока ]");
	{
		new string[254], str[54];
		format(str, sizeof(str), "{FFFFFF}Имя_Фамилия:\t\t"BLUE"%s\n\n", GetName(playerid)); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Работает в:\t\t"SERVER"%s\n", FracI[GetFrac(playerid)][fName]); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Должнасть:\t\t"SERVER"%s\n\n", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1]); strcat(string, str);
		format(str, sizeof(str), "{FFFFFF}Статус:\t\t\t%s", (FracDuty[playerid][GetFrac(playerid)])?(""GREEN"Работает"):(""RED"Не работает")); strcat(string, str);
		SPD(to_playerid, dNull, d_info, ""SERVER"Служебное удостоверение", string, "Закрыть", "");

		MeAction(playerid, "показал(-а) открытое удостоверение человеку на против");
		DoAction(playerid, "Открытое удостоверение показано человеку на против");
		FSCM(playerid, cGREEN, "[ Информация ]{FFFFFF} Вы успешно показали удостоверение игроку "SERVER"%s [ %i ]{FFFFFF}.", GetName(to_playerid), to_playerid);
	}
	return 1;
}

CMD:invite(playerid, params[])
{
	if(!GetFrac(playerid) || GetFrac(playerid) && PI[playerid][FracRang] < 9) return SEM(playerid, CMDOff);
	{
		extract params -> new player: to_playerid; else return SEM(playerid, "Используй: /invite [ ID Игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		{
			if(playerid == to_playerid) return SEM(playerid, "Используй: /invite [ ID Игрока]");
			if(!PI[to_playerid][Pasport]) return SEM(playerid, "У игрока нет паспорта!");
			if(PI[to_playerid][Warn]) return SEM(playerid, "Игрок имеет предупреждения!");
			if(GetFrac(playerid) != FRAC_VH && PI[to_playerid][Level] < 3) return SEM(playerid, "У игрока нет 3 уровня!");
			if(!ProxDetectorS(6, playerid, to_playerid)) return SEM(playerid, "Вы далеко друг от друга!");
			if(GetFrac(to_playerid)) return SEM(playerid, "Игрок уже состоит в другой организации!");
			if(GetFrac(playerid) != FRAC_VH && PI[to_playerid][Zakon] < 30) return SEM(playerid, "У игрока мало законопослушности! (Мин. 50)");
			if(InviteFrac[playerid] == to_playerid) return SEM(playerid, "Вы уже приглосили данного игрока!");
			if(InviteFrac[to_playerid] != -1) return SEM(playerid, "Данному игроку уже предложили вступить в организацмю!");
			{
				new stringInvite[120];
				format(stringInvite, sizeof(stringInvite), "{74CD85}%s %s {ffffff}передал(-а) Вам заявление на подпись для вступления в [{74CD85}%s{ffffff}]", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], FracI[GetFrac(playerid)][fName], FracI[GetFrac(playerid)][fName]);
				SCM(to_playerid, -1, stringInvite);

				FSCM(playerid, -1, "Вы передали заявление {74CD85}%s{ffffff} на подпись для вступления в [{74CD85}%s{ffffff}]", GetName(playerid),  FracI[GetFrac(playerid)][fName]);
				MeAction(playerid, "передал(-а) заявление и ручку для подписания человеку на против");
				MeAction(to_playerid, "взял(-а) заявление и ручку для подписания");

				InviteFrac[playerid] = to_playerid;
				SCM(to_playerid, -1, "Для подписания нажмите{FF7F50} Y{FFFFFF}, нажмите {FF7F50}N{FFFFFF} для отказа");
			}
		}
	}
	return 1;
}

CMD:r(playerid, params[])
{
	if(!GetFrac(playerid) && !PI[playerid][Job]) return SEM(playerid, CMDOff);
	{
		if(PI[playerid][Mute] > 0) return SCMMute(playerid, 1);
		extract params -> new string: text[62]; else return SEM(playerid, "Используй: /r [ IC текст ]");
		if(strlen(text) > 62) return SEM(playerid, "Используй: /r [ IC текст до 62 символов! ]");
		{
			if(GetFrac(playerid) && !PI[playerid][Job])
			{
				new string[144];
				if(!FracDuty[playerid][GetFrac(playerid)]) return SEM(playerid, "Вы должны быть на работе!");
				{
					string_f("[R] %s %s "YELLOW"говорит"GREEN": %s", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid), text);
					SCMFrac(GetFrac(playerid), cGREEN, string);
				}
			}
			else if(!GetFrac(playerid) && PI[playerid][Job])
			{
				if(!JobDuty[playerid][PI[playerid][Job]]) return SEM(playerid, "Вы должны быть на работе!");
				{
					new string[144];
					string_f("[R] %s %s "YELLOW"говорит"GREEN": %s", Job_Name[PI[playerid][Job]], GetName(playerid), text);
					SCMJob(PI[playerid][Job], cYELLOW, string);
				}
			}
			new stringer[144];
			stringer_f("''передал(-а) в рацию: %s''", text);
			SetPlayerChatBubble(playerid, stringer, cPURPLE, 20.0, 7000);
		}
	}
	return 1;
}

CMD:rb(playerid, params[])
{
	if(!GetFrac(playerid) && !PI[playerid][Job]) return SEM(playerid, CMDOff);
	{
		if(PI[playerid][Mute] > 0) return SCMMute(playerid, 1);
		extract params -> new string: text[62]; else return SEM(playerid, "Используй: /rb [ OOC текст ]");
		if(strlen(text) > 62) return SEM(playerid, "Используй: /rb [ OOC текст до 62 символов! ]");
		{
			if(GetFrac(playerid) && !PI[playerid][Job])
			{
				new string[144];
				string_f( "(( [R - %i] %s [%d] "YELLOW"говорит"GREEN": %s ))", PI[playerid][FracRang], GetName(playerid), playerid, text);
				SCMFrac(GetFrac(playerid), cGREEN, string);
			}
			else if(!GetFrac(playerid) && PI[playerid][Job])
			{
				new string[144];
				string_f("(( [R] %s %s [%d]: ))", Job_Name[PI[playerid][Job]], GetName(playerid), playerid, text);
				SCMJob(PI[playerid][Job], cYELLOW, string);
			}
		}
	}
	return 1;
}

CMD:d(playerid, params[])
{
	if(!FracGoss(playerid) || !GetAdmin(playerid)) return SEM(playerid, CMDOff);
	{
		if(PI[playerid][Mute] > 0) return SCMMute(playerid, 1);
		if(GetPVarInt(playerid,"dep") > gettime()) return SEM(playerid, "Следующее сообщение Вы сможете отправить через 15 секунд!");
		else if(isnull(params)) return SEM(playerid, "Информация: {ffffff}/d [текст]");
		new mesid[124];
		format(mesid, sizeof(mesid), "[D] [%s] %s %s "YELLOW"говорит{ff8282}: ...", FracI[GetFrac(playerid)][fName], GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid));
		SCMFracAll(0xff8282AA, mesid);
		new dtext[144];
		format(dtext, sizeof(dtext), "[D] - %s", params[0]);
		SCMFracAll(0xff8282AA, dtext);

		SetPlayerChatBubble(playerid,"сообщает в департамент",cPURPLE,30.0,10000);
		SetPVarInt(playerid,"dep",gettime() + 15);
	}
	return 1;
}

CMD:db(playerid, params[])
{
	if(!FracGoss(playerid) || !GetAdmin(playerid)) return SEM(playerid, CMDOff);
	{
		if(PI[playerid][Mute] > 0) return SCMMute(playerid, 1);
		if(GetPVarInt(playerid,"dep") > gettime()) return SEM(playerid, "Следующее сообщение Вы сможете отправить через 15 секунд!");
		else if(isnull(params)) return SEM(playerid, "Информация: {ffffff}/db [текст]");
		new mesid[128];
		format(mesid, sizeof(mesid), "(( [D] [%s] %s %s [%i] "YELLOW"говорит{ff8282}: ... ))", FracI[GetFrac(playerid)][fName], GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], GetName(playerid), playerid);
		SCMFracAll(0xff8282AA, mesid);
		new dtext[144];
		format(dtext, sizeof(dtext), "(( [D] - %s ))", params[0]);
		SCMFracAll(0xff8282AA, dtext);
		SetPVarInt(playerid,"dep",gettime() + 15);
	}
	return 1;
}

CMD:megaphone(playerid, params[])
{
	if(!FracMVD(playerid)) return SEM(playerid, CMDOff);
	if(isnull(params)) return SEM(playerid, "Введите: /m(egaphone) [текст]");
	{
	    if(isnull(params)) return SEM(playerid, "Введите: /m(egaphone) [текст]");
	    new string[128];
		string_f("[Мегафон] %s: %s", GetName(playerid), params[0]);
		SendStreamMessage(50.0, playerid, string, cYELLOW);
	}
	return 1;
}
CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);

CMD:arrest(playerid, params[])
{
	if(GetFrac(playerid) != FRAC_PPS && GetFrac(playerid) != FRAC_FSB) return SEM(playerid, CMDOff);
	{
    	new Premiy;
		extract params -> new player:to_playerid; else return SEM(playerid, "Используйте: /uncuff [ ID Игрока ]");
		if(GetFrac(playerid) == FRAC_PPS || GetFrac(playerid) == FRAC_FSB && PI[playerid][FracRang] < 4)
		{
			FSCM(playerid, cWAR, "[ Ошибка ] {FFFFFF}Доступно с должности "SERVER"'%s'{FFFFFF}!", GetRang(GetFrac(playerid), 4));
			return 1;
		}
		if(sscanf(params, "d", to_playerid)) return SEM(playerid, "/arrest [ ID Игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(PI[to_playerid][Jail] == 1) return SEM(playerid, "Игрок ужк находиться под стражей!");
		if(!PI[to_playerid][Wanted]) return SEM(playerid, "Игрок не в розыске!");
		// if(pCuff[to_playerid][pCuffer] == INVALID_PLAYER_ID) return SEM(playerid, "Игрок не в наручниках!");
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, FracI[FRAC_PPS][fPosExit][0], FracI[FRAC_PPS][fPosExit][1], FracI[FRAC_PPS][fPosExit][2]) // ППС
		// && !IsPlayerInRangeOfPoint(playerid, 15.0, FracI[FRAC_DPS][fPosExit][0], FracI[FRAC_DPS][fPosExit][1], FracI[FRAC_DPS][fPosExit][2]) // ДПС
		&& !IsPlayerInRangeOfPoint(playerid, 15.0, FracI[FRAC_FSB][fPosExit][0], FracI[FRAC_FSB][fPosExit][1], FracI[FRAC_FSB][fPosExit][2])) // ФСБ
		return SEM(playerid, "Вы должны находиться у зданий "SERVER"ППС{FFFFFF}, "SERVER"ДПС{FFFFFF} или "SERVER"ФСБ{FFFFFF}!");
		{
			switch(GetPlayerWantedLevel(to_playerid))
			{
	            case 1..6: Premiy = PI[to_playerid][Wanted]*500;
	  		}
	  		GiveMoney(playerid, Premiy);
			// for(i, 5) PlayerTextDrawShow(to_playerid, Jail_PTD[to_playerid][i]);
			foreach(new i : Player)
			{
				if(FracMVD(i))
				{
				    new string[512];
				    string_f("[Внимание] %s арестовал преступника %s и получил премию %s рублей.", GetName(playerid), GetName(to_playerid), ConvertCash(Premiy));
					SCM(i, cBLUE, string);
				}
			}
			if(pCuff[to_playerid][pCuffer] != INVALID_PLAYER_ID)
			{
				new cuffer = pCuff[to_playerid][pCuffer];
				SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(to_playerid, 0);
				pCuff[to_playerid][pCuffer] = pCuff[to_playerid][pCuffee] = pCuff[cuffer][pCuffee] = pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
			}
			PI[to_playerid][Jail] = 1;
	        PI[to_playerid][JailTime] = ((PI[to_playerid][Wanted]*10)*60);

			if(PI[to_playerid][Wanted] < 4) PI[to_playerid][Spawn] = 5;
			else PI[to_playerid][Spawn] = 6;

			if(PI[to_playerid][Zakon] > 1) PI[to_playerid][Zakon] --;
			SpawnPlayer(to_playerid);

			PI[to_playerid][Wanted] = 0;
			SetPlayerWantedLevel(to_playerid, PI[to_playerid][Wanted]);
		}
	}
	return 1;
}

CMD:leave(playerid, params[])
{
	if(GetAdmin(playerid) || PI[playerid][Vip] == 1)
	{
		if(!GetFrac(playerid)) return SEM(playerid, "Вы не состоите в организации!");
		if(!PI[playerid][Vip]) return SEM(playerid, "Вы не VIP игрок!");
		if(PI[playerid][FracLeader]) return SEM(playerid, "Лидер не может покинуть организация самостоятельно!");
		if(IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы не должны находиться в транспорте!");
		{
		    new string[144];
			string_f("{FFFFFF}Вы действительно желаете покинуть Должность "SERVER"%s{FFFFFF} в организации "SERVER"%s{FFFFFF}?", GetRang(GetFrac(playerid), PI[playerid][FracRang]), FracI[GetFrac(playerid)][fName]);
			SPD(playerid, dLeaveFrac, d_info, ""SERVER"Увольнение ПСЖ", string, "Да", "Нет");
		}
	}
	return 1;
}

CMD:su(playerid, params[])
{
	if(GetFrac(playerid) != FRAC_PPS && GetFrac(playerid) != FRAC_FSB) return SEM(playerid, CMDOff);
	{
		extract params -> new to_playerid, wanted, string:reason[32]; else return SEM(playerid, "/su [ ID игрока ] [ Уровень розыска ] [ Причина ]");
		if(GetFrac(playerid) == FRAC_PPS && GetFrac(playerid) == FRAC_FSB && PI[playerid][FracRang] < 3)
		{
			FSCM(playerid, cWAR, "[ Ошибка ] {FFFFFF}Доступно с должности "SERVER"'%s'{FFFFFF}!", GetRang(GetFrac(playerid), 3));
			return 1;
		}
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(PI[to_playerid][Jail]) return SEM(playerid, "Данный игрок уже находиться в тюрьме");
		{
			if(wanted < 1 || wanted > 6)return SEM(playerid, "Укажите уровень розыска от 1 - 6 звезд!!");
			if(PI[to_playerid][Wanted] >= 6) return SEM(playerid, "Вы не можете дать более 6-ти звезд!");
			{
				if((PI[to_playerid][Wanted]+wanted) < 6) PI[to_playerid][Wanted] += wanted;
				else PI[to_playerid][Wanted] = 6;
				SetPlayerWantedLevel(to_playerid, PI[to_playerid][Wanted]);
				FSCM(to_playerid, cBLUE, "[ВНИМАНИЕ] %s %s %s: объявил Вас в розыск. Причина: %s", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]], FracI[GetFrac(playerid)][fName], GetName(playerid), reason);
				new mesid[128];
				format(mesid, sizeof(mesid), "[ВНИМАНИЕ] %s %s объявил(-а) в розыск жител%s %s. Причина: %s", GetRang(GetFrac(playerid), PI[playerid][FracRang]), GetName(playerid), (PI[to_playerid][Sex]==1)?("я"):("ьницу"), GetName(to_playerid), reason);
				SCMFracMVD(cBLUE, mesid);
				// SetPlayerCriminal(params[0], GetName(playerid), params[1]);
			}
		}
	}
	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!FracMVD(playerid)) return SEM(playerid, CMDOff);
	{
		new string[512], str[124], stringer[54], phones[32], p_id = 0;
		strcat(string, "№. Имя Фамилия\tНомер телефона\tУровень преступлений\n");
		foreach(new i: Player)
		{
			if(!PI[i][Wanted])
			{
				SPD(playerid, dNull, d_info, ""SERVER"Список розыскиваемых", "Список пуст!", "Закрыть", "");
				continue;
			}
			if(!PI[i][SimCard]) phones = ""GREY"Отсутствует";
			else format(phones, sizeof(phones), ""BLUE"%i", PI[i][SimCard]);

			p_id ++;
			format(str, sizeof(str), "%i. %s [%i]\t%s\t%i зв.\n", p_id, GetName(i), i, phones, PI[i][Wanted]); strcat(string, str);
			stringer_f("{FFFFFF}Кол-во людей в розыске: "SERVER"%i", p_id);
		}
		SPD(playerid, dNull, d_tlisth, stringer, string, "Закрыть", "");
	}
	return 1;
}

CMD:wfind(playerid)
{
	if(GetFrac(playerid) != FRAC_PPS && GetFrac(playerid) != FRAC_FSB) return SEM(playerid, CMDOff);
	{
		new string[512], str[32];
		strcat(string, ""SERVER"№. "WHITE"Имя_Фамили\t"WHITE"Уровень розыска\n");
		foreach(new i: Player)
		{
			if(!PI[i][Wanted])
			{
				SPD(playerid, dNull, d_info, ""SERVER"Список розыскиваемых", "Список пуст!", "Закрыть", "");
				continue;
			}
			format(str, sizeof(str), ""SERVER"%i. "WHITE"%s\t"SERVER"%i зв.\n", i, GetName(i), PI[i][Wanted]); strcat(string, str);
		}
		SPD(playerid, dNull, d_tlisth, ""SERVER"Список розыскиваемых", string, "Найти", "Закрыть");
	}
	return 1;
}

CMD:clear(playerid, params[])
{
	if(!FracMVD(playerid)) return SEM(playerid, CMDOff);
	{
		extract params -> new player:to_playerid; else return SEM(playerid, "/clear [ ID игрока ]");
		// Поставить проверку на нахождение у ПК
		if(FracMVD(playerid) && PI[playerid][FracRang] < 5)
		{
			FSCM(playerid, cWAR, "[ Ошибка ] {FFFFFF}Доступно с должности "SERVER"'%s'{FFFFFF}!", GetRangName[GetFrac(playerid)][5]);
			return 1;
		}
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(to_playerid == playerid) return SEM(playerid, "Вы не можете снять себе розыск!");
		{
		    GetPlayerWantedLevel(PI[to_playerid][Wanted]);
	  		if(PI[to_playerid][Wanted] == 0) return SEM(playerid, "Игрок не находиться в розыске");
	  		{
			    PI[to_playerid][Wanted] = 0;
				SetPlayerWantedLevel(to_playerid, PI[to_playerid][Wanted]);
				SCM(playerid, cBLUE, "Вам сняли уровень розыска");
			}
		}
	}
	return 1;
}

CMD:find(playerid)
{
    if(!GetFrac(playerid)) return SEM(playerid, CMDOff);
    {
		new string[1024], str[250], phone[20], only;
		strcat(string, "\
		"SERVER"Уровень\t"SERVER"Должность\t"SERVER"Выговор\t"SERVER"Телефон\t"SERVER"Статус\t"SERVER"Имя сотрудника\n\n");

		foreach(new i: Player)
		{
		    if(!PI[i][SimCard]) phone = "Отсутсвует";
			else format(phone, sizeof(phone), "%d", PI[i][SimCard]);

			if(GetFrac(i) == GetFrac(playerid))
			{
			    if(!PlayerLogin[i] || GetAdmin(i)) continue;

				format(str, sizeof(str), "{ffffff}\t%d\t%d\t%d из 3\t\t%s\t%s %s [%d]%s\n",
				PI[i][Level], PI[i][FracRang], PI[i][FracWarn], phone, (!FracDuty[i])?("{FF0000}Не работает{FFFFFF}"):("{63BD4E}Работает{FFFFFF}"),
				GetName(i), i, (PlayerAFK[i]>1)?("{FF0000} - На паузе: %s"):(""), ConvertTime(PlayerAFK[i]));
				strcat(string, str);
				only++;
			}
		}
		new stringer[50];
		stringer[0] = EOS;
		format(stringer, sizeof(stringer), "{ffffff}Онлайн организации:"SERVER" %d {ffffff}чел.", only);
		SPD(playerid, dNull, d_info, stringer, string, "Закрыть", "");
	}
	return 1;
}

CMD:lmenu(playerid)
{
	if(!PI[playerid][FracLeader] || !GetString(FracI[GetFrac(playerid)][fLeader], GetName(playerid))) return SEM(playerid, CMDOff);
	{
		new string[1024];
		string[0] = EOS;
		strcat(string, "№. Наименование\tСтатус\n");
		strcat(string, ""SERVER"1. {FFFFFF}Изменить место спавна\n");
		strcat(string, ""SERVER"2. {FFFFFF}Изменить место раздевалки\n");
		strcat(string, ""SERVER"3. {FFFFFF}Изменить место склада\n");
		strcat(string, ""SERVER"4. {FFFFFF}Изменить место информации\n");
		strcat(string, ""SERVER"5. {FFFFFF}Изменить место загрузки материалов\n");
		strcat(string, " \n");
		strcat(string, ""SERVER"6. Автопарк организации\n");
		strcat(string, ""SERVER"7. {FFFFFF}Заправить весь транспорт\t"GREEN"25.000 Р\n");
		strcat(string, ""SERVER"8. {FFFFFF}Спавн всего транспорта\t"GREEN"15.000 Р\n");
		SPD(playerid, dLeaderPanel, d_tlisth, ""SERVER"Панель управления организацией", string, "Выбрать", "Закрыть");
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!FracMVD(playerid)) return SEM(playerid, CMDOff);
	{
		extract params -> new player:to_playerid; else return SEM(playerid, "Используйте: /cuff [ ID Игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(IsPlayerInAnyVehicle(to_playerid)) return SEM(playerid, "Игрок в транспорте!");
		if(!ProxDetectorS(8.0, playerid, to_playerid)) return SEM(playerid, "Вы далеко друг от друга");
		if(to_playerid == playerid) return SEM(playerid, "Вы не можете надеть наручники на себя!");
		if(pCuff[to_playerid][pCuffee] == to_playerid) return SEM(playerid, "Игрок уже в наручниках!");
		{
			if(GetPVarInt(to_playerid, "Tazer") > 0)
			{
				SetPVarInt(to_playerid, "Tazer", 0);
				TogglePlayerControllable(to_playerid, 1);
				SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_NONE);
			}
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_CUFFED);
			SetPlayerAttachedObject(to_playerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
			FSCM(playerid, cBLUE, "Вы надели наручники на %s", GetName(to_playerid));
			FSCM(to_playerid, cBLUE, "%s надел%s на Вас наручники", GetName(playerid), (PI[playerid][Sex]==1)?(""):("а"));
			pCuff[to_playerid][pCuffee] = pCuff[playerid][pCuffee] = to_playerid;
			pCuff[to_playerid][pCuffer] = pCuff[playerid][pCuffer] = playerid;
			GameTextForPlayer(playerid, "~r~Вы надели наручники", 5000, 1);
			GameTextForPlayer(to_playerid, "~r~Вам надели наручники", 5000, 1);
			new string[64];
			string_f( "надел%s наручники на %s", (PI[playerid][Sex]==1)?(""):("а"), GetName(to_playerid));
			MeAction(playerid, string);
		}
	}
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!FracMVD(playerid)) return SEM(playerid, CMDOff);
	{
		extract params -> new player:to_playerid; else return SEM(playerid, "Используйте: /uncuff [ ID Игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(!ProxDetectorS(8.0, playerid, to_playerid)) return SCM(playerid, cGREY, "Вы далеко друг от друга");
		if(to_playerid == playerid) return SEM(playerid, "Вы не можете снять наручники с себя!");
		if(pCuff[to_playerid][pCuffer] == INVALID_PLAYER_ID) return SEM(playerid, "Игрок не в наручниках!");
		{
			FSCM(playerid, cBLUE, "Вы сняли наручники с %s", GetName(to_playerid));
			FSCM(params[0], cBLUE, "%s снял%s с Вас наручники", GetName(playerid), (PI[playerid][Sex]==1)?(""):("а"));
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(to_playerid, 0);
		 	pCuff[params[0]][pCuffer] = pCuff[to_playerid][pCuffee] = pCuff[playerid][pCuffee] = pCuff[playerid][pCuffer] = INVALID_PLAYER_ID;
			GameTextForPlayer(playerid, "~g~Вы сняли наручники", 5000, 1);
			GameTextForPlayer(to_playerid, "~g~Вам сняли наручники", 5000, 1);
			TogglePlayerControllable(to_playerid, 1);
			new string[64];
			string_f( "снял%s наручники с %s", (PI[playerid][Sex]==1)?(""):("а"), GetName(to_playerid));
			MeAction(playerid, string);
		}
	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(PI[playerid][Frac] != FRAC_PPS && PI[playerid][Frac] != FRAC_DPS) return SEM(playerid, CMDOff);
	{
		extract params -> new to_playerid, summa, string:reason[32]; else return SEM(playerid, "Используйте: /ticket [ ID Игрока ] [ Сумма штрафа ] [ Причина штрафа ]");
		if(PI[playerid][FracRang] < 5) return SEM(playerid, "Для вашей должности недоступно!");
		if(strlen(reason) > 32) return SEM(playerid, "Причина указана более 32-ух символов!");
		{
			new IDs;
			if(GetFrac(playerid) == FRAC_PPS) IDs = 1;
			if(GetFrac(playerid) == FRAC_DPS) IDs = 2;

		    new string[250];
            string_f("INSERT INTO "T_TICKETS" \
				(`tName`, `tReason`, `tPrice`, `tData`, `tPutName`, `tID`)VALUES\
				('%s', '%s', '%d рублей', NOW(), '%s', '%i')",
				GetName(to_playerid), reason, summa, GetName(playerid), IDs);
			mysql_query(mysql, string);

			if(GetFrac(playerid) == FRAC_PPS) PI[to_playerid][ShtrafPPS] ++;
			else if(GetFrac(playerid) == FRAC_DPS) PI[to_playerid][ShtrafDPS] ++;

			FSCM(playerid, cBLUE, "Вы успешно выдали штраф жителю %s [%d]", GetName(to_playerid), to_playerid);
			FSCM(to_playerid, cBLUE, "%s %s выдал Вам штраф на сумму %s рублей. Причина: %s", GetRang(GetFrac(playerid), PI[playerid][FracRang]), GetName(playerid), ConvertCash(summa), reason);

			new str[500];
			format(str, sizeof(str), "[R] %s %s вылал(-а) штраф жителю %s на сумму %s рублей. Причина: %s",
			GetRangName[GetFrac(playerid)][PI[playerid][FracRang]], GetName(playerid), GetName(to_playerid), ConvertCash(summa), reason);
			SCMFrac(GetFrac(playerid), cBLUE, str);

			SCMInfo(to_playerid, "Просмотреть свои штраф Вы можете командой "SERVER"/mytickets");

			IDs = 0;
		}
	}
	return 1;
}

CMD:heal(playerid, params[])
{
	if(GetFrac(playerid) != FRAC_SMP) return SEM(playerid, CMDOff);
	{
		extract params -> new to_playerid, summa; else return SEM(playerid, "Информация: {ffffff}/heal [ ID игрока ] [ Сумма: 500 - 1000 ]");
		if(playerid == to_playerid) return SEM(playerid, "Вы не можете вылечить себя!");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(!ProxDetectorS(5, playerid, to_playerid))return SEM(playerid, "Вы далеко друг от друга!");
		if(!MedPland[playerid]) return SEM(playerid, "У Вас нет медикоментов для лечения!");
		// if(GetPVarInt(to_playerid, "lechenie") > 0) SEM(playerid, "Пациент уже проходит курс лечения!");
		{
			new Float:shealth;
			GetPlayerHealth(to_playerid, shealth);
			FSCM(playerid, cBLUE, "Вы предложили %s вылечиться за %i рублей", GetName(to_playerid), summa);
			FSCM(to_playerid, cBLUE, "%s %s предлагает Вам пройти курс платного лечения за %i рублей", GetRang(GetFrac(playerid), PI[playerid][FracRang]), GetName(playerid), summa);
			SCMInfo(to_playerid, "Нажмите {03c03c}Y {FFFFFF}чтобы согласиться или {ff7518}N {FFFFFF}для отказа");
			SetPVarInt(to_playerid, "PlayerHeal", playerid);
			SetPVarInt(to_playerid, "MoneyHeal", summa);
			SetPVarInt(to_playerid, "StatusHeal", 1);
		}
	}
	return 1;
}

CMD:setmed(playerid, params[])
{
	if(GetFrac(playerid) != FRAC_SMP) return SEM(playerid, CMDOff);
	if(GetFrac(playerid) == FRAC_SMP && PI[playerid][FracRang] < 4) return SEM(playerid, "Доступено с 4-го ранга!");
	{
		extract params -> new to_playerid, summa; else return SEM(playerid, "Информация: {ffffff}/setmed [ ID игрока ] [ Сумма: 5.000 - 10.000 ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(!ProxDetectorS(5, playerid, to_playerid)) return SEM(playerid, "Вы далеко друг от друга!");
		if(!(5000 <= summa <= 10000)) return SEM(playerid, "Сумма должна быть от 5.000 до 10.000 рублей!");
		if(PI[to_playerid][MedCard]) return SEM(playerid, "У игрока уже есть Мед карта!");
		{
			FSCM(playerid, cBLUE, "Вы предложили %s получить Медецинскую карту за %s рублей", GetName(to_playerid), ConvertCash(summa));
			FSCM(to_playerid, cBLUE, "%s %s предлагает Вам получить Медецинскую карту за %s рублей", GetRang(GetFrac(playerid), PI[playerid][FracRang]), GetName(playerid), ConvertCash(summa));
			SCMInfo(to_playerid, "Нажмите {03c03c}Y {FFFFFF}чтобы согласиться или {ff7518}N {FFFFFF}для отказа");
			SetPVarInt(to_playerid, "PlayerMedCard", playerid);
			SetPVarInt(to_playerid, "MedCardCash", summa);
			SetPVarInt(to_playerid, "MedCardStatus", 1);
		}
	}
	return 1;
}

CMD:tow(playerid, params[])
{
	if(GetFrac(playerid) != FRAC_DPS) return SEM(playerid, CMDOff);
	if(!FracDuty[playerid][GetFrac(playerid)]) return SEM(playerid, "Вы не вышли на работу!");
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		{
			new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found=0;
			new vid=0;
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					SCMInfo(playerid, "Машина подцеплена!");
				}
			}
			if(!Found) return SEM(playerid, "Вы слишком далеко от машины.");
		}
	}
	return 1;
}

// ============================== [ Команды для Транспорта ] ================ //

CMD:carpanel(playerid)
{
	new string[500], str[150];
	new carid  = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	{
		GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
        strcat(string, "№. Наименование\tСтатус\n");
		format(str, sizeof(str), ""SERVER"1. {FFFFFF}Двигатель\t%s\n", (!GetEngine(carid))?(""SERVER"Заглушен"):(""GREEN"Заведен")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"2. {FFFFFF}Фары\t%s\n", (!GetLights(carid))?(""SERVER"Отключены"):(""GREEN"Включены")); strcat(string, str);
		strcat(string, " \n");
		strcat(string, ""SERVER"3. {FFFFFF}Двери\n");
		strcat(string, ""SERVER"4. {FFFFFF}Окна\n");
		strcat(string, " \n");
		format(str, sizeof(str), ""SERVER"5. {FFFFFF}Капот\t%s\n", (!bonnet)?(""SERVER"Закрыт"):(""GREEN"Открыт")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"6. {FFFFFF}Багажник\t%s\n", (!boot)?(""SERVER"Закрыт"):(""GREEN"Открыт")); strcat(string, str);
		// strcat(string, " \n");
		// format(str, sizeof(str), ""SERVER"7. {FFFFFF}Сигнализация\t%s\n", (!alarm)?(""SERVER"Откл"):(""GREEN"Вкл")); strcat(string, str);
		// format(str, sizeof(str), ""SERVER"8. {FFFFFF}Аварийка\t%s\n", (!Povorotnik[0][carid] && !Povorotnik[1][carid])?(""SERVER"Отключена"):(""GREEN"Включена")); strcat(string, str);
		SPD(playerid, dCarPanel, d_tlisth, ""SERVER"Панель управления транспортом", string, "Выбрать", "Закрыть");
	}
	return 1;
}
CMD:cp(playerid) return callcmd::carpanel(playerid);

CMD:limit(playerid, params[])
{
	extract params -> new carLimit; else return SEM(playerid, "Информация: {ffffff}/limit [ Лимит 0-150 ]");
	new carid  = GetPlayerVehicleID(playerid);
	VehicleInfo[carid][vLimit] = carLimit;
	if(VehicleInfo[carid][vLimit] > 0) FSCM(playerid, -1, "Вы утановили лимит ТС на %i км/ч", VehicleInfo[carid][vLimit]);
	else if(!VehicleInfo[carid][vLimit]) SCMInfo(playerid, "Вы сняли ограничения!");
	return 1;
}

CMD:lock(playerid, params[])
{
	extract params -> new type_car; else
	{
		SEM(playerid, "Введите: /lock [ Тип транспорта ]");
		return SCM(playerid, cGREEN, "[ Информация ]{FFFFFF}Тип: 1 - Личный транспорт, 2 - Аренда/Работа");
  	}
    if(type_car < 1 || type_car > 2) return SEM(playerid, "Введите: /lock [ 1 - Личный транспорт, 2 - Аренда/Работа ]");
    if(GetPVarInt(playerid, "antifloodlock") > gettime()) return SEM(playerid, "Не флуди!");
    {
    	new Float: x, Float: y, Float: z;

        if(type_car == 1)
        {
		    return 1;
  		}
		else if(type_car == 2)
		{
            if(PlayerRent[playerid] == -1) return SEM(playerid, "Вы не арендуете транспорт!");
            {
				new carid = PlayerRent[playerid];
				GetVehiclePos(carid, x, y, z);

				if(!IsPlayerInRangeOfPoint(playerid, 5, x, y, z)) return SEM(playerid, "Вы должны находится рядом с транспортом!");
				{
					if(GetPlayerVehicleID(playerid) == carid && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetLock(carid, !GetDoors(carid));
					else SetLock(carid, !GetDoors(carid));
					if(GetDoors(carid)) MeAction(playerid, "закрывает рабочий транспорт");
					else MeAction(playerid, "открывает рабочий транспорт");
				}
			}
		}
    }
    PlayerPlaySound(playerid, 25800, 0.0, 0.0, 0.0);
	SetPVarInt(playerid, "antifloodlock", gettime()+2);
	return 1;
}

CMD:rem(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	{
		if(!StatusRemen[playerid]) { StatusRemen[playerid] = true; MeAction(playerid, "пристегнул(-а) ремень безопасности"); }
		else { StatusRemen[playerid] = false; MeAction(playerid, "растегнул(-а) ремень безопасности"); }
	}
	return 1;
}

// ============================== [ Команды для Дома ] ====================== //

// ============================== [ Команды для Бизнеса ] =================== //

// ============================== [ Команды для Банкомата ] ================= //

// ============================== [ Команды для Семьи ] ===================== //

CMD:finvite(playerid, params[])
{
	new fam = PI[playerid][Family];
	if(GetString(FamI[fam][famCreator], "The Stats") || !GetString(FamI[fam][famZam], "The Stats")) return SEM(playerid, CMDOff);
	{
		extract params -> new to_playerid; else return SEM(playerid, "Используйте: /finvite [ ID Игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(PI[to_playerid][Family] == PI[playerid][Family]) return SEM(playerid, "Данный игрок уже находить в Вашей семье!");
		if(PI[to_playerid][Family] && PI[to_playerid][Family] != PI[playerid][Family]) return SEM(playerid, "Данный игрок уже находить в другой семье!");

		if(InviteFamily[to_playerid] != playerid) return SEM(playerid, "Данного игрока уже приглосили в семью!");
		if(InviteFamily[to_playerid] == playerid) return SEM(playerid, "Вы уже отправили приглошение данному игроку!");
		{
			FSCM(playerid, cGREEN, "Вы предложили игроку %s присоедениться к семье", GetName(to_playerid));
			FSCM(to_playerid, 0xFF7F50FF, "%s предложил Вам присоедениться к семье %s", GetName(playerid), FamI[fam][famName]);
			SCM(to_playerid, -1, "Для согласия нажмите{FF7F50} Y{FFFFFF}, для отказа нажмите {FF7F50}N");

			InviteFamily[playerid] = to_playerid;
			InviteFamily[to_playerid] = playerid;

		}
	}
	return 1;
}

CMD:funinvite(playerid, params[])
{
	new fam = PI[playerid][Family];
	if(GetString(FamI[fam][famCreator], "The Stats") || !GetString(FamI[fam][famZam], "The Stats")) return SEM(playerid, CMDOff);
	{
	    extract params -> new to_playerid, string:reason[32]; else return SEM(playerid, "Используйте: /funinvite [ ID игрока ] [ Причина ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(strlen(reason) > 32) return SEM(playerid, "Слишком большой текст!");
		{
	        new string[250];
			string_f("%s | %s прогнал(-а) из семьи %s. Причина: %s", FamI[fam][famName], GetName(playerid), GetName(to_playerid), reason);
			SCMFamily(PI[playerid][Family], string);

			FSCM(to_playerid, cWAR, "%s прогнал(-а) Вас из семьи %s. Причина: %s", GetName(playerid), FamI[fam][famName], reason);
	        FamilyLeave(to_playerid);
		}
	}
	return 1;
}

CMD:fmenu(playerid)
{
	if(!PI[playerid][Family]) return SEM(playerid, "Вы не состоите в семье!");
	{
		new string[560], famonline = 0;
	    foreach(new i: Player)
		{
		    if(!PlayerLogin[i]) continue;
			if(PI[i][Family] == PI[playerid][Family]) famonline++;
		}
	    string_f("\
			"SERVER"1. {FFFFFF}Информация о семье\n\
			"SERVER"2. {FFFFFF}Покинуть семью\n\
			"SERVER"3. {FFFFFF}Изменить цвет рации семьи\n\
			"SERVER"4. {FFFFFF}Смена названия семьи\n\
			"SERVER"5. {FFFFFF}Общак семьи\n\
			"SERVER"6. {FFFFFF}Автопарк семьи\n\
			"SERVER"7. {FFFFFF}Весь состав семьи\n\
			"SERVER"8. {FFFFFF}Члены семьи онлайн: "SERVER"%d{FFFFFF} чел.", famonline);
		SPD(playerid, dFamMenu, d_list, "{FFCC00} Меню семьи", string, "Выбор", "Выход");
	}
	return 1;
}

CMD:f(playerid, params[])
{
	new fam = PI[playerid][Family], string[144];
	if(!fam) return SEM(playerid, CMDOff);
	// if(!PI[playerid][Settings][6]) return SEM(playerid, "Ваш семейный чат отключён!");
	{
		extract params -> new string:text[90]; else return SEM(playerid, "Введите: /f [ Текст ]");
		if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
		{
			string_f("[ %s ] %s [%d] сообщает: %s", FamI[fam][famName], GetName(playerid), playerid, text);
    		SCMFamily(fam, string);
		}
	}
	return 1;
}

CMD:fb(playerid, params[])
{
	new fam = PI[playerid][Family], string[144];
	if(!fam) return SEM(playerid, CMDOff);
	// if(!PI[playerid][Settings][6]) return SEM(playerid, "Ваш семейный чат отключён!");
	{
		extract params -> new string:text[90]; else return SEM(playerid, "Введите: /fb [ Текст ]");
		if(strlen(text) > 90) return SEM(playerid, "Слишком большое сообщение!");
		{
			string_f("(( [ %s ] %s [%d] сообщает: %s ))", FamI[fam][famName], GetName(playerid), playerid, text);
    		SCMFamily(fam, string);
		}
	}
	return 1;
}

CMD:fleave(playerid)
{
	new string[128], fam = PI[playerid][Family];
	if(GetString(FamI[fam][famCreator], GetName(playerid))) return SEM(playerid, "Лидер не может покинуть семью по собственному желанию!");
	if(!fam) return SEM(playerid, "Вы не состоите в семье!");
	{
	    FSCM(playerid, cWHITE, "Вы успешно покинули семью ''%s'' по собственому желанию!", FamI[fam][famName]);
		string_f("%s | %s %s [%d] покинул(-а) семью по собственому желанию!", FamI[fam][famName],  GetName(playerid), playerid);
		SCMFamily(fam, string);
	}
    return FamilyLeave(playerid);
}

// ============================== [ Команды для администраторов ] =========== //
// ============================== Младший состав с 1 - 4 уровень
// 1 - Уровень (Мл. Модератор)

CMD:alogin(playerid, params[])
{
    if(!GetAdmin(playerid)) return SEM(playerid, CMDOff);
    if(AdminLogin[playerid]) return SPD(playerid, dAdminLoginOff, d_info, "Завершить дежурство!", "{FFFFFF}Вы желаете завержить "SERVER"дежурство"SERVER" как администратор?", ""GREEN"Да", ""RED"Нет");
    {
	    if(GetPVarInt(playerid, "alogin_timer") > gettime()) return SEM(playerid, "Не флуди!");
	    {
		 	new string[100];
			string_f("SELECT * FROM "T_ADMIN" WHERE `aName` = '%s'", AI[playerid][aName]);
			mysql_tquery(mysql, string, "CheckAdminLogin", "is", playerid, AI[playerid][aName]);

		 	SetPVarInt(playerid, "alogin_timer", gettime()+3);
	 	}
 	}
 	return 1;
}

CMD:ahelp(playerid) // Команды для администраторов
{
    if(!GetAdmin(playerid)) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new str[50], string[512];
		string[0] = EOS;
		if(GetAdmin(playerid) >= 1) { format(str, sizeof(str), ""SERVER"1. {FFFFFF}%s\n", Admin_Name[0]), strcat(string, str); }
		if(GetAdmin(playerid) >= 2) { format(str, sizeof(str), ""SERVER"2. {FFFFFF}%s\n", Admin_Name[1]), strcat(string, str); }
		if(GetAdmin(playerid) >= 3) { format(str, sizeof(str), ""SERVER"3. {FFFFFF}%s\n", Admin_Name[2]), strcat(string, str); }
		if(GetAdmin(playerid) >= 4) { format(str, sizeof(str), ""SERVER"4. {FFFFFF}%s\n", Admin_Name[3]), strcat(string, str); }
		if(GetAdmin(playerid) >= 5) { format(str, sizeof(str), ""SERVER"5. {FFFFFF}%s\n", Admin_Name[4]), strcat(string, str); }
		if(GetAdmin(playerid) >= 6) { format(str, sizeof(str), ""SERVER"6. {FFFFFF}%s\n", Admin_Name[5]), strcat(string, str); }
		if(GetAdmin(playerid) >= 7) { format(str, sizeof(str), ""SERVER"7. {FFFFFF}%s\n", Admin_Name[6]), strcat(string, str); }
		if(GetAdmin(playerid) >= 8) { format(str, sizeof(str), ""SERVER"8. {FFFFFF}%s\n", Admin_Name[7]), strcat(string, str); }
		if(GetAdmin(playerid) >= 9) { format(str, sizeof(str), ""SERVER"9. {FFFFFF}%s\n", Admin_Name[8]), strcat(string, str); }
		if(GetAdmin(playerid) >= 10) { format(str, sizeof(str), ""SERVER"10. {FFFFFF}%s\n", Admin_Name[9]), strcat(string, str); }
		// if(GetName(playerid) == FAI[playerid][faName]) strcat(stringer, ""SERVER"Полный доступ - руководство проекта!");
		SPD(playerid, dAhelp, d_list, ""SERVER"Команды администратора", string, "Выбрать", "Закрыть");
	}
	return 1;
}
CMD:ah(playerid) return callcmd::ahelp(playerid);

CMD:ans(playerid, params[])
{
	if(!GetAdmin(playerid)) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new stringerText[144], stringer[512], response[144];
		extract params -> new to_player, string:text[90]; else return SEM(playerid, "Введите: /ans [ ID Игрока ] [ Сообщение ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(strlen(text)>90) return SEM(playerid, "Слишком большой текст!");
		if(GetPVarString(to_player, "RepText", response, sizeof(response)))
		{
		    stringer[0] = EOS;
			format(stringer, sizeof(stringer), "\
			{FFFFFF}Вам ответил администратор!\n\n\
			Ваш(-а) вопрос/жалоба: "SERVER"%s\n\
			{FFFFFF}%i: "SERVER"%s", response, AI[playerid][aNumber], text);
			SPD(to_player, dRepAdmin, d_info, "Ответ администратора!", stringer, "Спасибо!", "");
			SetPVarInt(to_player, "RepAdmin", playerid);
		}
		FSCM(to_player, 0xff9945FF, "Администратор [%i] дал Вам ответ: %s", AI[playerid][aNumber], text);
		stringer[0] = EOS;
		format(stringer, sizeof(stringer), "< REPORT > %s [%i] ответил(-а) игроку %s [%d]:", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player);
		SCMAdmin(0xff9945FF, stringer);
		format(stringerText, sizeof(stringerText), "< REPORT > %s", text);
		SCMAdmin(0xff9945FF, stringerText);
	}
	return 1;
}

CMD:a(playerid, params[])
{
	if(GetAdmin(playerid) < 1) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    if(!AI[playerid][aSetting][7]) return SEM(playerid, "Чат администратора отключен!");
	    extract params -> new string:text[90]; else return SEM(playerid, "Используйте: /a [ Текст ]");
		if(strlen(text) > 128) return SEM(playerid, "Слишком большой текст!");
		{
		    new string[524];
			string_f("[#%i] %s (%i) | %s [%i]:", AI[playerid][aNumber], AdminName(playerid), GetAdmin(playerid), GetName(playerid), playerid); SCMAdmin(cGREEN, string);
			string_f("- %s", text); SCMAdmin(0xFFCC00FF, string);

		    new stringer[512];
			stringer_f("[%i] %s | %s: %s", GetAdmin(playerid), AdminName(playerid), GetName(playerid), text); SCMLogs(1, stringer);
		}
	}
	return 1;
}

CMD:agm(playerid)
{
	if(GetAdmin(playerid) < 1) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(!AdminGM[playerid])
		{
			AdminGM[playerid] = true;
			GetPlayerHealth(playerid, PI[playerid][Health]);

			SetPlayerHealth(playerid, 1000000000);
			FSCM(playerid, -1, "Вы успешно %s режим GM!", (!AdminGM[playerid])?(""WAR"отключили{FFFFFF}"):(""GREEN"включили{FFFFFF}"));
		}
		else
		{
			AdminGM[playerid] = false;
			SetPlayerHealth(playerid, PI[playerid][Health]);
			FSCM(playerid, -1, "Вы успешно %s режим GM!", (!AdminGM[playerid])?(""WAR"отключили{FFFFFF}"):(""GREEN"включили{FFFFFF}"));
		}
	    return 1;
	}
}

CMD:hp(playerid)
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		PI[playerid][Health] = 100;
		SetPlayerHealth(playerid, PI[playerid][Health]);
		SCMInfo(playerid, "Вы выдали себе здоровье.");
 	}
	return 1;
}

CMD:am(playerid)
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		SetPlayerArmour(playerid, 100);
		SCMInfo(playerid, "Вы выдали себе броню.");
 	}
	return 1;
}

CMD:spec(playerid, params[])
{
	if(GetAdmin(playerid) < 1) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /spec [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SEM(playerid, "Вы находитесь в транспорте!");
		// if(GetAdmin(to_player) > 7 && GetAdmin(to_player) < 9) return SEM(playerid, "Введите: /spec [ ID Игрока ]");
		if(GetAdmin(to_player) < 7 && AI[to_player][aSetting][2]) return SEM(playerid, "Данный администратор запретил следить за ним!");
		if(SP[playerid][SpecID] != INVALID_PLAYER_ID) return SEM(playerid, "Вы уже находитесь в режиме наблюдения!");
		if(GetAdmin(to_player) && SP[to_player][SpecID] != INVALID_PLAYER_ID)
		{
			FSCM(playerid, cSERVER, "Данный администратор находиться в наблюдении за %s [%d]", GetName(SP[to_player][SpecID]), SP[to_player][SpecID]);
			return 1;
		}
		SP[playerid][SpecID] = to_player;
		TogglePlayerSpectating(playerid, true);
		StartSpec(playerid, to_player);
	}
	return 1;
}
CMD:sp(playerid, params[]) return callcmd::spec(playerid, params);
CMD:re(playerid, params[]) return callcmd::spec(playerid, params);
CMD:recon(playerid, params[]) return callcmd::spec(playerid, params);

CMD:specoff(playerid)
{
	if(GetAdmin(playerid) < 1) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	if(SP[playerid][SpecID] == INVALID_PLAYER_ID) return SEM(playerid, "Вы не в режиме наблюдения!");
	return StopSpec(playerid);
}
CMD:spoff(playerid) return callcmd::specoff(playerid);
CMD:reoff(playerid) return callcmd::specoff(playerid);
CMD:reconoff(playerid) return callcmd::specoff(playerid);


// 2 - Уровень (Модератор)

CMD:veh(playerid, params[])
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(GetPlayerInterior(playerid) > 0) return SEM(playerid, "В интерьере нельзя создавать транспорт!");
		extract params -> new carid; else return SEM(playerid, "Введите: /veh [ Model TC ]");
		if(!(400 <= carid <= 612)) return SEM(playerid, "ID машины не может быть меньше 400 и больше чем 612");
		if(carid == 538 || carid == 449 || carid == 570 || carid == 569) return SEM(playerid, "Введите: /veh [ Model TC ]");
		// if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255)) return SEM(playerid, "Номер цвета не может быть меньше 0 и больше 255!");
		if(TotalAdminVehicles > 150) return SEM(playerid, "Лимит админ-машин превышен!");
		{
			for(new i; i < 10; i++) PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][i]);
			SelectTextDraw(playerid, cSERVER);

			AdminCarTD[playerid]=carid;

			PlayerTextDrawSetPreviewModel(playerid, SelectCar_Veh_PTD[playerid][2], carid);
			PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][2]);

			new vehicleID[5]; //
			format(vehicleID, sizeof vehicleID, "%i", carid);
			PlayerTextDrawSetString(playerid, SelectCar_Veh_PTD[playerid][6], vehicleID);
			PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][6]);

			PlayerTextDrawSetString(playerid, SelectCar_Veh_PTD[playerid][7], VehStats[carid-400][vName]);
			PlayerTextDrawShow(playerid, SelectCar_Veh_PTD[playerid][7]);

			SetPVarInt(playerid, "SelectCar_Color1", 1);
			SetPVarInt(playerid, "SelectCar_Color2", 1);
		}
 	}
	return 1;
}

CMD:veh1(playerid, params[])
{
	extract params -> new carid; else return SEM(playerid, "Введите: /veh1 [ Model TC ]");
	{
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X,Y,Z);
		X += 2.0;
		GetPlayerFacingAngle(playerid, A);
		PCar[TotalAdminVehicles] = AddStaticVehicle(carid, X, Y, Z, A, 1, 1);
		SetVehicleVirtualWorld(PCar[TotalAdminVehicles], GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(PCar[TotalAdminVehicles], GetPlayerInterior(playerid));
	}
	return 1;
}

CMD:delveh(playerid, params[])
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new string[200], carid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы должны находиться в транспорте!");
		if(!TotalAdminVehicles) return SEM(playerid, "Данный транспорт не был создан администратором!");
		new vehicleid = GetPVarInt(playerid,"VehicleEnters");
		if(!Iter_Contains(adm_vehicles, vehicleid)) return SEM(playerid, "Этот автомобиль не создавал администратор");
	    TotalAdminVehicles--;
	 	Iter_Remove(adm_vehicles, vehicleid);
		string_f( "[A] %s удалил транспорт ID: %d | Model: %d | ТС осталось: %d шт", GetName(playerid), carid, GetVehicleModel(carid), TotalAdminVehicles);
		SCMAdmin(-1, string);
		if(IsValidVehicle(vehicleid))
		{
			DestroyVehicle(vehicleid);
  		}
	}
	return 1;
}

CMD:jet(playerid, params[])
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		// SCM(playerid, cWHITE, "Что бы выдать Джет-Пак игроку: {65C4FD}/getjet [ ID Игрока ]");
	}
	return 1;
}

CMD:vhp(playerid, params[])
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы должны находится в транспорте!");
	{
		RepairVehicle(GetPlayerVehicleID(playerid));
		// SCM(playerid, cWHITE, "Что-бы починить транспорт игроку: {65C4FD}/vhpid [ ID Игрока ]");
	}
	return SCM(playerid, cSERVER, "Ваша машина отремонтирована!");
}

CMD:gotogps(playerid)
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	if(!UseGPS[playerid]) return SEM(playerid, "GPS Навигатор не активен!");
   	else return SetPlayerPos(playerid, markX[playerid], markY[playerid], markZ[playerid]+2.0);
}

CMD:flip(playerid, params[])
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_playerid; else return SEM(playerid, "Введите: /flip [ ID игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		{
			new vehicleid = GetPlayerVehicleID(to_playerid);
			if(vehicleid == 0) return SEM(playerid, "Игрок не в транспорте!");
			{
				new Float:x, Float:y, Float:z, Float:angle;
				GetVehiclePos(vehicleid, x, y, z);
				GetVehicleZAngle(vehicleid, angle);

				SetVehiclePos(vehicleid, x, y, z + 1.5);
				SetVehicleZAngle(vehicleid, angle);
				SCMInfo(playerid, "Транспорт поставлен на колёса.");
			}
		}
	}
	return 1;
}

CMD:up(playerid)
{
    if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
        new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
	    SetPlayerPos(playerid, plocx, plocy, plocz+2);
	}
	return 1;
}

CMD:down(playerid)
{
    if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
        new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
    	SetPlayerPos(playerid, plocx, plocy, plocz-2);
	}
	return 1;
}

CMD:left(playerid)
{
    if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
        new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
    	SetPlayerPos(playerid, plocx, plocy-2, plocz);
	}
	return 1;
}

CMD:right(playerid)
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
        new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
    	SetPlayerPos(playerid, plocx, plocy+2, plocz);
	}
	return 1;
}

CMD:apanel(playerid)
{
    if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new stringer[1024];
		stringer[0] = EOS;
		if(GetAdmin(playerid) >= 2) //
		{
			strcat(stringer, ""GREEN"[2] "SERVER"1. {FFFFFF}Игроки с "SERVER"VIP{FFFFFF} статусом\n");
			strcat(stringer, ""GREEN"[2] "SERVER"2. {FFFFFF}Игроки с "SERVER"Мутом{FFFFFF}\n");
			strcat(stringer, ""GREEN"[2] "SERVER"3. {FFFFFF}Игроки в "SERVER"КПЗ{FFFFFF}\n");
			strcat(stringer, ""GREEN"[2] "SERVER"4. {FFFFFF}Игроки в "SERVER"Тюрьме{FFFFFF}\n");
			strcat(stringer, ""GREEN"[2] "SERVER"5. {FFFFFF}Игроки в "SERVER"Деморгане{FFFFFF}\n");
			strcat(stringer, ""GREEN"[2] "SERVER"6. {FFFFFF}Администраторы в сети\n");
			strcat(stringer, ""GREEN"[2] "SERVER"7. {FFFFFF}Команды для адинистраторов\n");
		}
		if(GetAdmin(playerid) >= 2)  //
		{}
		if(GetAdmin(playerid) >= 3) //
		{}
		if(GetAdmin(playerid) >= 4)  //
		{
			strcat(stringer, ""GREEN"[4] "SERVER"8. {FFFFFF}Настройки администратора\n");
			strcat(stringer, ""GREEN"[4] "SERVER"9. {FFFFFF}Список всех администраторов\n");
		}
		if(GetAdmin(playerid) >= 5) //
		{}
		if(GetAdmin(playerid) >= 6)  //
		{}
		if(GetAdmin(playerid) >= 7) //
		{
			strcat(stringer, ""GREEN"[7] "SERVER"10. {FFFFFF}Настройки организаций\n");
		}
		if(GetAdmin(playerid) >= 8)
		{
			strcat(stringer, ""GREEN"[8] "SERVER"11. {FFFFFF}Рестарт сервер\n");
		}
		if(GetAdmin(playerid) >= 9) //
		{}
		if(GetAdmin(playerid) >= 10)  //
		{}
		if(GetAdmin(playerid) >= 11)  //
		{}
		if(GetAdmin(playerid) >= 12)
		{
			strcat(stringer, ""GREEN"[12] "SERVER"12. {FFFFFF}Панель разработчика - Настройки сервера\n");
		}
		SPD(playerid, dAdminPanel, d_list, ""SERVER"Панель администратора", stringer, "Выбрать", "Закрыть");
	}
	return 1;
}
CMD:ap(playerid) return callcmd::apanel(playerid);

// 3 - Уровень (Ст. Модератор)

CMD:setfuel(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new carid, fuel; else return SCM(playerid, -1, "Используйте: /setfuel [ ID т/с ] [ Кол-во литров ]");
	    if(!GetVehicleModel(carid)) return SEM(playerid, "Данный транспорт не найден!");
	    if(fuel > 500) return SEM(playerid, "Кол-во топливо до 500!");
		{
	        VehicleInfo[carid][vFuel] = fuel;
			new string[124];
			string_f("%s [%i] заправил(-а) транспорт [ID: %i] [Model: %i] на %i литров.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], carid, GetVehicleModel(carid), fuel);
			SCMAdmin(cGREY, string);

	        FSCM(playerid, -1, "Вы успешно заправили данный [ID: %i] [Model: %i] транспорт на %i литров.", carid, GetVehicleModel(carid), fuel);
		}
	}
    return 1;
}

CMD:goto(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Используйте: /goto [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
		    if(GetAdmin(playerid) < 8 && !AI[to_player][aSetting][1]) return SEM(playerid, "Данный администратор запретил к себе ТП!");
		    {
				new Float:x, Float:y, Float:z;
				GetPlayerPos(to_player, x, y, z);
				new world = GetPlayerVirtualWorld(to_player);
				new interior = GetPlayerInterior(to_player);
				if(GetPlayerState(to_player) == 2) SetVehiclePos(GetPVarInt(to_player, "VehicleEnters"), x, y+4, z);
				SetPlayerPos(playerid, x, y+2, z);
				SetPlayerVirtualWorld(playerid, world);
				SetPlayerInterior(playerid, interior);

			    new string[128];
			    string_f("%s [%d] телепортировал%s к игроку %s [%d].", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?("ся"):("ась"), GetName(to_player), to_player);
			    SCMAdmin(cGREY, string);

			    FSCM(playerid, cWHITE, "Вы телепортировались к игроку "SERVER"%s [%d]", GetName(to_player), to_player);
			}
		}
	}
	return 1;
}
CMD:gp(playerid, params[]) return callcmd::goto(playerid, params);

CMD:slap(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Используйте: /slap [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
	    {
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(to_player, slx, sly, slz);
			SetPlayerPos(to_player, slx, sly, slz+5);
			PlayerPlaySound(to_player, 1130, slx, sly, slz+5);

		    FSCM(playerid, cSERVER, "Вы подкинули игрока %s [%d]", GetName(to_player), to_player);
		    FSCM(to_player, cSERVER, "Администратор [%i] подкинул Вас!", AI[playerid][aNumber]);
		}
	}
	return 1;
}

CMD:kick(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player, string:text[90]; else return SEM(playerid, "Введите: /kick [ ID Игрока ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(strlen(text)>90) return SEM(playerid, "Текст слишком большой!");
		{
			new string[144];
			if(GetAdmin(playerid) < GetAdmin(to_player))
			{
			    string_f("%s [%d] попытка отключить %s [%d] от сервера. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], Admin_Name[GetAdmin(to_player)-1], AI[to_player][aNumber], text);
			    SCMAdmin(cGREY, string);
			    return 1;
			}
			string[0] = EOS;
			string_f("%s [%d] отключил(-а) игрока %s [%d] от сервера. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player, text);
			SCMInfoAdmin(cRED, string);
			FSCM(to_player, cRED, "%s [%d] отключил(-а) Вас от сервера. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], text);

			new stringHistory[512];
			format(stringHistory,sizeof(stringHistory),"%s [%d] отключил(-а) Вас от сервера. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], text);
			SetHistory(to_player, stringHistory);

			SavePlayer(to_player);
			Tkick(to_player);
		}
	}
	return 1;
}

CMD:clearchat(playerid)
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    for(new i = 0; i < 50; i++) SCMAll(cWHITE, "");
	    new string[60];
		string_f("%s [%i] очистил чат", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber]);
		SCMAdmin(cGREEN, string);
	}
	return 1;
}
CMD:cc(playerid) return callcmd::clearchat(playerid);

CMD:clearchatplayer(playerid)
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    for(new i = 0; i < 50; i++) SCMAll(cWHITE, "");
	    SCMAll(cWHITE, "Чат очищен администрацией!");
	}
	return 1;
}
CMD:ccp(playerid) return callcmd::clearchatplayer(playerid);

CMD:freeze(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /freeze [ ID Игрока ]");
		if(params[0] == INVALID_PLAYER_ID) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!FrezePlayer[to_player])
	    {
			new string[128];
			string_f( "%s [%i] заморозил(-а) %s игрока %s [%d]", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?(""):("а"), GetName(to_player), to_player);
			SCMAdmin(cGREEN, string);

			FSCM(to_player, cRED, "%s [%i] заморозил(-а) %s Вас", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?(""):("а"));
			Freeze(to_player, false);
			FrezePlayer[to_player] = true;
		}
		else if(FrezePlayer[to_player])
		{
			new string[128];
			string_f( "%s [%i] %s разморозил(-а) %s игрока %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?(""):("а"), GetName(to_player));
			SCMAdmin(cGREEN, string);

			FSCM(to_player, cGREEN, "%s [%i] разморозил(-а) %s Вас", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?(""):("а"));
			Freeze(to_player, true);
			FrezePlayer[to_player] = false;
		}
	}
	return 1;
}
CMD:fz(playerid, params[]) return callcmd::freeze(playerid, params);

/*CMD:unfreeze(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /unfreeze [ ID Игрока ]");
		if(params[0] == INVALID_PLAYER_ID) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!FrezePlayer[to_player]) return SEM(playerid, "Этот игрок не заморожен");
		{
			new string[128];
			string_f( "%s [%i] %s разморозил(-а) %s игрока %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?(""):("а"), GetName(to_player));
			SCMAdmin(cGREEN, string);

			FSCM(to_player, cRED, "%s [%i] разморозил(-а) %s Вас", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], (PI[playerid][Sex]==1)?(""):("а"));
			Freeze(to_player, true);
			FrezePlayer[to_player] = false;
		}
	}
	return 1;
}*/

CMD:alldelveh(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	if(!TotalAdminVehicles) return SEM(playerid, "Администраторы не создавали ни один транспорт!");
	{
		new string[128];
		string_f("[A] %s [%d] удалил(-а) %d все созданные ТС администраторами!", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], TotalAdminVehicles);
		SCMAdmin(cWAR, string);
		foreach(new vehicleid : adm_vehicles)
		{
			if(IsValidVehicle(vehicleid))
			{
			    DestroyVehicle(vehicleid);
			}
		}
		Iter_Clear(adm_vehicles);
		TotalAdminVehicles = 0;
	}
	return 1;
}

CMD:delid(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	extract params -> new carid; else return SEM(playerid, "Введите: /delid [ ID машины ]");
	{
		new string[200], cars = GetVehicleModel(carid);
	    if(!carid) return SEM(playerid, "Данный транспорт не найден!");
		if(!Iter_Contains(adm_vehicles, carid) && !IsVehicleOccupied(cars)) return SetVehicleToRespawn(carid);
		{
			TotalAdminVehicles--;
			string_f("[A] %s [%d] удалил транспорт ID: %d | Model: %d | ТС осталось: %d шт", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], carid, GetVehicleModel(carid), TotalAdminVehicles);
			SCMAdmin(-1, string);
			DestroyVehicle(carid);
		}
	}
	return 1;
}

CMD:check(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /check [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
		    DialogPlayerStats(playerid, to_player);
		}
	}
	return 1;
}


CMD:checkonline(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new string:name[24]; else return SEM(playerid, "Введите: /checkonline [ Имя игрока ]");
		{
			new string[120];
			mysql_format(mysql, string, sizeof(string), "SELECT * FROM `server_online` WHERE `oName`='%s' LIMIT 1", name);
			mysql_tquery(mysql, string, "CheckPlayerOnline", "is", playerid, name);
		}
	}
	return 1;
}

CMD:tpcord(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		// extract params -> new Float:px, Float:py, Float:pz; else
		new Float: px, Float: py, Float: pz;
		if(sscanf(params, "P<,>fff", px, py, pz)) return SEM(playerid, "Используйте: /tpcor X, Y, Z координаты");
	    {
		    SetPlayerPos(playerid, px, py, pz);
		    FSCM(playerid, -1, "Вы были телепортированы {FFFFFF}X:%.1f, Y:%.1f, Z:%.1f",px,py,pz);
		}
	}
    return 1;
}

CMD:vhpid(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	extract params -> new to_player; else return SEM(playerid, "Введите: /vhpid [ ID Игрока ]");
	{
		if(!IsPlayerInAnyVehicle(to_player) || IsTrailerAttachedToVehicle(GetPlayerVehicleID(to_player))) return SEM(playerid, "Игрок должн находится в транспорте!");
		{
			RepairVehicle(GetPlayerVehicleID(to_player));
			FSCM(to_player, cBLUE, "Администартор [%i] починил Вам транспорт!", AI[playerid][aNumber]);
			FSCM(playerid, cBLUE, "Вы успешно починили игроку %s транспорт!", GetName(to_player));
		}
	}
	return 1;
}

CMD:spawn(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
		extract params -> new to_player; else return SEM(playerid, "Введите: /spawn [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(PI[to_player][Jail]) return SpawnPlayer(to_player);
		{
		    new string[256];
		    string[0] = EOS;
			string_f("[A] %s [%i]{FFFFFF} выдал спавн игроку "SERVER"%s [%d]", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player);
			SCMAdmin(cSERVER, string);
			ResetPlayerWeapons(to_player);
			DialogPlayerSpawn(to_player);
		}
	}
	return 1;
}

CMD:sethp(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player, HP; else return SEM(playerid, "Введите: /sethp [ ID Игрока ] [ Кол-во здоровья ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(HP > 100.0) return SEM(playerid, "Вы не можете поставить более 100");
		{
		    PI[to_player][Health] = HP;
			SetPlayerHealth(to_player, PI[to_player][Health]);
			new string[250];
		    string[0] = EOS;
			string_f("[A] %s [%i] выдал(а) игроку %s [%d] %i ед. здоровья.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber],  GetName(to_player), to_player, HP);
			SCMAdmin(cGREEN, string);
		}
	}
	return 1;
}

CMD:setarmour(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player, AM; else return SEM(playerid, "Введите: /setarmour [ ID Игрока ] [ Кол-во брони ] ");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(AM > 100) return SEM(playerid, "Вы не можете поставить более 100!");
		{
			SetPlayerArmour(to_player, AM);
		}
	}
	return 1;
}

CMD:jail(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(sscanf(params,"udds[50]",params[0],params[1],params[2],params[3])) return SEM(playerid, "Используй: /jail [ ID игрока ] [ 1 - КПЗ, 2 - Тюрьма, 3 - Деморган ] [ Время ] [ Причина ]");
		if(!IsPlayerConnected(params[0])) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[params[0]]) return SEM(playerid, PlayerLoginOff);
		if(params[1] <1 || params[1] >3) return SEM(playerid, "Указать можно только 1 - КПЗ, 2 - Тюрьма, 3 - Деморган.");
		if(params[2] <1) return SEM(playerid, "Используй: /jail [ ID игрока ] [ 1 - КПЗ, 2 - Тюрьма, 3 - Деморган ] [ Время ] [ Причина ]");
		if(strlen(params[3])>60) return SEM(playerid, "Не больше 60 символов!");
		if(params[2]>300)return SEM(playerid, "Нельзя выдать наказание больше чем на 300 минут!");
		if(PI[params[0]][JailTime] > 0)return SEM(playerid, "Данный игрок уже наказан!");
		if(GetPVarInt(playerid,"Jaul")>gettime()) return SEM(playerid, "Можно раз в 10 секунд!");
		SetPVarInt(playerid,"Jaul",gettime()+10);
		if(GetAdmin(playerid) < GetAdmin(params[0]))
		{
		    new string[128];
		    string_f( "[A] %s [%d] попытался посадить %s [%i] в %s.",
				Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], Admin_Name[GetAdmin(params[0])-1], AI[params[0]][aNumber], (params[1] == 1)?("КПЗ"):(params[0] == 2)?("Тюрьму"):("Деморган"));
		    SCMAdmin(cGREY, string);
		    return 1;
		}
		if(pCuff[params[0]][pCuffer] != INVALID_PLAYER_ID)
		{
			new cuffer = pCuff[params[0]][pCuffer];
			SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(params[0], 0);
			pCuff[params[0]][pCuffer] = pCuff[params[0]][pCuffee] = pCuff[cuffer][pCuffee] = pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
		}
		PI[params[0]][Jail] = 1;
		PI[params[0]][JailTime] = params[1]*60;
		if(params[1]==1) PI[params[0]][Spawn] = 5; // КПЗ
		if(params[1]==2) PI[params[0]][Spawn] = 6; // Тюрьма
		if(params[1]==3)
		{
			PI[params[0]][Spawn] = 7; // Деморган
			StatusGateDemorgan[params[0]] = true;
			GateDemorgan[params[0]] = CreateDynamicObject(19302, -1765.7485, -2870.0015, 1031.7216, 0.0, 0.0, 0.0, 1, params[0]+2, -1, 300.0, 300.0); //
		}
		SpawnPlayer(params[0]);

		new CMDstr[128];
		format(CMDstr,sizeof(CMDstr),"%s [%i] наказал игрока %s [%i]. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(params[0]), params[0], params[3]);
		SCMInfoAdmin(cRED, CMDstr);

		FSCM(params[0], cRED, "%s [%i] определил(-а) Вас в %s на %s. Причиа: %s",  Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], ConvertTime(params[2]), params[3]);

		new stringHistory[512];
		format(stringHistory,sizeof(stringHistory),"Администратор %s определил(-а) Вас в %s на %s. Причина: %s", GetName(playerid), (params[1]==1)?("КПЗ"):(params[1]==2)?("Тюрьму"):("Деморган"), ConvertTime(PI[params[0]][JailTime] = params[2]*60), params[3]);
		SetHistory(params[0], stringHistory);

		SetPVarInt(params[0],"Jaul",gettime()+10);
	}
	return 1;
}

// Система мероприятий
CMD:menump(playerid)
{
	new string[256], str[250];
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		strcat(string, "Наименование\tСтатус\n");
		format(str, sizeof(str), "Мероприятие\t%s\n", (MP[mpStatsus]==true)?(""RED"Активно"):(""GREEN"Не активно")); strcat(string, str);
		format(str, sizeof(str), "Телепорт на мероприятие\t%s\n", (!MP[mpTP])?(""GREY"Закрыт"):(""GREEN"Открыт")); strcat(string, str);
		strcat(string, ""SERVER"Настройка мероприятия");
		strcat(string, " \n");
		format(str, sizeof(str), "{FFFFFF}Участников:\t"SERVER"%i\n", MP[mpOnline]); strcat(string, str);
		SPD(playerid, dSettingMP, d_tlisth, ""SERVER"Меню мероприятия", string, "Выбрать", "Закрыть");
	}
	return 1;
}
CMD:mnmp(playerid) return callcmd::menump(playerid);

CMD:setmp(playerid)
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    new string[1024], str[250], strComand[24];

		if(MP[mpComands] == 2) format(strComand, sizeof(strComand), "1: SKin - %i, 2: SKin - %i", MP[mpSkin][0], MP[mpSkin][1]);
		else format(strComand, sizeof(strComand), "%i", MP[mpSkin][0]);

		strcat(string, "Наименование\tСтатус\n");
		format(str, sizeof(str), ""SERVER"1. {FFFFFF}Название:\t%s\n", MP[mpName]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"2. {FFFFFF}Проводит:\t%s\n", MP[mpAdmin]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"3. {FFFFFF}Позиция ТП:\t%.02f, %.02f, %.02f\n", MP[mpCord][0], MP[mpCord][1],MP[mpCord][2]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"4. {FFFFFF}Команд:\t%i\n", MP[mpComands]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"5. {FFFFFF}Скин:\t%s\n", strComand); strcat(string, str);
		format(str, sizeof(str), ""SERVER"6. {FFFFFF}Здоровье:\t%f\n", MP[mpHealch]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"7. {FFFFFF}Броня:\t%f\n", MP[mpArmour]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"8. {FFFFFF}Оружие:\t%i\n", MP[mpGun]); strcat(string, str);
		strcat(string, " \n");
		format(str, sizeof(str), ""SERVER"9. {FFFFFF}Тип приза:\t%s\n", (!MP[mpTypePrize])?(""GREEN"Вирты"):(""SERVER"R-Coins")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"10. {FFFFFF}Кол-во:\t%s вирт\n", ConvertCash(MP[mpPrize])); strcat(string, str);
		format(str, sizeof(str), ""SERVER"11. {FFFFFF}Победитель:\t%s\n", MP[mpWinName]); strcat(string, str);
		SPD(playerid, dSetMP, d_tlisth, "Настройки мероприятия!", string, "Выбрать", "Закрыть");
	}
	return 1;
}

CMD:mpc(playerid, params[])
{
	if(GetAdmin(playerid) < 2) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new string:mptext[90]; else return SEM(playerid, "Используйте: /mpc [ Текст ]");
		if(GetString(MP[mpAdmin], GetName(playerid)))
		{
		    new string[256];
		    string_f("Администртор МП [# %i]: %s", AI[playerid][aNumber], mptext);
			SCMMp(cBLUE, string);
		}
	}
	return 1;
}

CMD:getgun(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Используйте: /getgun [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
			new stringer[512], weapons[13][2], strs[46], gunname[32];

			format(strs, sizeof(strs), "Игрок:\t\t\t%s{FFFFFF}", GetName(to_player));
			strcat(stringer, strs);
			for(new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(to_player, i, weapons[i][0], weapons[i][1]);
				GetWeaponName(weapons[i][0], gunname, sizeof(gunname));
				if(weapons[i][0] != 0)
				{
					format(stringer, sizeof(stringer), "%s\n\nОружие:\t\t%s (%d)\nПатроны:\t\t%d", stringer, gunname, weapons[i][0], weapons[i][1]);
				}
			}
			SPD(playerid, dNull, DIALOG_STYLE_MSGBOX, "{FFCC00}Оружие игрока", stringer, "Закрыть", "");
		}
	}
	return 1;
}

CMD:mute(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, time, string:respons[32]; else return SCM(playerid, -1, "Используйте: /mute [ ID игрока ] [ Время ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!(1 <= time <= 300)) return SEM(playerid, "Время: от 1 м. до 300 м. = (5 ч)!");
		if(strlen(respons) > 32) return SEM(playerid, "Причина: До 32 символов!");
		{
			new string[512];
			if(GetAdmin(playerid) < GetAdmin(to_player) /*|| GetString(FAI[to_player][faName], GetName(to_player))*/)
			{
			    string_f("(%i) %s [# %d] попытка заблокировать чат (%i) %s [# %d] на %s м. Причина: %s",
					GetAdmin(playerid), AdminName(playerid), AI[playerid][aNumber], GetAdmin(to_player), AdminName(to_player), AI[to_player][aNumber], ConvertTime(time), respons);
			    SCMAdmin(cGREY, string);

			    // RemoveAdmin(playerid);
				// if(GetString(FAI[playerid][faName], GetName(playerid))) RemoveFullAdmin(playerid);
				return 1;
			}
			PI[to_player][Mute] = 1;
			PI[to_player][MuteTime] = time*60;
			if(!SvMutePlayerStatus(to_player)) SvMutePlayerEnable(to_player); // Блокировка Voice

			string[0] = EOS;
			string_f("%s [# %d] заблокировал-(а) чат %s [%d] на %s. Причина: %s",
				AdminName(playerid), AI[playerid][aNumber], GetName(to_player), to_player, ConvertTime(PI[to_player][MuteTime]), respons);
			SCMInfoAdmin(cRED, string);

			new stringHistory[512];
			format(stringHistory,sizeof(stringHistory),"%s [# %d] заблокировал-(а) Вам чат на %s. Причина: %s", AdminName(playerid), AI[playerid][aNumber], ConvertTime(PI[to_player][MuteTime]), respons);
			SetHistory(to_player, stringHistory);
		}
	}
	return 1;
}

CMD:unmute(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, string:respons[32]; else return SCM(playerid, -1, "Используйте: /unmute [ ID игрока ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!PI[to_player][Mute]) return SEM(playerid, "У игрока нет блокировки чата!");
		if(strlen(respons) > 32) return SEM(playerid, "Причина: До 32 символов!");
		{
			new string[512];

			PI[to_player][Mute] = 0;
			PI[to_player][MuteTime] = 0;
			if(SvMutePlayerStatus(to_player)) SvMutePlayerDisable(to_player); // Разблокировка Voice

			string[0] = EOS;
			string_f("%s [# %d] разблокировал-(а) чат %s [%d]. Причина: %s", AdminName(playerid), AI[playerid][aNumber], GetName(to_player), to_player, respons);
			SCMInfoAdmin(cRED, string);

			new stringHistory[512];
			format(stringHistory,sizeof(stringHistory),"%s [# %d] разблокировал-(а) Вам чат. Причина: %s", AdminName(playerid), AI[playerid][aNumber], respons);
			SetHistory(to_player, stringHistory);
		}
	}
	return 1;
}

// 4 - Уровень (Гл. Модератор)

CMD:setfuelall(playerid, params[])
{
    if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new fuel; else return SCM(playerid, -1, "Используйте: /setfuelall [ Кол-во литров ]");
	    if(fuel > 500) return SEM(playerid, "Кол-во топливо до 500!");
		{
			for(new v; v < MAX_VEHICLES; v ++)
		    {
				VehicleInfo[v][vFuel] = fuel;
			}
			new string[124];
			string_f("%s [%i] заправил(-а) весь транспорт сервера на %i литров.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], fuel);
			SCMAdmin(cGREY, string);
	        FSCM(playerid, -1, "Вы успешно заправили весь транспорт сервера на %i литров.", fuel);
		}
	}
    return 1;
}

CMD:spawncarid(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new carid; else return SEM(playerid, "Используйте: /spawncarid [ ID машины ]");
		if(!GetVehicleModel(carid)) return SEM(playerid, "Данный транспорт не найден!");
		{
			SetVehicleToRespawn(carid);
		}
	}
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new carid; else return SEM(playerid, "Используйте: /gotocar [id транспорта]");
		{
			if(!GetVehicleModel(carid)) return SEM(playerid, "Данный транспорт не найден!");
			if(!IsValidVehicle(carid)) return 0;
			new Float:x, Float:y, Float:z;
			GetVehiclePos(carid, x, y, z);
			SetPlayerPos(playerid, x+2, y+2, z);
			SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(carid));
		    FSCM(playerid, cWHITE, "Вы телепортировались к транспорту ("SERVER"ID: "SERVER"%d{FFFFFF} | "SERVER"Model: "SERVER"%d{FFFFFF})", carid, GetVehicleModel(carid));
		}
	}
	return 1;
}
CMD:gc(playerid, params[]) return callcmd::gotocar(playerid, params);

CMD:getcar(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new carid; else return SEM(playerid,  "Используйте: /getcar [id транспорта]");
		{
			if(!GetVehicleModel(carid)) return SEM(playerid, "Данный транспорт не найден!");
			if(!IsValidVehicle(carid)) return 0;
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
			SetVehiclePos(carid, x-4, y, z+1);
		    FSCM(playerid, cWHITE, "Вы телепортировали к себе транспорт ("SERVER"ID: "SERVER"%d{FFFFFF} | "SERVER"Model: "SERVER"%d{FFFFFF})", carid, GetVehicleModel(carid));
		}
	}
	return 1;
}

CMD:delgun(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Используйте: /delgun [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
			ResetPlayerWeapons(to_player);
		    new string[128];
		    string_f("[A] [#%i] (%i) %s %s бнулил(-а) оружие игроку %s [%i].", AI[playerid][aNumber], GetAdmin(playerid), Admin_Name[GetAdmin(playerid)-1], GetName(playerid), GetName(to_player), to_player);
		    SCMAdmin(cGREY, string);
			FSCM(playerid, cGREEN, "Вы обнулили оружие игроку %s [%i]", GetName(to_player), to_player);
		}
	}
	return 1;
}

CMD:gethere(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
  	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Используйте: /gethere [ ID Игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
		    if(GetAdmin(playerid) < 8 && !AI[to_player][aSetting][0]) return SEM(playerid, "Данный администратор запретил к себе ТП!");
		    {
				new Float:plocx, Float:plocy, Float:plocz;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				new world = GetPlayerVirtualWorld(playerid);
				new interior = GetPlayerInterior(playerid);
				SetPlayerPos(to_player, plocx, plocy+2, plocz);
				SetPlayerVirtualWorld(to_player, world);
				SetPlayerInterior(to_player, interior);
			    new string[128];
			    string_f("Администратор %s [%d] телепортировал игрока %s [%d] к себе.", GetName(playerid), playerid, GetName(to_player), to_player);
			    SCMAdmin(cGREY, string);
				if(!GetAdmin(to_player)) FSCM(to_player, cRED, "Администратор %s телепортировал Вас на собеседование", GetName(playerid));
			    FSCM(playerid, cWHITE,"Вы телепортировали к себе игрока "SERVER"%s [%d]", GetName(to_player), to_player);
			}
		}
	}
	return 1;
}

CMD:spawncar(playerid)
{
    if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
        foreach(new i: Player)
        {
            for(new carid; carid < MAX_VEHICLES; carid ++)
		    {
				if(IsVehicleOccupied(carid)) continue; // Если кто-то в транспорте - Пропускаем
		        if(GetVehicleTrailer(GetPlayerVehicleID(i))) continue; // Если кто-то тянет прицеп - Пропускаем
				{
					SetVehicleToRespawn(carid);
		    	}
			}
		}
	}
    return 1;
}
CMD:scar(playerid) return callcmd::spawncar(playerid);

CMD:spawncarall(playerid, params[])
{
    if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new Float: DiastantCar; else return SEM(playerid, "Введите: /spawncarall [ Радиус ]");
		if(!DiastantCar) return SEM(playerid, "Введите: /spawncarall [ Радиус ]");
		{
			foreach(new i: Player)
			{
				for(new carid; carid < MAX_VEHICLES; carid ++)
				{
					new Float:x, Float:y, Float:z;
					GetVehiclePos(carid, x, y, z);

					if(IsVehicleOccupied(carid)) continue; // Если кто-то в транспорте - Пропускаем
					if(GetVehicleTrailer(GetPlayerVehicleID(i))) continue;// Если кто-то тянет прицеп - Пропускаем
					if(!IsPlayerInRangeOfPoint(playerid, DiastantCar, x,y,z)) continue;
					{
						SetVehicleToRespawn(carid);
					}
				}
			}
			new string[124];
			string_f("%s [%i] заспавнил(-а) транспорт в радиусе %.1f м.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], DiastantCar);
			SCMAdmin(cGREY, string);
		}
	}
	return 1;
}
CMD:scarall(playerid, params[]) return callcmd::spawncarall(playerid, params);

CMD:unjail(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    new CMDstr[128];
		extract params -> new to_player; else return SEM(playerid,  "Используй: /unjail [ ID игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!PI[to_player][Jail])return SEM(playerid, "Игрок не наказан!");
		{
			PI[to_player][Jail] = 0;
			PI[to_player][JailTime] = 0;
			ResetPlayerWeapons(to_player);

			new NameJail[12];
		    switch(PI[to_player][Spawn])
		    {
			    case 5: NameJail = "КПЗ";
			    case 6: NameJail = "Тюрьмы";
			    case 7: NameJail = "Деморгана";
			}
			format(CMDstr,sizeof(CMDstr)," Администратор [%i] выпустил игрока %s [%i] из %s.", AI[playerid][aNumber], GetName(to_player), to_player, NameJail);
			SCMAll(cRED,CMDstr);

			if(PI[to_player][Spawn] == 7)
			{
				GateDemorgan[to_player] = false;
				MoveDynamicObject(GateDemorgan[to_player], -1767.2485, -2870.0015, 1031.7216, 1.5);
				SCM(to_player, cGREEN, "Вы были освобождены из под заключения.");
				SCM(to_player, cYELLOW, "Впредь больше не нарушайте правила сервера!");
				// DestroyDynamicObject(GateDemorgan[playerid]);
			}
			else
			{
				PI[to_player][Spawn] = 1;
				SpawnPlayer(to_player);
			}
			SCM(to_player, cSERVER,"Вы были выпужены на свободу.");
   		}
	}
	return 1;
}

CMD:skin(playerid, params[])
{
	new string[300];
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
 	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, skin; else return SEM(playerid, "Введите: /skin [ ID Игрока ] [ ID скина от 1 до 299 ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!(1 <= skin <= 299)) return SEM(playerid, "Неверный id внешности. Можно установить от 1 до 299");
		{
			SetPlayerSkin(to_player, skin);
		}
		FSCM(playerid, cLIME, "Вы выдали временную внешность №%d игроку %s [%d]", skin, GetName(to_player), to_player);
		FSCM(to_player, cGREEN, "Администратор %s выдал Вам временную внешность №%d", GetName(playerid), skin);
		string_f("Администратор "SERVER"%s {FFFFFF} выдал игроку "SERVER"%s [%d]{FFFFFF} временную внешность "SERVER"№%d{FFFFFF}", GetName(playerid), GetName(to_player), to_player, skin);
		SCMAdmin(cSERVER, string);
	}
	return 1;
}

CMD:msg(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new string:text[124]; else return SEM(playerid, "Используйте: /msg [текст]");
		if(strlen(text) > 124) return SEM(playerid, "Текст слишком большой!");
		{
			new string[254];
			string_f("%s [#%i] сообщает:", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber]);
		 	SCMAll(0xFFCC00FF, string);
			new MSG_Text[126];
			format(MSG_Text, sizeof(MSG_Text), " - %s", text);
		 	SCMAll(0xFFCC00AA, MSG_Text);
		}
	}
	return 1;
}

CMD:pjob(playerid, params[])
{
	new carid = GetPlayerVehicleID(playerid);
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new p_color; else return SEM(playerid, "Используйте: /pjob [ ID покраски ]");
		if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы должны находиться в транспорте!");
		if(!(0 <= p_color <= 5)) return SEM(playerid, "ID покрасочной работы от 0 до 5");
		{
	        ChangeVehiclePaintjob(carid, p_color);
	        FSCM(playerid, cWHITE, "Вы успешно устоновили винил "SERVER"%d{FFFFFF} на транспорт", p_color);
		}
	}
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
 	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
 	{
		extract params -> new to_player, world; else return SEM(playerid, "Используйте: /setvw [ ID Игрока ] [ ID виртуального мира ]");
		{
			FSCM(playerid, cWHITE, "Вы изменили игроку "SERVER"%s [%d]{FFFFFF} виртуальный мир: [ Был: "BLUE"%i{FFFFFF} ] [ Ствл: "GREEN"%i{FFFFFF} ]", GetName(to_player), to_player, GetPlayerVirtualWorld(to_player), world);
			SetPlayerVirtualWorld(to_player, world);
		}
	}
	return 1;
}

CMD:setint(playerid, params[])
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
 	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
 	{
		extract params -> new to_player, ints; else return SEM(playerid, "Используйте: /setint [ ID Игрока ] [ ID интерьера ]");
		{
			FSCM(playerid, cWHITE, "Вы изменили игроку "SERVER"%s [%d]{FFFFFF} интерьер:  [ Был: "BLUE"%i{FFFFFF} ] [ Ствл: "GREEN"%i{FFFFFF} ]", GetName(to_player), to_player, GetPlayerInterior(to_player), ints);
			SetPlayerInterior(to_player, ints);
		}
	}
	return 1;
}

CMD:asettings(playerid)
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new string[1024], str[256];
		strcat(string, "№. Наименование\tСтатус\n");
		format(str, sizeof(str), ""SERVER"1. {FFFFFF}Телепорт себя\t%s\n", (!AI[playerid][aSetting][0])?(""RED"Нет"):(""GREEN"Да")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"2. {FFFFFF}Телепорт к себе\t%s\n", (!AI[playerid][aSetting][1])?(""RED"Нет"):(""GREEN"Да")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"3. {FFFFFF}Следить за собой\t%s\n", (!AI[playerid][aSetting][2])?(""RED"Нет"):(""GREEN"Да")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"4. {FFFFFF}Информация о входе игрока\t%s\n", (!AI[playerid][aSetting][3])?(""RED"Откл"):(""GREEN"Вкл")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"5. {FFFFFF}Информация о выходе игрока\t%s\n", (!AI[playerid][aSetting][4])?(""RED"Откл"):(""GREEN"Вкл")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"6. {FFFFFF}Репорт\t%s\n", (!AI[playerid][aSetting][5])?(""RED"Откл"):(""GREEN"Вкл")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"7. {FFFFFF}Телепорт по карте\t%s\n", (!AI[playerid][aSetting][6])?(""RED"Нет"):(""GREEN"Да")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"8. {FFFFFF}Чат администраторов\t%s\n", (!AI[playerid][aSetting][7])?(""RED"Откл"):(""GREEN"Вкл")); strcat(string, str);
		format(str, sizeof(str), ""SERVER"9. {FFFFFF}Скрывать IP адресса\t%s\n", (!AI[playerid][aSetting][8])?(""RED"Нет"):(""GREEN"Да")); strcat(string, str);
		strcat(string, " \n");
		strcat(string, ""SERVER"Смена пароля");
		SPD(playerid, dAdminSettings, d_tlisth, ""SERVER"Настройки администратора", string, "Выбрать", "<< Назад");
	}
	return 1;
}
CMD:aset(playerid) return callcmd::asettings(playerid);

CMD:shlak(playerid)
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    for(new i; i < 2; i++)
	    {
			if(MostShlakMove[i] == false)
			{
	      		MostShlakMove[i] = true;
		        MoveObject(Shlak[0], 2754.6743, -1381.1575, 23.3802-0.005, 0.007, 0.0, -0.0, 0.0); // Шлакбаум на мосту №1
				MoveObject(Shlak[1], 2740.0195, -1023.6168, 23.4042-0.005, 0.007, 0.0, 0.0, 0.0); // Шлакбаум на мосту №2
				// SCMAll(-1, ""SERVER"Внимание!!!{FFFFFF} Шлакбаумы на мосту г.Южный закрываються!");
				return 1;
			}
			if(MostShlakMove[i] == true)
			{
				MostShlakMove[i] = false;
		        MoveObject(Shlak[0], 2754.6743, -1381.1575, 23.3802+0.005, 0.007, 0.0, -90.0, 0.0); // Шлакбаум на мосту №1
				MoveObject(Shlak[1], 2740.0195, -1023.6168, 23.4042+0.005, 0.007, 0.0, 90.0, 0.0); // Шлакбаум на мосту №2
				// SCMAll(-1, ""SERVER"Внимание!!!{FFFFFF} Шлакбаумы на мосту г.Южный открываються!");
				return 1;
			}
		}
	}
	return 1;
}

CMD:most(playerid)
{
    if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(MostMove == false)
		{
			MostMove = true;
			MoveObject(Most[0],2747.34448242,-1142.90002441,22.6000002+0.002, 0.030, 55.00000000,0.000000,180.000000);
			MoveObject(Most[1],2747.30004883,-1262.00000000,22.6000002+0.002, 0.030, 55.00000000,0.000000,0.000000 );
			// SCMAll(cBLUE, "Внимание! Происходит автоматический подъем разводного моста.");
			return 1;
		}
		if(MostMove == true)
		{
		    MostMove = false;
			MoveObject(Most[0],2747.34448242, -1142.90002441, 21.60000038+0.002, 0.030, 0.000000, 0.000000, 180.000000 );
			MoveObject(Most[1],2747.30004883, -1262.00000000, 21.60000038+0.002, 0.030, 0.000000, 0.000000,0.000000 );
			// SCMAll(cBLUE, "Внимание! Происходит автоматический спуск разводного моста.");
			return 1;
		}
	}
	return 1;
}

CMD:offmute(playerid, params[])
{
    if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new string:mName[24], mTime, string:mReason[32]; else return SEM(playerid, "Введите: /offmute [ Имя Игрока ] [ Время ] [ Причина ]");
		{
			new string[124];
			string_f("SELECT * FROM "T_PLAYER" WHERE `Name` = '%s' LIMIT 1", mName);
			mysql_tquery(mysql, string, "CheckOffMute", "isis", playerid, mName, mTime, mReason);
		}
	}
	return 1;
}


CMD:skick(playerid, params[])
{
	if(GetAdmin(playerid) < 3) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player, string:text[90]; else return SEM(playerid, "Введите: /skick [ ID Игрока ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(strlen(text)>90) return SEM(playerid, "Текст слишком большой!");
		{
			new string[144];
			if(GetAdmin(playerid) < GetAdmin(to_player))
			{
			    string_f("%s [%d] попытка тихо отключить %s [%d] от сервера. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], Admin_Name[GetAdmin(to_player)-1], AI[to_player][aNumber], text);
			    SCMAdmin(cGREY, string);
			    return 1;
			}
			string[0] = EOS;
			string_f("%s [%d] тихо отключил(-а) игрока %s [%d] от сервера. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player, text);
			SCMAdmin(cGREY, string);

			SavePlayer(to_player);
			Tkick(to_player);
		}
	}
	return 1;
}

// ============================== Старший состав с 5 - 8 уровень
// 5 - Уровень (Мл. Администратор)

CMD:givegun(playerid, params[])
{
 	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, ammo; else return SEM(playerid, "Введите: /givegun [ ID Игрока ] [ Кол-во пт. ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		// if(!(1 <= gun <= 47)) return SEM(playerid, "ID оружия от 1 до 47!");
		if(!(1 <= ammo <= 5000)) return SEM(playerid, "Количество патронов от 1 до 5.000!");
		{
			if(!GetPVarInt(playerid, "SelectGuns")) SetPVarInt(playerid, "SelectGuns", 1);
			SetPVarInt(playerid, "SelectGunsPlayer", to_player);
			SetPVarInt(playerid, "SelectGunsAmmo", ammo);

			for(i, 46) PlayerTextDrawShow(playerid, Select_Guns_PTD[playerid][i]);
			SelectTextDraw(playerid, cSERVER);

			new string[54];
			string_f("%s", ConvertCash(ammo));
			PlayerTextDrawSetString(playerid, Select_Guns_PTD[playerid][45], string);
			PlayerTextDrawShow(playerid, Select_Guns_PTD[playerid][45]);
			// GivePlayerWeapon(to_player, gun, ammo);

		}
	}
	return 1;
}

CMD:givevip(playerid, params[])
{
	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, vipday; else return SEM(playerid, "Введите: /givevip [ ID Игрока ] [ Кол-во дней ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		// if(!(1 <= vipday <= 30)) return SEM(playerid, "Кол-во дней от 1 до 30!");
		{
	        // new string[250];
		    if(!PI[to_player][Vip])
			{
				PI[to_player][Vip] = 1;

				SCMInfo(to_player, "Вы успешно приобрели "SERVER"VIP{FFFFFF} статус.");
				SCM(to_player, -1, "Дополнительный возможности можете посмотреть "SERVER"/viphelp");

		        if(PI[to_player][Vip])
				{

				}
			}
			else
			{
				PI[to_player][Vip] = 0;
				SCMInfo(to_player, "Вы успешно сняли "SERVER"VIP{FFFFFF} статус.");
			}
		}
	}
	return 1;
}

CMD:agivelic(playerid, params[])
{
    if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
 	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /agivelic [ ID игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
		    SetPVarInt(playerid, "SetLic", to_player);
			new stringer[200];
		    stringer[0] = EOS;
		    stringer_f("{FFFFFF}Выдать лицензии игроку "SERVER"%s", GetName(to_player));

		    new string[600];
		    string_f("\
				{FFFFFF}Лицензия "SERVER"'A' - %s\n\
				{FFFFFF}Лицензия "SERVER"'B' - %s\n\
				{FFFFFF}Лицензия "SERVER"'C' - %s\n\
				{FFFFFF}Лицензия "SERVER"'D' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Водный' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Воздушный' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Оружие' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Бизнес' - %s\n\
			 	"SERVER"Все лицензии - %s",
			(!PI[to_player][Lic][0])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][1])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][2])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][3])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][4])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][5])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][6])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][7])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][0]&&!PI[to_player][Lic][1]&&!PI[to_player][Lic][2]&&!PI[to_player][Lic][3]&&!PI[to_player][Lic][4]&&
			!PI[to_player][Lic][5]&&!PI[to_player][Lic][6]&&!PI[to_player][Lic][7])?(""WAR"Отсутсвуют"):("{63BD4E}Есть"));
		    SPD(playerid, dGiveLic, d_list, stringer, string, "Выдать", "Закрыть");
		}
	}
	return 1;
}
CMD:agl(playerid, params[]) return callcmd::agivelic(playerid, params);

CMD:ainvite(playerid, params[])
{
	if(GetAdmin(playerid) < 1) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player; else return SEM(playerid, "Введите: /ainvite [ ID Игрока ]");
	    if(PI[to_player][FracLeader]) return SEM(playerid, "Игрок являеться лидером!");
	    if(!GetFrac(to_player))
	    {
			new org[60], allorgs[512];
			for(new i = 1; i <= TOTALFRAC; i ++)
			{
			    format(org, 60, ""SERVER"%i. {ffffff}%s\n", i, FracI[i][fName]);
				strcat(allorgs, org);
			}
			SetPVarInt(playerid, "a_invite_frac", to_player);
			return SPD(playerid, dAdminFracInvite, d_list, ""SERVER"Выберите организацию", allorgs, "Выбрать", "Отмена");
		}
		else
		{
            FSCM(to_player, 0xff0000AA, "Вы успешно покинули организацию ''%s'' по собственному желанию.", FracI[GetFrac(to_player)][fName]);
			FracLeave(to_player);
		}
	}
	return 1;
}

CMD:auval(playerid, params[])
{
	new stringHistory[512];
	extract params -> new to_player, string:reason[32]; else return SEM(playerid, "Введите: /auval [ ID Игрока ] [ Причина ]");
	if(strlen(reason) > 32) return SEM(playerid, "Кол-во сиволов для Причины до 32 - х символов!");
	if(!GetString(FracI[FRAC_AO][fLeader], "The Stats"))
	{
		format(stringHistory,sizeof(stringHistory),"%s [%s] %s уволил(-а) Вас из организации. Причина: %s", GetRangName[GetFrac(playerid)][PI[playerid][FracRang]-1], FracI[GetFrac(playerid)][fName], GetName(playerid), reason);
	}
	else if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	{
		if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
		if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
		{
			format(stringHistory,sizeof(stringHistory),"%s [%d] уволил(-а) Вас из организации [%s]. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], FracI[GetFrac(playerid)][fName], reason);
		}
	}
	SetHistory(to_player, stringHistory);
	return FracLeave(to_player);
}

CMD:arang(playerid, params[])
{
	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /arang [ ID Игрока ]");
		{
		    if(!GetFrac(to_player) && to_player == playerid) return SEM(playerid, "Вы не состоите в организации! Введите "SERVER"/ainvite{FFFFFF} для вступление в организацию.");
			else if(!GetFrac(to_player)) return SEM(playerid, "Игрок не состоит в организации!");
	 		// if(PI[playerid][FracLeader]) return SEM(playerid, "Вы являетесь лидером!");
			new num=1, string[1024];
			for(new i; i < 9; i ++)
			{
				string_f("%s{FFFFFF}Ранг: "SERVER"%d{FFFFFF} - Должность: "SERVER"%s\n", string, num, GetRangName[GetFrac(to_player)][num-1]);
				num++;
				SetPVarInt(playerid, "a_frac_rang", to_player);
			}
			SPD(playerid, dAdminFracRang, d_list, ""SERVER"Выберите долность", string, "Выбрать", "Отмена");
		}
	}
	return 1;
}

CMD:ban(playerid, params[])
{
	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, days, string:reason[32]; else return SEM(playerid, "Введите: /ban [ ID игрока ] [ Кол-во дней ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(days > 30 || days < 1)  return SEM(playerid, "Кол-во дней от 1-го до 30-ти!");
		if(!strlen(reason) || strlen(reason) > 32) return SEM(playerid, "Текст причины указан слишком большой!");
		// if(status != 0 || status != 1) return SEM(playerid, "Статус: 1 - Обнуление, 0 - Без обнуления!");
		{
			new string[512], stringban[512];
			if(GetAdmin(playerid) < GetAdmin(to_player))
			{
				string[0] = EOS;
			    string_f("%s [%d] попытка заблокировать %s [%d] на %i д. Причина: %s", AdminName(playerid), AI[playerid][aNumber], Admin_Name[GetAdmin(to_player)-1], AI[to_player][aNumber], days, reason);
			    SCMAdmin(cGREY, string);
			    RemoveAdmin(playerid);
				if(GetString(FAI[playerid][faName], GetName(playerid))) RemoveFullAdmin(playerid);
				return Tkick(playerid);
			}
			string[0] = EOS;
			string_f("%s [%i] заблокировал(-а) игрока %s на %d д. Причина: %s",
			AdminName(playerid), AI[playerid][aNumber], GetName(to_player), days, reason);
			SCMInfoAdmin(cRED, string);

			stringban[0]=EOS;
			format(stringban, sizeof(stringban), "INSERT INTO "T_BAN" \
				(bName, bAdmin, bData, bReason, bDay, bUnBanData) VALUES \
				('%s', '%s', NOW(), '%s', %d, NOW() + INTERVAL %i DAY)",
			GetName(to_player), GetName(playerid), reason, days, days);
			mysql_query(mysql, stringban);

			if(GetFrac(to_player)) FracLeave(to_player);
            if(GetAdmin(to_player)) RemoveAdmin(to_player);
			if(GetString(FAI[to_player][faName], GetName(to_player))) RemoveFullAdmin(to_player);

			new stringHistory[512];
			format(stringHistory,sizeof(stringHistory),"%s [%i] заблокировал(-а) Вас на %s д. Причина: %s", AdminName(playerid), AI[playerid][aNumber], days, reason);
			SetHistory(to_player, stringHistory);

			if(!GetString(AcI[playerid][acVkID], "NULL"))
			{
				new stringVK[124];
				format(stringVK, sizeof(stringVK),"%s [%i] заблокировал(-а) Вас на %s д. Причина: %s", AdminName(playerid), AI[playerid][aNumber], days, reason);
				SCMVk(AcI[to_player][acVkID], stringVK);
			}
			Tkick(to_player);
		}
	}
	return 1;
}

CMD:unban(playerid, params[])
{
	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new string:BanName[24],string:reason[32]; else return SEM(playerid, "Введите: /unban [ Имя игрока ] [ Причина ]");
		{
			new query[256];
   			format(query, sizeof(query), "SELECT * FROM "T_BAN" WHERE `bName` = '%s'", BanName);
    		mysql_tquery(mysql, query, "CheckBanAcc", "iss", playerid, BanName, reason);
		}
	}
	return 1;
}

CMD:banlist(playerid)
{
	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		mysql_tquery(mysql, "SELECT * FROM "T_BAN"", "CheckBanList", "i", playerid);
	}
	return 1;
}

CMD:alock(playerid, params[])
{
	if(GetAdmin(playerid) < 5) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new Float:x, Float:y, Float:z;
	    for(new v; v < MAX_VEHICLES; v ++)
		{
		    GetVehiclePos(v, x, y, z);
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		    {
		        new model = GetVehicleModel(v);
		        if(!model) break;
				if(!GetDoors(v))
				{
					SetLock(v, true);
					GameTextForPlayer(playerid, "~r~транспорт закрыт", 2000, 3);
					MeAction(playerid, "достал ключи и закрыл транспорт");
					PlayerPlaySound(playerid, 24600, 0.0, 0.0, 0.0);
				}
				else
				{
				    SetLock(v, false);
					GameTextForPlayer(playerid, "~g~транспорт открыт", 2000, 3);
					MeAction(playerid, "достал ключи и открыл транспорт");
					PlayerPlaySound(playerid, 24600, 0.0, 0.0, 0.0);
				}
				break;
			}
		}
	}
	return 1;
}

// 6 - Уровень (Администратор)

CMD:atakelic(playerid, params[])
{
    if(GetAdmin(playerid) < 6) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
 	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player; else return SEM(playerid, "Введите: /atakelic [ ID игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		{
		    SetPVarInt(playerid, "TakeLic", to_player);
			new stringer[200];
		    stringer[0] = EOS;
		    format(stringer, sizeof(stringer), "{FFFFFF}Забрать лицензии у "SERVER"%s", GetName(to_player));
			new string[600];
		    format(string, sizeof(string), "\
				{FFFFFF}Лицензия "SERVER"'A' - %s\n\
				{FFFFFF}Лицензия "SERVER"'B' - %s\n\
				{FFFFFF}Лицензия "SERVER"'C' - %s\n\
				{FFFFFF}Лицензия "SERVER"'D' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Водный' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Воздушный' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Оружие' - %s\n\
				{FFFFFF}Лицензия "SERVER"'Бизнес' - %s\n\
			 	"SERVER"Все лицензии - %s",
			(!PI[to_player][Lic][0])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][1])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][2])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][3])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][4])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][5])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][6])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][7])?(""WAR"Отсутсвует"):("{63BD4E}Есть"),
			(!PI[to_player][Lic][0]&&!PI[to_player][Lic][1]&&!PI[to_player][Lic][2]&&!PI[to_player][Lic][3]&&!PI[to_player][Lic][4]&&
			!PI[to_player][Lic][5]&&!PI[to_player][Lic][6]&&!PI[to_player][Lic][7])?(""WAR"Отсутсвуют"):("{63BD4E}Есть"));
		    SPD(playerid, dTakeLic, d_list, stringer, string, "Забрать", "Закрыть");
		}
	}
	return 1;
}
CMD:atl(playerid, params[]) return callcmd::atakelic(playerid, params);


CMD:settime(playerid, params[])
{
	if(GetAdmin(playerid) < 6) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new time; else return SEM(playerid, "Введите: /settime [ Время от 0 до 23 ч. ]");
		if(!(0 <= time <= 23)) return SEM(playerid, "Время от 0 до 23!");
		{
			SetWorldTime(time);
			new string[128];
			string_f( "Администратор %s [%d] изменил время на %i ч", GetName(playerid), playerid, time);
			SCMAdmin(cGREEN, string);
		}
	}
	return 1;
}

CMD:banoff(playerid, params[])
{
	if(GetAdmin(playerid) < 6) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new banStatus, string:newName[24], banDay, string: banReason[32]; else return SEM(playerid, "Введите: /banoff [ Статус: 0 - Без обнуления, 1 - С обнелением ] [ Имя игрока ] [ Кол-во дней (1-30) ] [ Причина ]");
		if(!strlen(newName) || strlen(newName) > 24) return SEM(playerid, "Используйте Имя игрока");
		if(!(1 <= banDay <= 30) || banDay != 2000) return SEM(playerid, " Кол-во дней (1-30 или 2.000)");
		{
			new query[120];
			format(query, sizeof(query), "SELECT * FROM "T_BAN" WHERE `bName` = '%s'", newName);
			mysql_tquery(mysql, query, "CheckPlayerOffBan", "iisis", playerid, banStatus, newName, banDay, banReason);
		}
	}
	return 1;
}

// 7 - Уровень (Ст. Администратор)

CMD:awarn(playerid, params[])
{
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new string[512];
		extract params -> new to_player, string:reason[32]; else return SEM(playerid, "Введите: /awarn [ ID администратора ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(strlen(reason) > 32) return SEM(playerid, "Слишком большой текст!");
		{
		    AI[to_player][aWarn] ++;

			FSCM(playerid, -1, "Вы успешно выдали выговор %s %s", Admin_Name[GetAdmin(to_player)-1], GetName(to_player));
			FSCM(to_player, -1, "Вы получили выговор от %s %s по причине %s", Admin_Name[GetAdmin(playerid)-1], GetName(playerid), reason);
			string[0] = EOS;
			string_f("%s %s получил(а) выговор от %s %s. Причина: %s", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), Admin_Name[GetAdmin(playerid)-1], GetName(playerid), reason);
			SCMAdmin(cGREEN, string);

			if(AI[to_player][aWarn] >= 3)
			{
				string[0] = EOS;
				string_f("%s %s был(-а) снят(-а) с поста администратора. Причина: Выговор %i из 3", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), AI[to_player][aWarn], reason);
				SCMAdmin(cGREEN, string);

            	RemoveAdmin(to_player);
				return 1;
			}
		}
	}
	return 1;
}

CMD:aunwarn(playerid, params[])
{
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new string[512];
		extract params -> new to_player, string:reason[32]; else return SEM(playerid, "Введите: /aunwarn [ ID администратора ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(strlen(reason) > 32) return SEM(playerid, "Слишком большой текст!");
		{
		    AI[to_player][aWarn] --;
			FSCM(playerid, -1, "Вы успешно сняли выговор %s %s", Admin_Name[GetAdmin(to_player)-1], GetName(to_player));
			FSCM(to_player, -1, "Вам снял(а) выговор %s %s по причине %s", Admin_Name[GetAdmin(playerid)-1], GetName(playerid), reason);
			string[0] = EOS;
			string_f("%s %s снял(а) выговор с %s %s. Причина: %s", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), Admin_Name[GetAdmin(playerid)-1], GetName(playerid), reason);
			SCMAdmin(cGREEN, string);
		}
	}
	return 1;
}

CMD:add(playerid)
{
    if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	return DialogAddMenu(playerid);
}

// Система подарков
CMD:add_podarok(playerid)
{
    if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    new Float: p_pos[3];	    
	    new RandomPodarok[5] = {19054,19055,19056,19057,19058};
		new podarok = random(sizeof(RandomPodarok));

	    GetPlayerPos(playerid, p_pos[0], p_pos[1], p_pos[2]);
		SetPlayerPos(playerid, p_pos[0]+2, p_pos[1]+2, p_pos[2]);

        TOTALPODARKI++;

        new stringer[512];
        stringer_f("INSERT INTO "T_PODARKI" (podID, podPic, podPosX, podPosY, podPosZ, podWorld, podInt) VALUES (%i, %i, %.2f, %.2f, %.2f, %i, %i)",
		TOTALPODARKI, RandomPodarok[podarok], p_pos[0], p_pos[1], p_pos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        mysql_query(mysql, stringer);

        Podarok[TOTALPODARKI][podID] = TOTALPODARKI;
		Podarok[TOTALPODARKI][podPic] = RandomPodarok[podarok];
		Podarok[TOTALPODARKI][podStatus] = 0;
		Podarok[TOTALPODARKI][podPosX] = p_pos[0];
		Podarok[TOTALPODARKI][podPosY] = p_pos[1];
		Podarok[TOTALPODARKI][podPosZ] = p_pos[2];
		Podarok[TOTALPODARKI][podWorld] = GetPlayerVirtualWorld(playerid);
		Podarok[TOTALPODARKI][podInt] = GetPlayerInterior(playerid);

		FSCM(playerid, cGREEN, "[ ИНФОРМАЦИЯ ]{FFFFFF} Подарок "SERVER"%i из %i{FFFFFF} успешно создан!", TOTALPODARKI, MAX_PODARKI);
		picPodarok[TOTALPODARKI] = CreateDynamicPic(Podarok[TOTALPODARKI][podPic], 23, Podarok[TOTALPODARKI][podPosX], Podarok[TOTALPODARKI][podPosY], Podarok[TOTALPODARKI][podPosZ], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	}
	return 1;
}

CMD:del_podarki(playerid)
{
    if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    if(!TOTALPODARKI) return SEM(playerid, "Подарков на сервере для удаления нет!");
	{
     	for(new i = 1; i <= TOTALPODARKI; i++)
		{
			foreach(new p: Player)
			{ 
				if(SerP[playerid][spStatus][p]==1) 
				{
					SerP[playerid][spStatus][p] = 0; 
				}
			}
			DestroyDynamicPickup(picPodarok[i]);
            mysql_query(mysql, "UPDATE "T_PODAROK" SET `spStatus` = '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0' WHERE 0");
	    	mysql_query(mysql, "TRUNCATE "T_PODARKI"");
		}
		FSCM(playerid, -1, "Подарки %i из %i успешно удалены с сервера!", TOTALPODARKI, MAX_PODARKI);
	}
	return 1;
}

CMD:add_seat(playerid) // Система посадочных мест
{
    if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		TOTALDOWNS++;
		SeatI[TOTALDOWNS][SeatDownID] = TOTALDOWNS;

		GetPlayerPos(playerid, SeatI[TOTALDOWNS][SeatDownX], SeatI[TOTALDOWNS][SeatDownY], SeatI[TOTALDOWNS][SeatDownZ]);
		GetPlayerFacingAngle(playerid, SeatI[TOTALDOWNS][SeatDownA]);

		new str[254];
		format(str, sizeof(str), "insert into "T_SEAT" (`SeatX`, `SeatY`, `SeatZ`, `SeatA`) values (%1.f, %1.f, %1.f, %1.f)", SeatI[TOTALDOWNS][SeatDownX], SeatI[TOTALDOWNS][SeatDownY], SeatI[TOTALDOWNS][SeatDownZ], SeatI[TOTALDOWNS][SeatDownA]);
		mysql_tquery(mysql, str);

		SeatI[TOTALDOWNS][SeatInfo] = CreateDynamic3DTextLabel("Сесть\n\t{afafaf}ALT", cSERVER, SeatI[TOTALDOWNS][SeatDownX], SeatI[TOTALDOWNS][SeatDownY], SeatI[TOTALDOWNS][SeatDownZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		SCM(playerid, cSERVER, "[ Успешно ]");
	}
	return 1;
}

CMD:setweather(playerid, params[])
{
    if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_weather; else return SEM(playerid, "Введите: /setweather [id погоды]");
		if(!(0 <= to_weather <= 36)) return SEM(playerid, "ID погоды может быть от 0 до 36");
		{
			SetWeather(to_weather);

			new string[128];
		    string[0] = EOS;
			string_f(""SERVER"%s{FFFFFF} | %s изменил погоду", Admin_Name[GetAdmin(playerid)-1], GetName(playerid), playerid);
			SCMAdmin(cGREEN, string);
		}
	}
	return 1;
}

CMD:adminlevel(playerid, params[])
{
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_playerid, admLevel; else return SEM(playerid, "/adminlevel [ ID администратора ] [ Уровень администратора ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(GetAdmin(playerid) < 8 && !(1 <= admLevel <= 7)) return SEM(playerid, "Укажите уровень администратора с 1-го по 6-ой!");
		if(FAI[playerid][faName] && !(1 <= admLevel <= 10)) return SEM(playerid, "Укажите уровень администратора с 1-го по 12-ый!");
		if(GetAdmin(to_playerid) == admLevel) return SEM(playerid, "Этот администратор уже имеет данный уровень!");
		{
			new stringer[124];
   			stringer[0] = EOS;
			if(GetAdmin(to_playerid) > admLevel)
			{
				stringer_f("%s [%i] был(-а) понижен(-а) на должнасть %s.", AdminName(GetAdmin(to_playerid)), AI[to_playerid][aNumber], AdminName(admLevel));
				FSCM(playerid, cBLUE, "Вы понизили %s [%d] на должность уровня %d - %s.", AdminName(GetAdmin(to_playerid)), AI[to_playerid][aNumber], admLevel, AdminName(admLevel));
				FSCM(to_playerid, cBLUE, "Вы были понижены %s [%i] на должность уровня %d - %s.", AdminName(GetAdmin(playerid)), AI[playerid][aNumber], admLevel, AdminName(admLevel));
			}
			else
		 	{
				stringer_f("%s [%i] был(-а) повышен(-а) на должнасть %s.", AdminName(GetAdmin(to_playerid)), AI[to_playerid][aNumber], AdminName(admLevel));
				FSCM(playerid, cBLUE, "Вы повысили %s [%d] на должность уровня %d - %s.", AdminName(GetAdmin(to_playerid)), AI[to_playerid][aNumber], admLevel, AdminName(admLevel));
				FSCM(to_playerid, cBLUE, "Вы были повышены %s [%i] на должность уровня %d - %s.", AdminName(GetAdmin(playerid)), AI[playerid][aNumber], admLevel, AdminName(admLevel));
			}
			SCMAdmin(cGREEN, stringer);

			GetAdmin(to_playerid) = admLevel;

			new stringAdmin[150];
			stringAdmin[0] = EOS;
			format(stringAdmin, sizeof(stringAdmin), "UPDATE "T_ADMIN" SET `aLevel` = '%i' WHERE `aName` = '%s'", GetAdmin(to_playerid), GetName(to_playerid));
			mysql_query(mysql, stringAdmin);
		}
	}
	return 1;
}

CMD:removeadmin(playerid, params[])
{
	new Names[MAX_PLAYER_NAME];
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    if(sscanf(params, "s[24]", Names)) return SEM(playerid, "Используй: /setadmin [ Имя администратора ]");
	    {
			new string[100];
			string_f("SELECT * FROM "T_ADMIN" WHERE `aName` = '%s' LIMIT 1", Names);
			mysql_tquery(mysql, string, "CheckAdminName", "is", playerid, Names);
		}
	}
	return 1;
}

CMD:setstatsplayer(playerid, params[])
{
    if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new player:to_playerid; else return SEM(playerid, "/setstatsplayer [ ID игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		{
			new stringer[1024], string[100];
		    string_f("{FFFFFF}Изменить статистику игроку "SERVER"%s [%d]{FFFFFF}", GetName(to_playerid), to_playerid);
			stringer[0] = EOS;
		    strcat(stringer, ""SERVER"1. {FFFFFF} Выдать уровень - (Level)\n");
			strcat(stringer, ""SERVER"2. {FFFFFF} Изменить пол\n");
			strcat(stringer, ""SERVER"3. {FFFFFF} Выдать законку\n");
			strcat(stringer, ""SERVER"4. {FFFFFF} Выдать розыск\n");
			strcat(stringer, ""SERVER"5. {FFFFFF} Указать работу\n");
			strcat(stringer, ""SERVER"6. {FFFFFF} Снять розыск\n");
			strcat(stringer, ""SERVER"7. {FFFFFF} Снять наручники\n");
			strcat(stringer, ""SERVER"8. {FFFFFF} Выдать все скиллы на оружие\n");
			strcat(stringer, ""SERVER"9. {FFFFFF} Выдать Паспорт\n");
			strcat(stringer, ""SERVER"10. {FFFFFF} Выдать Мед карту\n");
			strcat(stringer, ""SERVER"11. {FFFFFF} Выдать военный билет\n");
			SPD(playerid, dSetStats, d_list, string, stringer, "Выбрать", "Закрыть");
			SetPVarInt(playerid, "SetStats", to_playerid);
		}
	}
	return 1;
}
CMD:ssp(playerid, params[]) return callcmd::setstatsplayer(playerid, params);

CMD:setleader(playerid, params[])
{
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new player:to_playerid; else return SEM(playerid, "/setleader [ ID игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		if(IsPlayerInAnyVehicle(to_playerid)) return SEM(playerid, "Игрок находиться в транспорте!");
		if(PI[to_playerid][Level] < 7) return SEM(playerid, "У игрока нету 7 уровня!");
		if(!TOTALFRAC) return SEM(playerid, "В данный момент нет организаций!");
		if(PI[to_playerid][FracLeader]) return FracLeave(to_playerid);
		{
			// if(GetAdmin(params[0]) || GetAdmin(params[0]) <= 5) return SEM(playerid, "Администратора запрещено ставить на пост лидера!");
			new string[600], str[120], stringLeader[54];
			strcat(string, "№. Организация\tЛидер\n");
			for(new f = 1; f <= TOTALFRAC; f ++)
			{
				if(GetString(FracI[f][fLeader], "The Stats")) stringLeader = ""GREY"-";
				else format(stringLeader, 54, ""SERVER"%s", FracI[f][fLeader]);

				format(str, sizeof(str), ""SERVER"%i.{FFFFFF} %s\t%s\n", FracI[f][fID], FracI[f][fName], stringLeader); strcat(string, str);
			}
			SPD(playerid, dSetLeader, d_tlisth, ""SERVER"назначить на пост лидера орагнизации", string, "Далее >>", "Выйти");
			InviteLeader[playerid] = to_playerid;
		}
	}
	return 1;
}

CMD:fracfind(playerid)
{
    new	str[1024], AO,PPS,DPS,FSB,VH,SMP,SMI,OPG1,OPG2,MAFIA1,MAFIA2,Full_Goss,Full_All;
    foreach(new i : Player)
	{
        switch(PI[i][Frac])
		{
            case FRAC_AO: AO++;
            case FRAC_PPS: PPS++;
            case FRAC_DPS: DPS++;
            case FRAC_FSB: FSB++;
            case FRAC_VH: VH++;
            case FRAC_SMP: SMP++;
            case FRAC_SMI: SMI++;
            case FRAC_OPGB: OPG1++;
            case FRAC_OPGY: OPG2++;
            case FRAC_MAFIAH: MAFIA1++;
            case FRAC_MAFIAR: MAFIA2++;
        }
    }
	Full_Goss = AO+PPS+DPS+FSB+VH+SMP+SMI;
	Full_All = AO+PPS+DPS+FSB+VH+SMP+SMI+OPG1+OPG2+MAFIA1+MAFIA2;

	new stringer[1024];
	stringer[0] = EOS;
	if(!GetAdmin(playerid) && PI[playerid][FracLeader] == FRAC_AO)
	{
	    format(str,sizeof(str),"1. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_AO][fName], AO); strcat(stringer,str);
	    format(str,sizeof(str),"2. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_PPS][fName], PPS); strcat(stringer,str);
	    format(str,sizeof(str),"3. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_DPS][fName], DPS); strcat(stringer,str);
	    format(str,sizeof(str),"4. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_FSB][fName], FSB); strcat(stringer,str);
	    format(str,sizeof(str),"5. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_VH][fName], VH); strcat(stringer,str);
	    format(str,sizeof(str),"6. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_SMP][fName], SMP); strcat(stringer,str);
	    format(str,sizeof(str),"7. %s: "SERVER"%d чел. {FFFFFF}\n\n", FracI[FRAC_SMI][fName], SMI); strcat(stringer,str);
		format(str,sizeof(str),"Онлайн: {FFCC00}%d чел.", Full_Goss); strcat(stringer,str);
	}
	else if(GetAdmin(playerid) >= 5)
	{
		if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
		if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
		{
			format(str,sizeof(str),"1. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_AO][fName], AO); strcat(stringer,str);
			format(str,sizeof(str),"2. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_PPS][fName], PPS); strcat(stringer,str);
			format(str,sizeof(str),"3. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_DPS][fName], DPS); strcat(stringer,str);
			format(str,sizeof(str),"4. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_FSB][fName], FSB); strcat(stringer,str);
			format(str,sizeof(str),"5. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_VH][fName], VH); strcat(stringer,str);
			format(str,sizeof(str),"6. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_SMP][fName], SMP); strcat(stringer,str);
			format(str,sizeof(str),"7. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_SMI][fName], SMI); strcat(stringer,str);
			format(str,sizeof(str),"8. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_OPGB][fName], OPG1); strcat(stringer,str);
			format(str,sizeof(str),"9. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_OPGY][fName], OPG2); strcat(stringer,str);
			format(str,sizeof(str),"10. %s: "SERVER"%d чел. {FFFFFF}\n", FracI[FRAC_MAFIAR][fName], MAFIA1); strcat(stringer,str);
			format(str,sizeof(str),"11. %s: "SERVER"%d чел. {FFFFFF}\n\n", FracI[FRAC_MAFIAH][fName], MAFIA2); strcat(stringer,str);
		    format(str,sizeof(str),"Общий онлайн: {FFCC00}%d чел.", Full_All); strcat(stringer,str);
	    }
	}
    return SPD(playerid, dNull, d_info, ""SERVER"Онлайн организаций", stringer, "Закрыть", "");
}
CMD:ff(playerid) return callcmd::fracfind(playerid);

CMD:askin(playerid, params[])
{
	new string[300];
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
 	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_player, skin; else return SEM(playerid, "Введите: /askin [ ID Игрока ] [ ID скина от 1 до 311 ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!(1 <= skin <= 311)) return SEM(playerid, "Неверный id внешности. Можно установить от 1 до 311");
		{
			PI[to_player][Skin] = skin;
			SetPlayerSkin(to_player, skin);
			update_int_mysql(T_PLAYER, "Skin", PI[playerid][Skin], "ID", PI[playerid][ID]);
		}
		FSCM(playerid, cLIME, "Вы выдали постоянную внешность №%d игроку %s [%d]", skin, GetName(to_player), to_player);
		FSCM(to_player, cGREEN, "%s [%i] выдал Вам постоянную внешность №%d", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], skin);
		string_f("%s "SERVER"[%i] {FFFFFF} выдал игроку "SERVER"%s [%d]{FFFFFF} постоянную внешность "SERVER"№%d{FFFFFF}", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player, skin);
		SCMAdmin(cWHITE, string);
	}
	return 1;
}

CMD:resetmoney(playerid, params[])
{
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
		extract params -> new to_player, type, string:reason[90]; else return SEM(playerid, "Введите: /resetmoney [ ID Игрока ] [ Значение обнуление ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(strlen(reason)>90) return SEM(playerid, "Причина: К-во символов от 1 до 32");
		if(!(1 <= type <= 2)) return SEM(playerid, "Выберите значение: {FFFFFF}1 = Наличные, 2 = Деньги в банке");
		{
			new string[200];
			if(type == 1)
			{
				if(!GetMoney(to_player)) return SEM(playerid, "У игрока нет денег на руках для обнуления!");
				if(GetAdmin(playerid) < GetAdmin(to_player))
				{
				    string_f("[A] %s [%d] попытался обнулить наличные деньги [A] %s [%d].", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], Admin_Name[GetAdmin(to_player)-1], AI[to_player][aNumber]);
				    SCMAdmin(cGREY, string);
				    return 1;
				}
				GetMoney(to_player) = 0;
				GiveMoney(to_player, GetMoney(to_player));
				FSCM(to_player, cRED, "[A] %s [%d] обнулил Вам наличные деньги: Причина - %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], reason);
				string_f("[A] %s [%d] обнулил игроку %s [%d] наличные деньги: Причина - %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player, reason);
				SCMAdmin(cSERVER, string);
			}
			if(type == 2)
			{
				if(!PI[to_player][Bank]) return SEM(playerid, "У игрока нет денег в банке для обнуления!");
				if(GetAdmin(playerid) < GetAdmin(to_player))
				{
				    string_f("[A] %s [%d] попытался обнулить банковские деньги [A] %s [%d].", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], Admin_Name[GetAdmin(to_player)-1], AI[to_player][aNumber]);
				    SCMAdmin(cGREY, string);
				    return 1;
				}
				PI[to_player][Bank] = 0;
				GiveBank(to_player, PI[to_player][Bank]);
				FSCM(to_player, cRED, "[A] %s [%d] обнулил Вам банковские деньги. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], reason);
				string_f("[A] %s [%d] обнулил игроку %s [%d] банковские деньги: Причина - %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], GetName(to_player), to_player, reason);
				SCMAdmin(cSERVER, string);
			}
		}
	}
	return 1;
}

CMD:aintlist(playerid)
{
	if(GetAdmin(playerid) < 10 && !FAI[playerid][faName]) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new string[1024];
		strcat(string, ""SERVER"1. {FFFFFF}Работы\n");
		strcat(string, ""SERVER"2. {FFFFFF}Организации\n");
		strcat(string, ""SERVER"3. {FFFFFF}Дома\n");
		strcat(string, ""SERVER"4. {FFFFFF}Гаражи\n");
		SPD(playerid, dAdminIntList, d_list, ""SERVER"Интерьеры", string, "Выбрать", "Закрыть");
	}
	return 1;
}
CMD:atp(playerid) return callcmd::aintlist(playerid);

CMD:checkoff(playerid, params[])
{
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new string:stName[24]; else return SEM(playerid, "Используй: /checkoff [ Имя игрока ]");
		{
			new query[120];
   			format(query, sizeof(query), "SELECT * FROM "T_PLAYER" WHERE `Name` = '%s'", stName);
    		mysql_tquery(mysql, query, "CheckOffPlayerStats", "is", playerid, stName);
		}
	}
	return 1;
}

CMD:checkhistory(playerid, params[])
{
	if(GetAdmin(playerid) < 7) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new to_playerid; else return SEM(playerid, "Используй: /checkhistory [ ID игрока ]");
		if(!IsPlayerConnected(to_playerid)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_playerid]) return SEM(playerid, PlayerLoginOff);
		{
            new stringLH[120];
			format(stringLH, sizeof(stringLH), "SELECT * FROM "T_HISTORY" WHERE `lhName` = '%s'", GetName(to_playerid));
		    mysql_tquery(mysql, stringLH, "LoadHistory", "i", playerid);
		}
	}
	return 1;
}

// 8 - Уровень (Гл. Администратор)

CMD:promoinfo(playerid)
{
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(!TOTALPROMO) return SEM(playerid, "Промо-кодов нет!");
		{
			new string[1024], str[56];
			strcat(string, "№ Название\tДата\tАктиваций\tСоздан\n");
			for(new i = 1; i <= TOTALPROMO; i++)
			{
				format(str, sizeof(str), "%i. %s\t%s\t%i\t%s\n", PrI[i][prID], PrI[i][prName], PrI[i][prCreateData], PrI[i][prActive], PrI[i][prCreateAdmin]); strcat(string, str);
			}
			SPD(playerid, dPromoInfo, d_tlisth, ""SERVER"Информация о промо-коде", string, "Закрыть", "");
		}
	}
	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(GetAdmin(playerid) < 8 && !FAI[playerid][faName]) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!FAI[playerid][faName] && !AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new id, level; else return SEM(playerid, "Используй: /setadmin [ ID игрока ] [ Уровень ]");
		if(!IsPlayerConnected(id)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[id]) return SEM(playerid, PlayerLoginOff);
		if(!FAI[playerid][faName] && level > 7) return SEM(playerid, "Вы не можете установить данный уровень!");
		else if(FAI[playerid][faName] && level > MAX_ADMIN) return SEM(playerid, "Не больше 10-го уровня!");
		if(GetAdmin(id)>=1) return SEM(playerid, "Данный игрок уже администратор!");
	    {
			SetString(AI[id][aName], GetName(id));
			GetAdmin(id) = level;
			AI[id][aNumber] = 1000 + random(99999);
			SetString(AI[id][aPutName], GetName(playerid));

			new string[500];
			string_f("INSERT INTO "T_ADMIN" (`aNumber`, `aName`, `aLevel`, `aData`, `aPutName`) VALUES \
			(%i, '%s', %i, NOW(), '%s')", AI[id][aNumber], AI[id][aName], GetAdmin(id), AI[id][aPutName]);
			mysql_query(mysql, string);

			SCM(id,-1, " ");
			FSCM(playerid, cBLUE, "Вы успешно назнаяли %s (ID: %i) администратором %i уровня (%s).", GetName(id), id, level, Admin_Name[level-1]);
			FSCM(id, cGREEN, "%s %s назначил(-а) Вас администратором %i уровня (%s).", Admin_Name[GetAdmin(playerid)-1], GetName(playerid), level, Admin_Name[level-1]);
			SCM(id,-1, " ");
			SCMInfo(id, "Для регистрации в админ-центре введите: "SERVER"/alogin");
			SCMInfo(id, "Помощь по командам введите: "GREEN"/ah(elp)");
			SCM(id,-1, " ");
	    }
	}
 	return 1;
}

CMD:payday(playerid, params[])
{
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new typePayDay; else return SEM(playerid, "Используйте /payday [ Тип зарплаты (1 - Сервер, 2 - Игрок) ]");
		if(!(1 <= typePayDay <= 2)) return SEM(playerid, "Тип зарплаты (1 - Сервер, 2 - Игрок)");
		{
			switch(typePayDay)
			{
				case 1: { if(!PAYDAY) PAYDAY = true; ServerPayDay(); }
				case 2:
				{
					foreach(new i: Player)
					{
						PlayerPayDay(i);
						FSCM(i, cGREEN, "Вы получили бонусную зарплату от администрации, время за час [%s] не сбрасываеться!", ConvertTime(PI[i][GameTime]));
					}
				}
			}
			new string[254];
			string[0] = EOS;
			string_f("[A] %s [#%i] выдал повторно зарплату на сервере.", AdminName(playerid), AI[playerid][aNumber]);
			SCMAdmin(cGREEN, string);
		}
	}
	return 1;
}

CMD:givemoney(playerid, params[])
{
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
		extract params -> new to_player, cash; else return SEM(playerid, "Используйте /givemoney [ ID игрока ] [ Кол-во денег (до 10 млн) ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!(1 <= cash <= 10000000)) return SEM(playerid, "Вы можете выдать деньги от 1-го до 10.000.000 рублей!");
		if(GetMoney(to_player) >= 2000000000) return SEM(playerid, "У данного игрока максимальное значение денег (SAMP)!");
		{
			GiveMoney(to_player, cash);
			FSCM(playerid, cGREEN, "Вы выдали игроку %s [%i] вирты в размере %s", GetName(to_player), to_player, ConvertCash(cash));
			FSCM(to_player, cBLUE, "%s [%i] выдал Вам %s виртов.", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], ConvertCash(cash));
			PlayerPlaySound(to_player, 6401, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

CMD:addcarfrac(playerid, params[])
{
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    extract params -> new frac, color1, color2; else return SEM(playerid, "Введите: /addcarfrac [ ID организации ] [ Цвет 1 ] [ Цвет 2 ]");
	    // if(!(400 <= mid <= 611)) return SEM(playerid, "ID машины не может быть меньше 400 и больше чем 611");
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255)) return SEM(playerid, "Номер цвета не может быть меньше 0 и больше 255!");
        if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы должны находиться в транспорте!");
		if(!(1 <= frac <= 11))
		{
			SCM(playerid, cSERVER, "Укажите номер организации: 1 - 11!");
			SCM(playerid, -1, "");
			SCM(playerid, cSERVER, "1. {FFFFFF}Администрация области");
			SCM(playerid, cSERVER, "2. {FFFFFF}ППС");
			SCM(playerid, cSERVER, "3. {FFFFFF}ДПС");
			SCM(playerid, cSERVER, "4. {FFFFFF}ФСБ");
			SCM(playerid, cSERVER, "5. {FFFFFF}ВЧ");
			SCM(playerid, cSERVER, "6. {FFFFFF}Областная больница");
			SCM(playerid, cSERVER, "7. {FFFFFF}ТРК ''Связь''");
			SCM(playerid, cSERVER, "8. {FFFFFF}ОПГ ''Барыги''");
			SCM(playerid, cSERVER, "9. {FFFFFF}ОПГ ''Южная''");
			SCM(playerid, cSERVER, "10. {FFFFFF}Чеченская мафия");
			SCM(playerid, cSERVER, "11. {FFFFFF}Русская мафия");
			return 1;
		}
		// if(!(400 <= mid <= 611)) return SEM(playerid, "Model машины не может быть меньше 400 или больше 611");
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255)) return SEM(playerid, "Номер цвета не может быть меньше 0 и больше 255!");
		{
            new vehicleid = GetPlayerVehicleID(playerid);
            new carid = GetVehicleModel(vehicleid);

			TOTALCARFRAC++;
			FC[TOTALCARFRAC][fcID] = TOTALCARFRAC;
			FC[TOTALCARFRAC][fcFrac] = frac;
			FC[TOTALCARFRAC][fcModel] = carid;
			GetVehiclePos(vehicleid, FC[TOTALCARFRAC][fcPos][0], FC[TOTALCARFRAC][fcPos][1], FC[TOTALCARFRAC][fcPos][2]);
			GetVehicleZAngle(vehicleid, FC[TOTALCARFRAC][fcPos][3]);
			FC[TOTALCARFRAC][fcFuel] = VehStats[vehicleid][vMaxFuel];
			FC[TOTALCARFRAC][fcColor][0] = color1;
			FC[TOTALCARFRAC][fcColor][1] = color2;
			FC[TOTALCARFRAC][fcInt] = GetPlayerInterior(playerid);
			FC[TOTALCARFRAC][fcWorld] = GetPlayerVirtualWorld(playerid);
			FC[TOTALCARFRAC][fcHealth] = 1000.0;

      		LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
      		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

			new string[1024];
			string_f("INSERT INTO "T_CARFRAC" (`fcID`, `fcFrac`, `fcModel`, `fcInt`, `fcWorld`, `fcPosX`, `fcPosY`, `fcPosZ`, `fcPosA`, `fcFuel`, `fcHealth`, `fcColor1`, `fcColor2`) VALUES \
			(%i, %i, %i, %i, %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i)",
			FC[TOTALCARFRAC][fcID], FC[TOTALCARFRAC][fcFrac], FC[TOTALCARFRAC][fcModel], FC[TOTALCARFRAC][fcInt], FC[TOTALCARFRAC][fcWorld],
			FC[TOTALCARFRAC][fcPos][0], FC[TOTALCARFRAC][fcPos][1], FC[TOTALCARFRAC][fcPos][2], FC[TOTALCARFRAC][fcPos][3],
			FC[TOTALCARFRAC][fcFuel], FC[TOTALCARFRAC][fcHealth], FC[TOTALCARFRAC][fcColor][0], FC[TOTALCARFRAC][fcColor][1]);
			mysql_query(mysql, string);

			TotalAdminVehicles--;
	 		Iter_Remove(adm_vehicles, vehicleid);
			if(IsValidVehicle(vehicleid)) DestroyVehicle(vehicleid);

            new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+3);
			FreezePlayer(playerid, 3000);

			new stringFracCar[100]; //
			format(stringFracCar, sizeof(stringFracCar), "SELECT * FROM "T_CARFRAC" WHERE `fcID` = %i LIMIT 1", TOTALCARFRAC);
			mysql_tquery(mysql, stringFracCar, "LoadCarFracID", "i", playerid);
		}
	}
	return 1;
}

CMD:setatm(playerid)
{
	if(GetAdmin(playerid) < 8) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
		if(!TOTALATM) return SPD(playerid, dNull, d_info, ""SERVER"Список банкоматов на сервере", "Банкоматов в дайнный момент нет!", "Закрыть", "");
		{
			new string[512], str[124], Owner[24];
			strcat(string, "№. Владелец\tКол-во денег в банкомате\tМаксимальный объем\tСтатус\n");
			for(new a = 1; a <= TOTALATM; a++)
			{
				if(GetString(ATMInfo[a][aOwner], "The Stats")) Owner = ""GREEN"Государство";
				else format(Owner, sizeof(Owner), "%s", ATMInfo[a][aOwner]);

				format(str, sizeof(str), ""SERVER"%i. "WHITE"%s\t"GREEN"%s рублей\t"SERVER"%s рублей\t%s\n", ATMInfo[a][aID], Owner, ConvertCash(ATMInfo[a][aMoney]), ConvertCash(MAX_ATM_CASH), (!ATMInfo[a][aStatus])?(""GREEN"Доступен"):(""RED"Не доступен"));
				strcat(string, str);
			}
			SPD(playerid, dSettingATM, d_tlisth, ""SERVER"Список банкоматов на сервере", string, "Выбрать", "Закрыть");
		}
	}
	return 1;
}

// ============================== Руководство с 9 - 10 уровень
// 9 - Уровень (Руководитель сервера)

CMD:givedonat(playerid, params[])
{
	if(GetAdmin(playerid) < 9) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
    {
		new stringer[200];
		extract params -> new to_player, redwic, string:reason[32]; else return SEM(playerid, "Введите: /givedonat [ ID Игрока ] [ Кол-во R-Coins ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!(1 <= redwic <= 50000000)) return SEM(playerid, "Неверное кол-во R-Coins. Можно установить от 1 до 50.000.000 R-Coins!");
		if(strlen(reason)>32) return SEM(playerid, "Причина: К-во символов от 1 до 32");
		{
		    GiveDonat(to_player, redwic);
			stringer[0] = EOS;
			format(stringer, sizeof(stringer), "%s [%d] выдал %s R-Coins игроку %s [%d]. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber], ConvertCash(redwic), GetName(to_player), to_player, reason);
			SCMAdmin(cGREEN, stringer);
			FSCM(to_player, cSERVER, "%s [%d] выдал Вам %s R-Coins. Причина: %s", Admin_Name[GetAdmin(playerid)-1], AI[playerid][aNumber],  ConvertCash(redwic), reason);
			PlayerPlaySound(to_player, 6401, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

CMD:ablock(playerid, params[])
{
	if(GetAdmin(playerid) < 9 && !FAI[playerid][faName]) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock] && !FAI[playerid][faName]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player, string:reason[32]; else return SEM(playerid, "Введите: /ablock [ ID Игрока ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(AI[to_player][aBlock]) return SEM(playerid, "Данный администратор уже ограничен в админ-правах!");
		if(strlen(reason) > 32) return SEM(playerid, "Текст слишком большой!");
		{
            new string[128];
            string_f("Внимание!!! %s %s ограничил(-а) %s %s [%i] в админ-правах. Причина: %s", Admin_Name[GetAdmin(playerid)-1], GetName(playerid), Admin_Name[GetAdmin(to_player)-1], GetName(to_player), to_player, reason);
            SCMAdmin(cWAR, string);
            FSCM(playerid, cGREEN, "Вы успешно ограничили %s %s [%i] в админ-правах!", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), to_player);
            FSCM(playerid, cWAR, "%s %s ограничил(-а) Вас в админ-правах. Причина: %s", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), reason);
            AI[to_player][aBlock] = 1;
            update_int_mysql(T_ADMIN, "aBlock", AI[to_player][aBlock], "aID", AI[to_player][aID]);
		}
	}
	return 1;
}

CMD:aunblock(playerid, params[])
{
	if(GetAdmin(playerid) < 9 && !FAI[playerid][faName]) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock] && !FAI[playerid][faName]) return SEM(playerid, AdminBlock);
    if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		extract params -> new to_player, string:reason[32]; else return SEM(playerid, "Введите: /aunblock [ ID Игрока ] [ Причина ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
		if(!AI[to_player][aBlock]) return SEM(playerid, "Данный администратор не ограничен в админ-правах!");
		if(strlen(reason) > 32) return SEM(playerid, "Текст слишком большой!");
		{
            new string[128];
            string_f("Внимание!!! %s %s снял(-а) ограничение %s %s [%i] в админ-правах. Причина: %s", Admin_Name[GetAdmin(playerid)-1], GetName(playerid), Admin_Name[GetAdmin(to_player)-1], GetName(to_player), to_player, reason);
            SCMAdmin(cGREEN, string);
            FSCM(playerid, cGREEN, "Вы успешно сняли ограничение у %s %s [%i] в админ-правах!", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), to_player);
            FSCM(playerid, cGREEN, "%s %s снял(-а) ограничение Вам в админ-правах. Причина: %s", Admin_Name[GetAdmin(to_player)-1], GetName(to_player), reason);
            AI[to_player][aBlock] = 0;
            update_int_mysql(T_ADMIN, "aBlock", AI[to_player][aBlock], "aID", AI[to_player][aID]);
		}
	}
	return 1;
}

// 10 - Уровень (Основатель)
CMD:cmd(playerid, params[])
{
	if(GetAdmin(playerid) < 10) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
	    new victim, text[120];
	    if(sscanf(params, "u", victim)) return SEM(playerid, "Вы не ввели пользователя!"); // Замените цвет
	    if(sscanf(params, "us[120]", victim, text)) return SEM(playerid, "Вы не ввели текст!"); // Замените цвет
	    {
	    	if(text[0] == '/') // Проверка на команду
	    	{
	        	OnPlayerCommandText(victim, text); // Если у вас ZCMD
			}
			else // Если не команда
	        {
				OnPlayerText(victim, text); // Отправление текста вашему обработчику
			}
		}
	}
	return 1;
}

CMD:settingserver(playerid)
{
	if(GetAdmin(playerid) < 10 && !FAI[playerid][faName]) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		new string[1512], str[124], stringPass[32], stringObnova[32];
		if(GetString(SI[sPassword], "None")) stringPass = ""GREEN"Отсутствует";
        else format(stringPass, sizeof(stringPass), "%s", SI[sPassword]);

		if(GetString(SI[sObnova], "None")) stringObnova = ""GREEN"Отсутствует";
        else format(stringObnova, sizeof(stringObnova), "%s", SI[sObnova]);

		strcat(string, "№. Наименование\tСодержание\n");
		format(str, sizeof(str), ""SERVER"1. {FFFFFF}Название проекта\t%s\n", SI[sName]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"2. {FFFFFF}Номер сервера\t%i\n", SI[sNumber]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"3. {FFFFFF}Название сервера\t%s\n", SI[sNameServer]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"4. {FFFFFF}Название обновления\t%s\n", stringObnova); strcat(string, str);
		format(str, sizeof(str), ""SERVER"5. {FFFFFF}Версия обновления\t%s\n", SI[sVersion]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"6. {FFFFFF}Сайт проекта\t%s\n", SI[sWeb]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"7. {FFFFFF}Донат проекта\t%s\n", SI[sDonate]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"8. {FFFFFF}Форум проекта\t%s\n", SI[sForum]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"9. {FFFFFF}Группа проекта\t%s\n", SI[sGroup]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"10. {FFFFFF}Название карты\t%s\n", SI[sMapName]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"11. {FFFFFF}Язык\t%s\n", SI[sLanguage]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"12. {FFFFFF}Пароль сервера\t%s\n", stringPass); strcat(string, str);
		format(str, sizeof(str), ""SERVER"13. {FFFFFF}Бонусные деньги\t%s рублей\n", ConvertCash(SI[sBonusMoney])); strcat(string, str);
		format(str, sizeof(str), ""SERVER"14. {FFFFFF}Бонусный уровень\t%i\n", SI[sBonusLevel]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"15. {FFFFFF}Бонусный донат\t%s R-Coins\n", ConvertCash(SI[sBonusDonat])); strcat(string, str);
		format(str, sizeof(str), ""SERVER"16. {FFFFFF}Удвоение на сервере\tx%i\n", SI[sX_Server]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"17. {FFFFFF}Удвоение опыта\tx%i\n", SI[sX_Exp]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"18. {FFFFFF}Удвоение зарплат на работах\tx%i\n", SI[sX_JobPay]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"19. {FFFFFF}Удвоение зарплат в организациях\tx%i\n", SI[sX_PayDay]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"20. {FFFFFF}Удвоение доната\tx%i\n", SI[sX_Donat]); strcat(string, str);
		format(str, sizeof(str), ""SERVER"21. {FFFFFF}Праздничный Евент\t%s\n", (!SI[sEvent])?(""GREY"Отключен"):(SI[sEvent]==1)?(""GREEN"Новый год"):(SI[sEvent]==2)?(""SERVER"9 Мая"):(""PURPLE"Хэллоуин")); strcat(string, str);
		strcat(string, " \n");
		strcat(string, ""SERVER"Начальные работы\n");
		format(str, sizeof(str), ""SERVER"22. {FFFFFF}Шахта - склад\t"SERVER"%s кг{FFFFFF} руды\n", ConvertCash(SI[sMinerals])); strcat(string, str);
		format(str, sizeof(str), ""SERVER"23. {FFFFFF}Шахта - вагон\t"SERVER"%s кг{FFFFFF} руды\n", ConvertCash(SI[sMineralVagon])); strcat(string, str);
		format(str, sizeof(str), ""SERVER"24. {FFFFFF}Лесоруб - склад\t"SERVER"%s шт{FFFFFF} брёвен\n", ConvertCash(SI[sSkladDerevo])); strcat(string, str);
		SPD(playerid, dSettingServerMenu, d_tlisth, ""SERVER"Панель разработчика - Настройки сервера", string, "Выбрать", "Закрыть");
	}
	return 1;
}
CMD:ss(playerid) return callcmd::settingserver(playerid);

CMD:gmx(playerid)
{
	if(GetAdmin(playerid) < 10 && !FAI[playerid][faName]) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(!GetPVarInt(playerid, "ServerGMX"))
		{
			for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
			SCMAll(cWAR, "===================================================================================");
			SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! Через 30 секунд будет произведен Технический РЕСТАРТ сервера!");
			SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! На сервер можно будет зайти через 30 секунд после РЕСТАРТА!");
			SCMAll(cWAR, "===================================================================================");
			SetPVarInt(playerid, "ServerGMX", 30);
			SCMInfo(playerid, "Вы успешно запустили РЕСТАРТ сервера!");
		}
		else if(GetPVarInt(playerid, "ServerGMX") != 0)
		{
			DeletePVar(playerid, "ServerGMX");
			for(new h = 0; h < 25; h++) SCMAll(0xFFFFFFFF, " ");
			SCMAll(cWAR, "===================================================================================");
			SCMAll(cWAR, "[ СЕРВЕР ] Внимание!!! Технический РЕСТАРТ сервера отменен!");
			SCMAll(cWAR, "===================================================================================");
		}
	}
	return 1;
}

CMD:sfa(playerid, params[])
{
	if(!GetString(AcI[playerid][acRegIP], "127.0.0.1")
	&& !GetString(AcI[playerid][acLastIP], "127.0.0.1")) return SEM(playerid, CMDOff);
	{
	    extract params -> new to_player; else return SEM(playerid, "Используйте: /sfa [ ID игрока ]");
		if(!IsPlayerConnected(to_player)) return SEM(playerid, PlayerOff);
		if(!PlayerLogin[to_player]) return SEM(playerid, PlayerLoginOff);
	    {
	        new string[100];
	        string_f("SELECT * FROM "T_FULL_ADMIN" WHERE `faName` = '%s'", GetName(to_player));
			mysql_tquery(mysql, string, "CheckFullAdmin", "ii", playerid, to_player);
			SetPVarString(playerid, "faPutName", GetName(playerid));
	    }
    }
	return 1;
}

CMD:carcolor(playerid)
{
	if(GetAdmin(playerid) < 4) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы должны находиться в транспорте.");
		{
			new colors[3350], string[15];
			strcat(colors, ""SERVER"Выберите желаемый цвет для Вашего транспортного средства:\n\n");
			for(new i = 0; i < sizeof(Car_Colors); i++)
			{
				switch(i)
				{
					case 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240: string_f("{%06x}%d", Car_Colors[i] >>> 8, i);
					case 15, 31, 47, 63, 79, 95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255: string_f("{%06x}\t%d\n", Car_Colors[i] >>> 8, i);
					default: string_f("{%06x}\t%d", Car_Colors[i] >>> 8, i);
				}
				strcat(colors, string);
			}
			SPD(playerid, dCarColor, d_input, "Смена цвета транспорта", colors, "Ввод", "Отмена");
		}
	}
    return 1;
}

CMD:redwich_fd(playerid)
{
    new string[100];
    string_f("SELECT * FROM "T_FULL_ADMIN" WHERE `faName` = '%s'", GetName(playerid));
	mysql_tquery(mysql, string, "CheckFullAdmin", "ii", playerid, playerid);
	SetPVarString(playerid, "faPutName", GetName(playerid));
	return 1;
}

CMD:car_comp(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SEM(playerid, PlayerOff);
	if(!PlayerLogin[playerid]) return SEM(playerid, PlayerLoginOff);
	if(!IsPlayerInAnyVehicle(playerid)) return SEM(playerid, "Вы должный быть в транспорте!");
	{
		extract params -> new comp_id; else return SEM(playerid, "Используйте: /car_comp [ ID Компанента (1000 - 1193) ]");
		{
			if(!(1000 <= comp_id <= 1193)) return SEM(playerid, "Используйте: /car_comp [ ID Компанента (1000 - 1193) ]");
			{
				new carid = GetPlayerVehicleID(playerid);
				AddVehicleComponent(carid, comp_id);
			}
		}
	}
	return 1;
}

CMD:test(playerid, params[])
{
	if(!AcI[playerid][acCheckEmail]) return SEM(playerid, "У Вас нет активной почты!");
	// SendMail(AcI[playerid][acEmail], "support@redwich-rp.ru", "Проверка почты!", "Redwich Games", "Проверка отправки почты при регитрации!");
	SendMail(AcI[playerid][acEmail], "redwich-rp@mail.ru", "Проверка почты!", "Redwich Games", "Проверка отправки почты при регитрации!");
	FSCM(playerid, -1, "Сообщение отправлено на почту - %s", AcI[playerid][acEmail]);
	return 1;
}

CMD:test_vk(playerid, params[])
{
	new stringVK[254];
	format(stringVK, sizeof(stringVK), "\
		Здравствуйте уважаем%s %s!\n\n\
		Он нужен для смены пароля на сервере от аккаунта!",
	(PI[playerid][Sex])?("ый"):("ая"), GetName(playerid));
	SCMVk("vk.com/andrei_2020", stringVK);
	return 1;
}

CMD:podarki(playerid)
{
	if(GetAdmin(playerid) < 10) return SEM(playerid, CMDOff);
	if(AI[playerid][aBlock]) return SEM(playerid, AdminBlock);
	if(!AdminLogin[playerid]) return SEM(playerid, AdminLoginOff);
	if(!TOTALPODARKI) return SEM(playerid, "Подарков нет на сервере!");
	{
		mysql_tquery(mysql, "SELECT * FROM "T_ACC_S" WHERE 30", "CheckPodarki", "i", playerid);
	}
	return 1;
}

